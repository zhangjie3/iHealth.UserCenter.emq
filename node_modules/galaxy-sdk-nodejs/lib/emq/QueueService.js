//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('../thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Common_ttypes = require('./Common_types')
var Message_ttypes = require('./Message_types')


var EMQBaseService = require('./EMQBaseService')
var EMQBaseServiceClient = EMQBaseService.Client
var EMQBaseServiceProcessor = EMQBaseService.Processor
var ttypes = require('./Queue_types');
//HELPER FUNCTIONS AND STRUCTURES

QueueService_createQueue_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_createQueue_args.prototype = {};
QueueService_createQueue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreateQueueRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_createQueue_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_createQueue_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_createQueue_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_createQueue_result.prototype = {};
QueueService_createQueue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CreateQueueResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_createQueue_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_createQueue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_deleteQueue_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_deleteQueue_args.prototype = {};
QueueService_deleteQueue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.DeleteQueueRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_deleteQueue_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_deleteQueue_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_deleteQueue_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_deleteQueue_result.prototype = {};
QueueService_deleteQueue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_deleteQueue_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_deleteQueue_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_purgeQueue_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_purgeQueue_args.prototype = {};
QueueService_purgeQueue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.PurgeQueueRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_purgeQueue_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_purgeQueue_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_purgeQueue_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_purgeQueue_result.prototype = {};
QueueService_purgeQueue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_purgeQueue_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_purgeQueue_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_setQueueAttribute_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_setQueueAttribute_args.prototype = {};
QueueService_setQueueAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.SetQueueAttributesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_setQueueAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_setQueueAttribute_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_setQueueAttribute_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_setQueueAttribute_result.prototype = {};
QueueService_setQueueAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SetQueueAttributesResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_setQueueAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_setQueueAttribute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_setQueueQuota_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_setQueueQuota_args.prototype = {};
QueueService_setQueueQuota_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.SetQueueQuotaRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_setQueueQuota_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_setQueueQuota_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_setQueueQuota_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_setQueueQuota_result.prototype = {};
QueueService_setQueueQuota_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SetQueueQuotaResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_setQueueQuota_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_setQueueQuota_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_getQueueInfo_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_getQueueInfo_args.prototype = {};
QueueService_getQueueInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetQueueInfoRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_getQueueInfo_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_getQueueInfo_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_getQueueInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_getQueueInfo_result.prototype = {};
QueueService_getQueueInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetQueueInfoResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_getQueueInfo_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_getQueueInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_listQueue_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_listQueue_args.prototype = {};
QueueService_listQueue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.ListQueueRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_listQueue_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_listQueue_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_listQueue_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_listQueue_result.prototype = {};
QueueService_listQueue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ListQueueResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_listQueue_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_listQueue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_setQueueRedrivePolicy_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_setQueueRedrivePolicy_args.prototype = {};
QueueService_setQueueRedrivePolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.SetQueueRedrivePolicyRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_setQueueRedrivePolicy_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_setQueueRedrivePolicy_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_setQueueRedrivePolicy_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_setQueueRedrivePolicy_result.prototype = {};
QueueService_setQueueRedrivePolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SetQueueRedrivePolicyResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_setQueueRedrivePolicy_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_setQueueRedrivePolicy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_removeQueueRedrivePolicy_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_removeQueueRedrivePolicy_args.prototype = {};
QueueService_removeQueueRedrivePolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.RemoveQueueRedrivePolicyRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_removeQueueRedrivePolicy_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_removeQueueRedrivePolicy_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_removeQueueRedrivePolicy_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_removeQueueRedrivePolicy_result.prototype = {};
QueueService_removeQueueRedrivePolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_removeQueueRedrivePolicy_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_removeQueueRedrivePolicy_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_setPermission_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_setPermission_args.prototype = {};
QueueService_setPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.SetPermissionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_setPermission_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_setPermission_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_setPermission_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_setPermission_result.prototype = {};
QueueService_setPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_setPermission_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_setPermission_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_revokePermission_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_revokePermission_args.prototype = {};
QueueService_revokePermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.RevokePermissionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_revokePermission_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_revokePermission_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_revokePermission_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_revokePermission_result.prototype = {};
QueueService_revokePermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_revokePermission_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_revokePermission_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_queryPermission_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_queryPermission_args.prototype = {};
QueueService_queryPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.QueryPermissionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_queryPermission_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_queryPermission_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_queryPermission_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_queryPermission_result.prototype = {};
QueueService_queryPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.QueryPermissionResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_queryPermission_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_queryPermission_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_queryPermissionForId_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_queryPermissionForId_args.prototype = {};
QueueService_queryPermissionForId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.QueryPermissionForIdRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_queryPermissionForId_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_queryPermissionForId_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_queryPermissionForId_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_queryPermissionForId_result.prototype = {};
QueueService_queryPermissionForId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.QueryPermissionForIdResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_queryPermissionForId_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_queryPermissionForId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_listPermissions_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_listPermissions_args.prototype = {};
QueueService_listPermissions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.ListPermissionsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_listPermissions_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_listPermissions_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_listPermissions_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_listPermissions_result.prototype = {};
QueueService_listPermissions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ListPermissionsResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_listPermissions_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_listPermissions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_createTag_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_createTag_args.prototype = {};
QueueService_createTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreateTagRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_createTag_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_createTag_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_createTag_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_createTag_result.prototype = {};
QueueService_createTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CreateTagResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_createTag_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_createTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_deleteTag_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_deleteTag_args.prototype = {};
QueueService_deleteTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.DeleteTagRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_deleteTag_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_deleteTag_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_deleteTag_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_deleteTag_result.prototype = {};
QueueService_deleteTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_deleteTag_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_deleteTag_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_getTagInfo_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_getTagInfo_args.prototype = {};
QueueService_getTagInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetTagInfoRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_getTagInfo_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_getTagInfo_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_getTagInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_getTagInfo_result.prototype = {};
QueueService_getTagInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetTagInfoResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_getTagInfo_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_getTagInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_listTag_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_listTag_args.prototype = {};
QueueService_listTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.ListTagRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_listTag_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_listTag_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_listTag_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_listTag_result.prototype = {};
QueueService_listTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ListTagResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_listTag_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_listTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_queryMetric_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_queryMetric_args.prototype = {};
QueueService_queryMetric_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.QueryMetricRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_queryMetric_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_queryMetric_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_queryMetric_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_queryMetric_result.prototype = {};
QueueService_queryMetric_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TimeSeriesData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_queryMetric_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_queryMetric_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_queryPrivilegedQueue_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_queryPrivilegedQueue_args.prototype = {};
QueueService_queryPrivilegedQueue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.QueryPrivilegedQueueRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_queryPrivilegedQueue_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_queryPrivilegedQueue_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_queryPrivilegedQueue_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_queryPrivilegedQueue_result.prototype = {};
QueueService_queryPrivilegedQueue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.QueryPrivilegedQueueResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_queryPrivilegedQueue_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_queryPrivilegedQueue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_verifyEMQAdmin_args = function(args) {
};
QueueService_verifyEMQAdmin_args.prototype = {};
QueueService_verifyEMQAdmin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_verifyEMQAdmin_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_verifyEMQAdmin_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_verifyEMQAdmin_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_verifyEMQAdmin_result.prototype = {};
QueueService_verifyEMQAdmin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.VerifyEMQAdminResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_verifyEMQAdmin_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_verifyEMQAdmin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_copyQueue_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
QueueService_copyQueue_args.prototype = {};
QueueService_copyQueue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CopyQueueRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_copyQueue_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_copyQueue_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_copyQueue_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_copyQueue_result.prototype = {};
QueueService_copyQueue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_copyQueue_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_copyQueue_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_getQueueMeta_args = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    }
  }
};
QueueService_getQueueMeta_args.prototype = {};
QueueService_getQueueMeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_getQueueMeta_args.prototype.write = function(output) {
  output.writeStructBegin('QueueService_getQueueMeta_args');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueService_getQueueMeta_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
QueueService_getQueueMeta_result.prototype = {};
QueueService_getQueueMeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetQueueMetaResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueService_getQueueMeta_result.prototype.write = function(output) {
  output.writeStructBegin('QueueService_getQueueMeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(QueueServiceClient, EMQBaseServiceClient);
QueueServiceClient.prototype.seqid = function() { return this._seqid; }
QueueServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
QueueServiceClient.prototype.createQueue = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createQueue(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createQueue(request);
  }
};

QueueServiceClient.prototype.send_createQueue = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createQueue', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_createQueue_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_createQueue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_createQueue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createQueue failed: unknown result');
};
QueueServiceClient.prototype.deleteQueue = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteQueue(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteQueue(request);
  }
};

QueueServiceClient.prototype.send_deleteQueue = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteQueue', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_deleteQueue_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_deleteQueue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_deleteQueue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
QueueServiceClient.prototype.purgeQueue = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_purgeQueue(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_purgeQueue(request);
  }
};

QueueServiceClient.prototype.send_purgeQueue = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('purgeQueue', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_purgeQueue_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_purgeQueue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_purgeQueue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
QueueServiceClient.prototype.setQueueAttribute = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setQueueAttribute(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setQueueAttribute(request);
  }
};

QueueServiceClient.prototype.send_setQueueAttribute = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setQueueAttribute', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_setQueueAttribute_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_setQueueAttribute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_setQueueAttribute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setQueueAttribute failed: unknown result');
};
QueueServiceClient.prototype.setQueueQuota = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setQueueQuota(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setQueueQuota(request);
  }
};

QueueServiceClient.prototype.send_setQueueQuota = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setQueueQuota', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_setQueueQuota_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_setQueueQuota = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_setQueueQuota_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setQueueQuota failed: unknown result');
};
QueueServiceClient.prototype.getQueueInfo = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getQueueInfo(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getQueueInfo(request);
  }
};

QueueServiceClient.prototype.send_getQueueInfo = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQueueInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_getQueueInfo_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_getQueueInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_getQueueInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQueueInfo failed: unknown result');
};
QueueServiceClient.prototype.listQueue = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listQueue(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listQueue(request);
  }
};

QueueServiceClient.prototype.send_listQueue = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listQueue', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_listQueue_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_listQueue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_listQueue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listQueue failed: unknown result');
};
QueueServiceClient.prototype.setQueueRedrivePolicy = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setQueueRedrivePolicy(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setQueueRedrivePolicy(request);
  }
};

QueueServiceClient.prototype.send_setQueueRedrivePolicy = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setQueueRedrivePolicy', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_setQueueRedrivePolicy_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_setQueueRedrivePolicy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_setQueueRedrivePolicy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setQueueRedrivePolicy failed: unknown result');
};
QueueServiceClient.prototype.removeQueueRedrivePolicy = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeQueueRedrivePolicy(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeQueueRedrivePolicy(request);
  }
};

QueueServiceClient.prototype.send_removeQueueRedrivePolicy = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeQueueRedrivePolicy', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_removeQueueRedrivePolicy_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_removeQueueRedrivePolicy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_removeQueueRedrivePolicy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
QueueServiceClient.prototype.setPermission = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPermission(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPermission(request);
  }
};

QueueServiceClient.prototype.send_setPermission = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPermission', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_setPermission_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_setPermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_setPermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
QueueServiceClient.prototype.revokePermission = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_revokePermission(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_revokePermission(request);
  }
};

QueueServiceClient.prototype.send_revokePermission = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revokePermission', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_revokePermission_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_revokePermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_revokePermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
QueueServiceClient.prototype.queryPermission = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryPermission(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryPermission(request);
  }
};

QueueServiceClient.prototype.send_queryPermission = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryPermission', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_queryPermission_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_queryPermission = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_queryPermission_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryPermission failed: unknown result');
};
QueueServiceClient.prototype.queryPermissionForId = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryPermissionForId(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryPermissionForId(request);
  }
};

QueueServiceClient.prototype.send_queryPermissionForId = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryPermissionForId', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_queryPermissionForId_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_queryPermissionForId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_queryPermissionForId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryPermissionForId failed: unknown result');
};
QueueServiceClient.prototype.listPermissions = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listPermissions(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listPermissions(request);
  }
};

QueueServiceClient.prototype.send_listPermissions = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listPermissions', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_listPermissions_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_listPermissions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_listPermissions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listPermissions failed: unknown result');
};
QueueServiceClient.prototype.createTag = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createTag(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createTag(request);
  }
};

QueueServiceClient.prototype.send_createTag = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createTag', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_createTag_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_createTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_createTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createTag failed: unknown result');
};
QueueServiceClient.prototype.deleteTag = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteTag(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteTag(request);
  }
};

QueueServiceClient.prototype.send_deleteTag = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteTag', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_deleteTag_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_deleteTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_deleteTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
QueueServiceClient.prototype.getTagInfo = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTagInfo(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTagInfo(request);
  }
};

QueueServiceClient.prototype.send_getTagInfo = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTagInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_getTagInfo_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_getTagInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_getTagInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTagInfo failed: unknown result');
};
QueueServiceClient.prototype.listTag = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listTag(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listTag(request);
  }
};

QueueServiceClient.prototype.send_listTag = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listTag', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_listTag_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_listTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_listTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listTag failed: unknown result');
};
QueueServiceClient.prototype.queryMetric = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryMetric(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryMetric(request);
  }
};

QueueServiceClient.prototype.send_queryMetric = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryMetric', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_queryMetric_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_queryMetric = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_queryMetric_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryMetric failed: unknown result');
};
QueueServiceClient.prototype.queryPrivilegedQueue = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryPrivilegedQueue(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryPrivilegedQueue(request);
  }
};

QueueServiceClient.prototype.send_queryPrivilegedQueue = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryPrivilegedQueue', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_queryPrivilegedQueue_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_queryPrivilegedQueue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_queryPrivilegedQueue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryPrivilegedQueue failed: unknown result');
};
QueueServiceClient.prototype.verifyEMQAdmin = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyEMQAdmin();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyEMQAdmin();
  }
};

QueueServiceClient.prototype.send_verifyEMQAdmin = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyEMQAdmin', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_verifyEMQAdmin_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_verifyEMQAdmin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_verifyEMQAdmin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyEMQAdmin failed: unknown result');
};
QueueServiceClient.prototype.copyQueue = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_copyQueue(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_copyQueue(request);
  }
};

QueueServiceClient.prototype.send_copyQueue = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('copyQueue', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_copyQueue_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_copyQueue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_copyQueue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
QueueServiceClient.prototype.getQueueMeta = function(queueName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getQueueMeta(queueName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getQueueMeta(queueName);
  }
};

QueueServiceClient.prototype.send_getQueueMeta = function(queueName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQueueMeta', Thrift.MessageType.CALL, this.seqid());
  var args = new QueueService_getQueueMeta_args();
  args.queueName = queueName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QueueServiceClient.prototype.recv_getQueueMeta = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QueueService_getQueueMeta_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQueueMeta failed: unknown result');
};
QueueServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(QueueServiceProcessor, EMQBaseServiceProcessor)
QueueServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

QueueServiceProcessor.prototype.process_createQueue = function(seqid, input, output) {
  var args = new QueueService_createQueue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createQueue.length === 1) {
    Q.fcall(this._handler.createQueue, args.request)
      .then(function(result) {
        var result = new QueueService_createQueue_result({success: result});
        output.writeMessageBegin("createQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_createQueue_result(err);
        output.writeMessageBegin("createQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createQueue(args.request,  function (err, result) {
      var result = new QueueService_createQueue_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createQueue", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_deleteQueue = function(seqid, input, output) {
  var args = new QueueService_deleteQueue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteQueue.length === 1) {
    Q.fcall(this._handler.deleteQueue, args.request)
      .then(function(result) {
        var result = new QueueService_deleteQueue_result({success: result});
        output.writeMessageBegin("deleteQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_deleteQueue_result(err);
        output.writeMessageBegin("deleteQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteQueue(args.request,  function (err, result) {
      var result = new QueueService_deleteQueue_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteQueue", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_purgeQueue = function(seqid, input, output) {
  var args = new QueueService_purgeQueue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.purgeQueue.length === 1) {
    Q.fcall(this._handler.purgeQueue, args.request)
      .then(function(result) {
        var result = new QueueService_purgeQueue_result({success: result});
        output.writeMessageBegin("purgeQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_purgeQueue_result(err);
        output.writeMessageBegin("purgeQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.purgeQueue(args.request,  function (err, result) {
      var result = new QueueService_purgeQueue_result((err != null ? err : {success: result}));
      output.writeMessageBegin("purgeQueue", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_setQueueAttribute = function(seqid, input, output) {
  var args = new QueueService_setQueueAttribute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setQueueAttribute.length === 1) {
    Q.fcall(this._handler.setQueueAttribute, args.request)
      .then(function(result) {
        var result = new QueueService_setQueueAttribute_result({success: result});
        output.writeMessageBegin("setQueueAttribute", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_setQueueAttribute_result(err);
        output.writeMessageBegin("setQueueAttribute", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setQueueAttribute(args.request,  function (err, result) {
      var result = new QueueService_setQueueAttribute_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setQueueAttribute", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_setQueueQuota = function(seqid, input, output) {
  var args = new QueueService_setQueueQuota_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setQueueQuota.length === 1) {
    Q.fcall(this._handler.setQueueQuota, args.request)
      .then(function(result) {
        var result = new QueueService_setQueueQuota_result({success: result});
        output.writeMessageBegin("setQueueQuota", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_setQueueQuota_result(err);
        output.writeMessageBegin("setQueueQuota", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setQueueQuota(args.request,  function (err, result) {
      var result = new QueueService_setQueueQuota_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setQueueQuota", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_getQueueInfo = function(seqid, input, output) {
  var args = new QueueService_getQueueInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getQueueInfo.length === 1) {
    Q.fcall(this._handler.getQueueInfo, args.request)
      .then(function(result) {
        var result = new QueueService_getQueueInfo_result({success: result});
        output.writeMessageBegin("getQueueInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_getQueueInfo_result(err);
        output.writeMessageBegin("getQueueInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getQueueInfo(args.request,  function (err, result) {
      var result = new QueueService_getQueueInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getQueueInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_listQueue = function(seqid, input, output) {
  var args = new QueueService_listQueue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listQueue.length === 1) {
    Q.fcall(this._handler.listQueue, args.request)
      .then(function(result) {
        var result = new QueueService_listQueue_result({success: result});
        output.writeMessageBegin("listQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_listQueue_result(err);
        output.writeMessageBegin("listQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listQueue(args.request,  function (err, result) {
      var result = new QueueService_listQueue_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listQueue", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_setQueueRedrivePolicy = function(seqid, input, output) {
  var args = new QueueService_setQueueRedrivePolicy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setQueueRedrivePolicy.length === 1) {
    Q.fcall(this._handler.setQueueRedrivePolicy, args.request)
      .then(function(result) {
        var result = new QueueService_setQueueRedrivePolicy_result({success: result});
        output.writeMessageBegin("setQueueRedrivePolicy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_setQueueRedrivePolicy_result(err);
        output.writeMessageBegin("setQueueRedrivePolicy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setQueueRedrivePolicy(args.request,  function (err, result) {
      var result = new QueueService_setQueueRedrivePolicy_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setQueueRedrivePolicy", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_removeQueueRedrivePolicy = function(seqid, input, output) {
  var args = new QueueService_removeQueueRedrivePolicy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeQueueRedrivePolicy.length === 1) {
    Q.fcall(this._handler.removeQueueRedrivePolicy, args.request)
      .then(function(result) {
        var result = new QueueService_removeQueueRedrivePolicy_result({success: result});
        output.writeMessageBegin("removeQueueRedrivePolicy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_removeQueueRedrivePolicy_result(err);
        output.writeMessageBegin("removeQueueRedrivePolicy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeQueueRedrivePolicy(args.request,  function (err, result) {
      var result = new QueueService_removeQueueRedrivePolicy_result((err != null ? err : {success: result}));
      output.writeMessageBegin("removeQueueRedrivePolicy", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_setPermission = function(seqid, input, output) {
  var args = new QueueService_setPermission_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPermission.length === 1) {
    Q.fcall(this._handler.setPermission, args.request)
      .then(function(result) {
        var result = new QueueService_setPermission_result({success: result});
        output.writeMessageBegin("setPermission", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_setPermission_result(err);
        output.writeMessageBegin("setPermission", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPermission(args.request,  function (err, result) {
      var result = new QueueService_setPermission_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setPermission", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_revokePermission = function(seqid, input, output) {
  var args = new QueueService_revokePermission_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.revokePermission.length === 1) {
    Q.fcall(this._handler.revokePermission, args.request)
      .then(function(result) {
        var result = new QueueService_revokePermission_result({success: result});
        output.writeMessageBegin("revokePermission", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_revokePermission_result(err);
        output.writeMessageBegin("revokePermission", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.revokePermission(args.request,  function (err, result) {
      var result = new QueueService_revokePermission_result((err != null ? err : {success: result}));
      output.writeMessageBegin("revokePermission", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_queryPermission = function(seqid, input, output) {
  var args = new QueueService_queryPermission_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryPermission.length === 1) {
    Q.fcall(this._handler.queryPermission, args.request)
      .then(function(result) {
        var result = new QueueService_queryPermission_result({success: result});
        output.writeMessageBegin("queryPermission", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_queryPermission_result(err);
        output.writeMessageBegin("queryPermission", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryPermission(args.request,  function (err, result) {
      var result = new QueueService_queryPermission_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryPermission", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_queryPermissionForId = function(seqid, input, output) {
  var args = new QueueService_queryPermissionForId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryPermissionForId.length === 1) {
    Q.fcall(this._handler.queryPermissionForId, args.request)
      .then(function(result) {
        var result = new QueueService_queryPermissionForId_result({success: result});
        output.writeMessageBegin("queryPermissionForId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_queryPermissionForId_result(err);
        output.writeMessageBegin("queryPermissionForId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryPermissionForId(args.request,  function (err, result) {
      var result = new QueueService_queryPermissionForId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryPermissionForId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_listPermissions = function(seqid, input, output) {
  var args = new QueueService_listPermissions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listPermissions.length === 1) {
    Q.fcall(this._handler.listPermissions, args.request)
      .then(function(result) {
        var result = new QueueService_listPermissions_result({success: result});
        output.writeMessageBegin("listPermissions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_listPermissions_result(err);
        output.writeMessageBegin("listPermissions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listPermissions(args.request,  function (err, result) {
      var result = new QueueService_listPermissions_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listPermissions", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_createTag = function(seqid, input, output) {
  var args = new QueueService_createTag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createTag.length === 1) {
    Q.fcall(this._handler.createTag, args.request)
      .then(function(result) {
        var result = new QueueService_createTag_result({success: result});
        output.writeMessageBegin("createTag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_createTag_result(err);
        output.writeMessageBegin("createTag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createTag(args.request,  function (err, result) {
      var result = new QueueService_createTag_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createTag", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_deleteTag = function(seqid, input, output) {
  var args = new QueueService_deleteTag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteTag.length === 1) {
    Q.fcall(this._handler.deleteTag, args.request)
      .then(function(result) {
        var result = new QueueService_deleteTag_result({success: result});
        output.writeMessageBegin("deleteTag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_deleteTag_result(err);
        output.writeMessageBegin("deleteTag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteTag(args.request,  function (err, result) {
      var result = new QueueService_deleteTag_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteTag", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_getTagInfo = function(seqid, input, output) {
  var args = new QueueService_getTagInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTagInfo.length === 1) {
    Q.fcall(this._handler.getTagInfo, args.request)
      .then(function(result) {
        var result = new QueueService_getTagInfo_result({success: result});
        output.writeMessageBegin("getTagInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_getTagInfo_result(err);
        output.writeMessageBegin("getTagInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTagInfo(args.request,  function (err, result) {
      var result = new QueueService_getTagInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTagInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_listTag = function(seqid, input, output) {
  var args = new QueueService_listTag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listTag.length === 1) {
    Q.fcall(this._handler.listTag, args.request)
      .then(function(result) {
        var result = new QueueService_listTag_result({success: result});
        output.writeMessageBegin("listTag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_listTag_result(err);
        output.writeMessageBegin("listTag", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listTag(args.request,  function (err, result) {
      var result = new QueueService_listTag_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listTag", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_queryMetric = function(seqid, input, output) {
  var args = new QueueService_queryMetric_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryMetric.length === 1) {
    Q.fcall(this._handler.queryMetric, args.request)
      .then(function(result) {
        var result = new QueueService_queryMetric_result({success: result});
        output.writeMessageBegin("queryMetric", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_queryMetric_result(err);
        output.writeMessageBegin("queryMetric", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryMetric(args.request,  function (err, result) {
      var result = new QueueService_queryMetric_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryMetric", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_queryPrivilegedQueue = function(seqid, input, output) {
  var args = new QueueService_queryPrivilegedQueue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryPrivilegedQueue.length === 1) {
    Q.fcall(this._handler.queryPrivilegedQueue, args.request)
      .then(function(result) {
        var result = new QueueService_queryPrivilegedQueue_result({success: result});
        output.writeMessageBegin("queryPrivilegedQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_queryPrivilegedQueue_result(err);
        output.writeMessageBegin("queryPrivilegedQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryPrivilegedQueue(args.request,  function (err, result) {
      var result = new QueueService_queryPrivilegedQueue_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryPrivilegedQueue", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_verifyEMQAdmin = function(seqid, input, output) {
  var args = new QueueService_verifyEMQAdmin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyEMQAdmin.length === 0) {
    Q.fcall(this._handler.verifyEMQAdmin)
      .then(function(result) {
        var result = new QueueService_verifyEMQAdmin_result({success: result});
        output.writeMessageBegin("verifyEMQAdmin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_verifyEMQAdmin_result(err);
        output.writeMessageBegin("verifyEMQAdmin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyEMQAdmin( function (err, result) {
      var result = new QueueService_verifyEMQAdmin_result((err != null ? err : {success: result}));
      output.writeMessageBegin("verifyEMQAdmin", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_copyQueue = function(seqid, input, output) {
  var args = new QueueService_copyQueue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.copyQueue.length === 1) {
    Q.fcall(this._handler.copyQueue, args.request)
      .then(function(result) {
        var result = new QueueService_copyQueue_result({success: result});
        output.writeMessageBegin("copyQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_copyQueue_result(err);
        output.writeMessageBegin("copyQueue", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.copyQueue(args.request,  function (err, result) {
      var result = new QueueService_copyQueue_result((err != null ? err : {success: result}));
      output.writeMessageBegin("copyQueue", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

QueueServiceProcessor.prototype.process_getQueueMeta = function(seqid, input, output) {
  var args = new QueueService_getQueueMeta_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getQueueMeta.length === 1) {
    Q.fcall(this._handler.getQueueMeta, args.queueName)
      .then(function(result) {
        var result = new QueueService_getQueueMeta_result({success: result});
        output.writeMessageBegin("getQueueMeta", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new QueueService_getQueueMeta_result(err);
        output.writeMessageBegin("getQueueMeta", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getQueueMeta(args.queueName,  function (err, result) {
      var result = new QueueService_getQueueMeta_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getQueueMeta", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

