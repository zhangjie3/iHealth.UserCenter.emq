//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('../thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Common_ttypes = require('./Common_types')
var Queue_ttypes = require('./Queue_types')


var EMQBaseService = require('./EMQBaseService')
var EMQBaseServiceClient = EMQBaseService.Client
var EMQBaseServiceProcessor = EMQBaseService.Processor
var ttypes = require('./Statistics_types');
//HELPER FUNCTIONS AND STRUCTURES

StatisticsService_setUserQuota_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_setUserQuota_args.prototype = {};
StatisticsService_setUserQuota_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.SetUserQuotaRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setUserQuota_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setUserQuota_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_setUserQuota_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_setUserQuota_result.prototype = {};
StatisticsService_setUserQuota_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setUserQuota_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setUserQuota_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserQuota_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_getUserQuota_args.prototype = {};
StatisticsService_getUserQuota_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetUserQuotaRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserQuota_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserQuota_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserQuota_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_getUserQuota_result.prototype = {};
StatisticsService_getUserQuota_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetUserQuotaResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserQuota_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserQuota_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserUsedQuota_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_getUserUsedQuota_args.prototype = {};
StatisticsService_getUserUsedQuota_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetUserUsedQuotaRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserUsedQuota_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserUsedQuota_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserUsedQuota_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_getUserUsedQuota_result.prototype = {};
StatisticsService_getUserUsedQuota_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetUserQuotaResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserUsedQuota_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserUsedQuota_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_setUserInfo_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_setUserInfo_args.prototype = {};
StatisticsService_setUserInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.SetUserInfoRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setUserInfo_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setUserInfo_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_setUserInfo_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_setUserInfo_result.prototype = {};
StatisticsService_setUserInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setUserInfo_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setUserInfo_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserInfo_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_getUserInfo_args.prototype = {};
StatisticsService_getUserInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetUserInfoRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserInfo_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserInfo_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getUserInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_getUserInfo_result.prototype = {};
StatisticsService_getUserInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetUserInfoResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getUserInfo_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getUserInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_addQueueAlertPolicy_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_addQueueAlertPolicy_args.prototype = {};
StatisticsService_addQueueAlertPolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.AddQueueAlertPolicyRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_addQueueAlertPolicy_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_addQueueAlertPolicy_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_addQueueAlertPolicy_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_addQueueAlertPolicy_result.prototype = {};
StatisticsService_addQueueAlertPolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_addQueueAlertPolicy_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_addQueueAlertPolicy_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_deleteQueueAlertPolicy_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_deleteQueueAlertPolicy_args.prototype = {};
StatisticsService_deleteQueueAlertPolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.DeleteQueueAlertPolicyRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_deleteQueueAlertPolicy_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_deleteQueueAlertPolicy_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_deleteQueueAlertPolicy_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_deleteQueueAlertPolicy_result.prototype = {};
StatisticsService_deleteQueueAlertPolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_deleteQueueAlertPolicy_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_deleteQueueAlertPolicy_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_listQueueAlertPolicies_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_listQueueAlertPolicies_args.prototype = {};
StatisticsService_listQueueAlertPolicies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.ListQueueAlertPoliciesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_listQueueAlertPolicies_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_listQueueAlertPolicies_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_listQueueAlertPolicies_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_listQueueAlertPolicies_result.prototype = {};
StatisticsService_listQueueAlertPolicies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ListQueueAlertPoliciesResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_listQueueAlertPolicies_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_listQueueAlertPolicies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_setQueueDailyStatisticsState_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_setQueueDailyStatisticsState_args.prototype = {};
StatisticsService_setQueueDailyStatisticsState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.SetQueueDailyStatisticsStateRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setQueueDailyStatisticsState_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setQueueDailyStatisticsState_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_setQueueDailyStatisticsState_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_setQueueDailyStatisticsState_result.prototype = {};
StatisticsService_setQueueDailyStatisticsState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_setQueueDailyStatisticsState_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_setQueueDailyStatisticsState_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getQueueDailyStatisticsState_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
StatisticsService_getQueueDailyStatisticsState_args.prototype = {};
StatisticsService_getQueueDailyStatisticsState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetQueueDailyStatisticsStateRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getQueueDailyStatisticsState_args.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getQueueDailyStatisticsState_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsService_getQueueDailyStatisticsState_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
StatisticsService_getQueueDailyStatisticsState_result.prototype = {};
StatisticsService_getQueueDailyStatisticsState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetQueueDailyStatisticsStateResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatisticsService_getQueueDailyStatisticsState_result.prototype.write = function(output) {
  output.writeStructBegin('StatisticsService_getQueueDailyStatisticsState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatisticsServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(StatisticsServiceClient, EMQBaseServiceClient);
StatisticsServiceClient.prototype.seqid = function() { return this._seqid; }
StatisticsServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
StatisticsServiceClient.prototype.setUserQuota = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setUserQuota(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setUserQuota(request);
  }
};

StatisticsServiceClient.prototype.send_setUserQuota = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setUserQuota', Thrift.MessageType.CALL, this.seqid());
  var args = new StatisticsService_setUserQuota_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StatisticsServiceClient.prototype.recv_setUserQuota = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StatisticsService_setUserQuota_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
StatisticsServiceClient.prototype.getUserQuota = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserQuota(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserQuota(request);
  }
};

StatisticsServiceClient.prototype.send_getUserQuota = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserQuota', Thrift.MessageType.CALL, this.seqid());
  var args = new StatisticsService_getUserQuota_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StatisticsServiceClient.prototype.recv_getUserQuota = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StatisticsService_getUserQuota_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserQuota failed: unknown result');
};
StatisticsServiceClient.prototype.getUserUsedQuota = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserUsedQuota(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserUsedQuota(request);
  }
};

StatisticsServiceClient.prototype.send_getUserUsedQuota = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserUsedQuota', Thrift.MessageType.CALL, this.seqid());
  var args = new StatisticsService_getUserUsedQuota_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StatisticsServiceClient.prototype.recv_getUserUsedQuota = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StatisticsService_getUserUsedQuota_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserUsedQuota failed: unknown result');
};
StatisticsServiceClient.prototype.setUserInfo = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setUserInfo(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setUserInfo(request);
  }
};

StatisticsServiceClient.prototype.send_setUserInfo = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setUserInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new StatisticsService_setUserInfo_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StatisticsServiceClient.prototype.recv_setUserInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StatisticsService_setUserInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
StatisticsServiceClient.prototype.getUserInfo = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserInfo(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserInfo(request);
  }
};

StatisticsServiceClient.prototype.send_getUserInfo = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new StatisticsService_getUserInfo_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StatisticsServiceClient.prototype.recv_getUserInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StatisticsService_getUserInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserInfo failed: unknown result');
};
StatisticsServiceClient.prototype.addQueueAlertPolicy = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addQueueAlertPolicy(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addQueueAlertPolicy(request);
  }
};

StatisticsServiceClient.prototype.send_addQueueAlertPolicy = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addQueueAlertPolicy', Thrift.MessageType.CALL, this.seqid());
  var args = new StatisticsService_addQueueAlertPolicy_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StatisticsServiceClient.prototype.recv_addQueueAlertPolicy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StatisticsService_addQueueAlertPolicy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
StatisticsServiceClient.prototype.deleteQueueAlertPolicy = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteQueueAlertPolicy(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteQueueAlertPolicy(request);
  }
};

StatisticsServiceClient.prototype.send_deleteQueueAlertPolicy = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteQueueAlertPolicy', Thrift.MessageType.CALL, this.seqid());
  var args = new StatisticsService_deleteQueueAlertPolicy_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StatisticsServiceClient.prototype.recv_deleteQueueAlertPolicy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StatisticsService_deleteQueueAlertPolicy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
StatisticsServiceClient.prototype.listQueueAlertPolicies = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listQueueAlertPolicies(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listQueueAlertPolicies(request);
  }
};

StatisticsServiceClient.prototype.send_listQueueAlertPolicies = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listQueueAlertPolicies', Thrift.MessageType.CALL, this.seqid());
  var args = new StatisticsService_listQueueAlertPolicies_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StatisticsServiceClient.prototype.recv_listQueueAlertPolicies = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StatisticsService_listQueueAlertPolicies_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listQueueAlertPolicies failed: unknown result');
};
StatisticsServiceClient.prototype.setQueueDailyStatisticsState = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setQueueDailyStatisticsState(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setQueueDailyStatisticsState(request);
  }
};

StatisticsServiceClient.prototype.send_setQueueDailyStatisticsState = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setQueueDailyStatisticsState', Thrift.MessageType.CALL, this.seqid());
  var args = new StatisticsService_setQueueDailyStatisticsState_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StatisticsServiceClient.prototype.recv_setQueueDailyStatisticsState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StatisticsService_setQueueDailyStatisticsState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
StatisticsServiceClient.prototype.getQueueDailyStatisticsState = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getQueueDailyStatisticsState(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getQueueDailyStatisticsState(request);
  }
};

StatisticsServiceClient.prototype.send_getQueueDailyStatisticsState = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQueueDailyStatisticsState', Thrift.MessageType.CALL, this.seqid());
  var args = new StatisticsService_getQueueDailyStatisticsState_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StatisticsServiceClient.prototype.recv_getQueueDailyStatisticsState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StatisticsService_getQueueDailyStatisticsState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQueueDailyStatisticsState failed: unknown result');
};
StatisticsServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(StatisticsServiceProcessor, EMQBaseServiceProcessor)
StatisticsServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

StatisticsServiceProcessor.prototype.process_setUserQuota = function(seqid, input, output) {
  var args = new StatisticsService_setUserQuota_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setUserQuota.length === 1) {
    Q.fcall(this._handler.setUserQuota, args.request)
      .then(function(result) {
        var result = new StatisticsService_setUserQuota_result({success: result});
        output.writeMessageBegin("setUserQuota", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StatisticsService_setUserQuota_result(err);
        output.writeMessageBegin("setUserQuota", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setUserQuota(args.request,  function (err, result) {
      var result = new StatisticsService_setUserQuota_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setUserQuota", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StatisticsServiceProcessor.prototype.process_getUserQuota = function(seqid, input, output) {
  var args = new StatisticsService_getUserQuota_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserQuota.length === 1) {
    Q.fcall(this._handler.getUserQuota, args.request)
      .then(function(result) {
        var result = new StatisticsService_getUserQuota_result({success: result});
        output.writeMessageBegin("getUserQuota", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StatisticsService_getUserQuota_result(err);
        output.writeMessageBegin("getUserQuota", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserQuota(args.request,  function (err, result) {
      var result = new StatisticsService_getUserQuota_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserQuota", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StatisticsServiceProcessor.prototype.process_getUserUsedQuota = function(seqid, input, output) {
  var args = new StatisticsService_getUserUsedQuota_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserUsedQuota.length === 1) {
    Q.fcall(this._handler.getUserUsedQuota, args.request)
      .then(function(result) {
        var result = new StatisticsService_getUserUsedQuota_result({success: result});
        output.writeMessageBegin("getUserUsedQuota", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StatisticsService_getUserUsedQuota_result(err);
        output.writeMessageBegin("getUserUsedQuota", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserUsedQuota(args.request,  function (err, result) {
      var result = new StatisticsService_getUserUsedQuota_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserUsedQuota", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StatisticsServiceProcessor.prototype.process_setUserInfo = function(seqid, input, output) {
  var args = new StatisticsService_setUserInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setUserInfo.length === 1) {
    Q.fcall(this._handler.setUserInfo, args.request)
      .then(function(result) {
        var result = new StatisticsService_setUserInfo_result({success: result});
        output.writeMessageBegin("setUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StatisticsService_setUserInfo_result(err);
        output.writeMessageBegin("setUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setUserInfo(args.request,  function (err, result) {
      var result = new StatisticsService_setUserInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setUserInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StatisticsServiceProcessor.prototype.process_getUserInfo = function(seqid, input, output) {
  var args = new StatisticsService_getUserInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserInfo.length === 1) {
    Q.fcall(this._handler.getUserInfo, args.request)
      .then(function(result) {
        var result = new StatisticsService_getUserInfo_result({success: result});
        output.writeMessageBegin("getUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StatisticsService_getUserInfo_result(err);
        output.writeMessageBegin("getUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserInfo(args.request,  function (err, result) {
      var result = new StatisticsService_getUserInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StatisticsServiceProcessor.prototype.process_addQueueAlertPolicy = function(seqid, input, output) {
  var args = new StatisticsService_addQueueAlertPolicy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addQueueAlertPolicy.length === 1) {
    Q.fcall(this._handler.addQueueAlertPolicy, args.request)
      .then(function(result) {
        var result = new StatisticsService_addQueueAlertPolicy_result({success: result});
        output.writeMessageBegin("addQueueAlertPolicy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StatisticsService_addQueueAlertPolicy_result(err);
        output.writeMessageBegin("addQueueAlertPolicy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addQueueAlertPolicy(args.request,  function (err, result) {
      var result = new StatisticsService_addQueueAlertPolicy_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addQueueAlertPolicy", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StatisticsServiceProcessor.prototype.process_deleteQueueAlertPolicy = function(seqid, input, output) {
  var args = new StatisticsService_deleteQueueAlertPolicy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteQueueAlertPolicy.length === 1) {
    Q.fcall(this._handler.deleteQueueAlertPolicy, args.request)
      .then(function(result) {
        var result = new StatisticsService_deleteQueueAlertPolicy_result({success: result});
        output.writeMessageBegin("deleteQueueAlertPolicy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StatisticsService_deleteQueueAlertPolicy_result(err);
        output.writeMessageBegin("deleteQueueAlertPolicy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteQueueAlertPolicy(args.request,  function (err, result) {
      var result = new StatisticsService_deleteQueueAlertPolicy_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteQueueAlertPolicy", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StatisticsServiceProcessor.prototype.process_listQueueAlertPolicies = function(seqid, input, output) {
  var args = new StatisticsService_listQueueAlertPolicies_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listQueueAlertPolicies.length === 1) {
    Q.fcall(this._handler.listQueueAlertPolicies, args.request)
      .then(function(result) {
        var result = new StatisticsService_listQueueAlertPolicies_result({success: result});
        output.writeMessageBegin("listQueueAlertPolicies", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StatisticsService_listQueueAlertPolicies_result(err);
        output.writeMessageBegin("listQueueAlertPolicies", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listQueueAlertPolicies(args.request,  function (err, result) {
      var result = new StatisticsService_listQueueAlertPolicies_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listQueueAlertPolicies", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StatisticsServiceProcessor.prototype.process_setQueueDailyStatisticsState = function(seqid, input, output) {
  var args = new StatisticsService_setQueueDailyStatisticsState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setQueueDailyStatisticsState.length === 1) {
    Q.fcall(this._handler.setQueueDailyStatisticsState, args.request)
      .then(function(result) {
        var result = new StatisticsService_setQueueDailyStatisticsState_result({success: result});
        output.writeMessageBegin("setQueueDailyStatisticsState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StatisticsService_setQueueDailyStatisticsState_result(err);
        output.writeMessageBegin("setQueueDailyStatisticsState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setQueueDailyStatisticsState(args.request,  function (err, result) {
      var result = new StatisticsService_setQueueDailyStatisticsState_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setQueueDailyStatisticsState", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

StatisticsServiceProcessor.prototype.process_getQueueDailyStatisticsState = function(seqid, input, output) {
  var args = new StatisticsService_getQueueDailyStatisticsState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getQueueDailyStatisticsState.length === 1) {
    Q.fcall(this._handler.getQueueDailyStatisticsState, args.request)
      .then(function(result) {
        var result = new StatisticsService_getQueueDailyStatisticsState_result({success: result});
        output.writeMessageBegin("getQueueDailyStatisticsState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new StatisticsService_getQueueDailyStatisticsState_result(err);
        output.writeMessageBegin("getQueueDailyStatisticsState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getQueueDailyStatisticsState(args.request,  function (err, result) {
      var result = new StatisticsService_getQueueDailyStatisticsState_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getQueueDailyStatisticsState", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

