//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('../thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Common_ttypes = require('./Common_types')
var Message_ttypes = require('./Message_types')


var ttypes = module.exports = {};
ttypes.Permission = {
  'NONE' : 0,
  'SEND_MESSAGE' : 1,
  'RECEIVE_MESSAGE' : 2,
  'SEND_RECEIVE_MESSAGE' : 3,
  'HANDLE_MESSAGE' : 4,
  'SEND_HANDLE_MESSAGE' : 5,
  'GET_QUEUE_INFO' : 6,
  'USE_QUEUE' : 7,
  'ADMIN_QUEUE' : 8,
  'FULL_CONTROL' : 9
};
QueueAttribute = module.exports.QueueAttribute = function(args) {
  this.delaySeconds = null;
  this.invisibilitySeconds = null;
  this.receiveMessageWaitSeconds = null;
  this.receiveMessageMaximumNumber = null;
  this.messageRetentionSeconds = null;
  this.messageMaximumBytes = null;
  this.partitionNumber = null;
  this.userAttributes = null;
  if (args) {
    if (args.delaySeconds !== undefined) {
      this.delaySeconds = args.delaySeconds;
    }
    if (args.invisibilitySeconds !== undefined) {
      this.invisibilitySeconds = args.invisibilitySeconds;
    }
    if (args.receiveMessageWaitSeconds !== undefined) {
      this.receiveMessageWaitSeconds = args.receiveMessageWaitSeconds;
    }
    if (args.receiveMessageMaximumNumber !== undefined) {
      this.receiveMessageMaximumNumber = args.receiveMessageMaximumNumber;
    }
    if (args.messageRetentionSeconds !== undefined) {
      this.messageRetentionSeconds = args.messageRetentionSeconds;
    }
    if (args.messageMaximumBytes !== undefined) {
      this.messageMaximumBytes = args.messageMaximumBytes;
    }
    if (args.partitionNumber !== undefined) {
      this.partitionNumber = args.partitionNumber;
    }
    if (args.userAttributes !== undefined) {
      this.userAttributes = args.userAttributes;
    }
  }
};
QueueAttribute.prototype = {};
QueueAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.delaySeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.invisibilitySeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.receiveMessageWaitSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.receiveMessageMaximumNumber = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.messageRetentionSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.messageMaximumBytes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.partitionNumber = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.userAttributes = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.userAttributes[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueAttribute.prototype.write = function(output) {
  output.writeStructBegin('QueueAttribute');
  if (this.delaySeconds !== null && this.delaySeconds !== undefined) {
    output.writeFieldBegin('delaySeconds', Thrift.Type.I32, 1);
    output.writeI32(this.delaySeconds);
    output.writeFieldEnd();
  }
  if (this.invisibilitySeconds !== null && this.invisibilitySeconds !== undefined) {
    output.writeFieldBegin('invisibilitySeconds', Thrift.Type.I32, 2);
    output.writeI32(this.invisibilitySeconds);
    output.writeFieldEnd();
  }
  if (this.receiveMessageWaitSeconds !== null && this.receiveMessageWaitSeconds !== undefined) {
    output.writeFieldBegin('receiveMessageWaitSeconds', Thrift.Type.I32, 3);
    output.writeI32(this.receiveMessageWaitSeconds);
    output.writeFieldEnd();
  }
  if (this.receiveMessageMaximumNumber !== null && this.receiveMessageMaximumNumber !== undefined) {
    output.writeFieldBegin('receiveMessageMaximumNumber', Thrift.Type.I32, 4);
    output.writeI32(this.receiveMessageMaximumNumber);
    output.writeFieldEnd();
  }
  if (this.messageRetentionSeconds !== null && this.messageRetentionSeconds !== undefined) {
    output.writeFieldBegin('messageRetentionSeconds', Thrift.Type.I32, 5);
    output.writeI32(this.messageRetentionSeconds);
    output.writeFieldEnd();
  }
  if (this.messageMaximumBytes !== null && this.messageMaximumBytes !== undefined) {
    output.writeFieldBegin('messageMaximumBytes', Thrift.Type.I32, 6);
    output.writeI32(this.messageMaximumBytes);
    output.writeFieldEnd();
  }
  if (this.partitionNumber !== null && this.partitionNumber !== undefined) {
    output.writeFieldBegin('partitionNumber', Thrift.Type.I32, 7);
    output.writeI32(this.partitionNumber);
    output.writeFieldEnd();
  }
  if (this.userAttributes !== null && this.userAttributes !== undefined) {
    output.writeFieldBegin('userAttributes', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.userAttributes));
    for (var kiter8 in this.userAttributes)
    {
      if (this.userAttributes.hasOwnProperty(kiter8))
      {
        var viter9 = this.userAttributes[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueState = module.exports.QueueState = function(args) {
  this.createTimestamp = null;
  this.lastModifiedTimestamp = null;
  this.approximateMessageNumber = null;
  this.approximateAvailableMessageNumber = null;
  this.approximateInvisibilityMessageNumber = null;
  if (args) {
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field createTimestamp is unset!');
    }
    if (args.lastModifiedTimestamp !== undefined) {
      this.lastModifiedTimestamp = args.lastModifiedTimestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lastModifiedTimestamp is unset!');
    }
    if (args.approximateMessageNumber !== undefined) {
      this.approximateMessageNumber = args.approximateMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateMessageNumber is unset!');
    }
    if (args.approximateAvailableMessageNumber !== undefined) {
      this.approximateAvailableMessageNumber = args.approximateAvailableMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateAvailableMessageNumber is unset!');
    }
    if (args.approximateInvisibilityMessageNumber !== undefined) {
      this.approximateInvisibilityMessageNumber = args.approximateInvisibilityMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateInvisibilityMessageNumber is unset!');
    }
  }
};
QueueState.prototype = {};
QueueState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastModifiedTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.approximateMessageNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.approximateAvailableMessageNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.approximateInvisibilityMessageNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueState.prototype.write = function(output) {
  output.writeStructBegin('QueueState');
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 1);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModifiedTimestamp !== null && this.lastModifiedTimestamp !== undefined) {
    output.writeFieldBegin('lastModifiedTimestamp', Thrift.Type.I64, 2);
    output.writeI64(this.lastModifiedTimestamp);
    output.writeFieldEnd();
  }
  if (this.approximateMessageNumber !== null && this.approximateMessageNumber !== undefined) {
    output.writeFieldBegin('approximateMessageNumber', Thrift.Type.I64, 3);
    output.writeI64(this.approximateMessageNumber);
    output.writeFieldEnd();
  }
  if (this.approximateAvailableMessageNumber !== null && this.approximateAvailableMessageNumber !== undefined) {
    output.writeFieldBegin('approximateAvailableMessageNumber', Thrift.Type.I64, 4);
    output.writeI64(this.approximateAvailableMessageNumber);
    output.writeFieldEnd();
  }
  if (this.approximateInvisibilityMessageNumber !== null && this.approximateInvisibilityMessageNumber !== undefined) {
    output.writeFieldBegin('approximateInvisibilityMessageNumber', Thrift.Type.I64, 5);
    output.writeI64(this.approximateInvisibilityMessageNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Throughput = module.exports.Throughput = function(args) {
  this.readQps = null;
  this.writeQps = null;
  if (args) {
    if (args.readQps !== undefined) {
      this.readQps = args.readQps;
    }
    if (args.writeQps !== undefined) {
      this.writeQps = args.writeQps;
    }
  }
};
Throughput.prototype = {};
Throughput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.readQps = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.writeQps = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Throughput.prototype.write = function(output) {
  output.writeStructBegin('Throughput');
  if (this.readQps !== null && this.readQps !== undefined) {
    output.writeFieldBegin('readQps', Thrift.Type.I64, 1);
    output.writeI64(this.readQps);
    output.writeFieldEnd();
  }
  if (this.writeQps !== null && this.writeQps !== undefined) {
    output.writeFieldBegin('writeQps', Thrift.Type.I64, 2);
    output.writeI64(this.writeQps);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueQuota = module.exports.QueueQuota = function(args) {
  this.throughput = null;
  if (args) {
    if (args.throughput !== undefined) {
      this.throughput = args.throughput;
    }
  }
};
QueueQuota.prototype = {};
QueueQuota.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.throughput = new ttypes.Throughput();
        this.throughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueQuota.prototype.write = function(output) {
  output.writeStructBegin('QueueQuota');
  if (this.throughput !== null && this.throughput !== undefined) {
    output.writeFieldBegin('throughput', Thrift.Type.STRUCT, 2);
    this.throughput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateQueueRequest = module.exports.CreateQueueRequest = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  this.queueQuota = null;
  this.deadLetterQueue = null;
  this.enablePriority = null;
  this.topicQueue = null;
  this.deleteMessageForce = true;
  this.defaultTagName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    }
    if (args.queueQuota !== undefined) {
      this.queueQuota = args.queueQuota;
    }
    if (args.deadLetterQueue !== undefined) {
      this.deadLetterQueue = args.deadLetterQueue;
    }
    if (args.enablePriority !== undefined) {
      this.enablePriority = args.enablePriority;
    }
    if (args.topicQueue !== undefined) {
      this.topicQueue = args.topicQueue;
    }
    if (args.deleteMessageForce !== undefined) {
      this.deleteMessageForce = args.deleteMessageForce;
    }
    if (args.defaultTagName !== undefined) {
      this.defaultTagName = args.defaultTagName;
    }
  }
};
CreateQueueRequest.prototype = {};
CreateQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new ttypes.QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueQuota = new ttypes.QueueQuota();
        this.queueQuota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deadLetterQueue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.enablePriority = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.topicQueue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteMessageForce = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.defaultTagName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateQueueRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.queueQuota !== null && this.queueQuota !== undefined) {
    output.writeFieldBegin('queueQuota', Thrift.Type.STRUCT, 3);
    this.queueQuota.write(output);
    output.writeFieldEnd();
  }
  if (this.deadLetterQueue !== null && this.deadLetterQueue !== undefined) {
    output.writeFieldBegin('deadLetterQueue', Thrift.Type.BOOL, 4);
    output.writeBool(this.deadLetterQueue);
    output.writeFieldEnd();
  }
  if (this.enablePriority !== null && this.enablePriority !== undefined) {
    output.writeFieldBegin('enablePriority', Thrift.Type.BOOL, 5);
    output.writeBool(this.enablePriority);
    output.writeFieldEnd();
  }
  if (this.topicQueue !== null && this.topicQueue !== undefined) {
    output.writeFieldBegin('topicQueue', Thrift.Type.BOOL, 6);
    output.writeBool(this.topicQueue);
    output.writeFieldEnd();
  }
  if (this.deleteMessageForce !== null && this.deleteMessageForce !== undefined) {
    output.writeFieldBegin('deleteMessageForce', Thrift.Type.BOOL, 7);
    output.writeBool(this.deleteMessageForce);
    output.writeFieldEnd();
  }
  if (this.defaultTagName !== null && this.defaultTagName !== undefined) {
    output.writeFieldBegin('defaultTagName', Thrift.Type.STRING, 8);
    output.writeString(this.defaultTagName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateQueueResponse = module.exports.CreateQueueResponse = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  this.queueQuota = null;
  this.deadLetterQueue = null;
  this.enablePriority = null;
  this.topicQueue = null;
  this.deleteMessageForce = null;
  this.defaultTagName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueAttribute is unset!');
    }
    if (args.queueQuota !== undefined) {
      this.queueQuota = args.queueQuota;
    }
    if (args.deadLetterQueue !== undefined) {
      this.deadLetterQueue = args.deadLetterQueue;
    }
    if (args.enablePriority !== undefined) {
      this.enablePriority = args.enablePriority;
    }
    if (args.topicQueue !== undefined) {
      this.topicQueue = args.topicQueue;
    }
    if (args.deleteMessageForce !== undefined) {
      this.deleteMessageForce = args.deleteMessageForce;
    }
    if (args.defaultTagName !== undefined) {
      this.defaultTagName = args.defaultTagName;
    }
  }
};
CreateQueueResponse.prototype = {};
CreateQueueResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new ttypes.QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueQuota = new ttypes.QueueQuota();
        this.queueQuota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deadLetterQueue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.enablePriority = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.topicQueue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteMessageForce = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.defaultTagName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateQueueResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateQueueResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.queueQuota !== null && this.queueQuota !== undefined) {
    output.writeFieldBegin('queueQuota', Thrift.Type.STRUCT, 3);
    this.queueQuota.write(output);
    output.writeFieldEnd();
  }
  if (this.deadLetterQueue !== null && this.deadLetterQueue !== undefined) {
    output.writeFieldBegin('deadLetterQueue', Thrift.Type.BOOL, 4);
    output.writeBool(this.deadLetterQueue);
    output.writeFieldEnd();
  }
  if (this.enablePriority !== null && this.enablePriority !== undefined) {
    output.writeFieldBegin('enablePriority', Thrift.Type.BOOL, 5);
    output.writeBool(this.enablePriority);
    output.writeFieldEnd();
  }
  if (this.topicQueue !== null && this.topicQueue !== undefined) {
    output.writeFieldBegin('topicQueue', Thrift.Type.BOOL, 6);
    output.writeBool(this.topicQueue);
    output.writeFieldEnd();
  }
  if (this.deleteMessageForce !== null && this.deleteMessageForce !== undefined) {
    output.writeFieldBegin('deleteMessageForce', Thrift.Type.BOOL, 7);
    output.writeBool(this.deleteMessageForce);
    output.writeFieldEnd();
  }
  if (this.defaultTagName !== null && this.defaultTagName !== undefined) {
    output.writeFieldBegin('defaultTagName', Thrift.Type.STRING, 8);
    output.writeString(this.defaultTagName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteQueueRequest = module.exports.DeleteQueueRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
DeleteQueueRequest.prototype = {};
DeleteQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteQueueRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PurgeQueueRequest = module.exports.PurgeQueueRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
PurgeQueueRequest.prototype = {};
PurgeQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PurgeQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('PurgeQueueRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueAttributesRequest = module.exports.SetQueueAttributesRequest = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    }
  }
};
SetQueueAttributesRequest.prototype = {};
SetQueueAttributesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new ttypes.QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueAttributesRequest.prototype.write = function(output) {
  output.writeStructBegin('SetQueueAttributesRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueAttributesResponse = module.exports.SetQueueAttributesResponse = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueAttribute is unset!');
    }
  }
};
SetQueueAttributesResponse.prototype = {};
SetQueueAttributesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new ttypes.QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueAttributesResponse.prototype.write = function(output) {
  output.writeStructBegin('SetQueueAttributesResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueQuotaRequest = module.exports.SetQueueQuotaRequest = function(args) {
  this.queueName = null;
  this.queueQuota = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueQuota !== undefined) {
      this.queueQuota = args.queueQuota;
    }
  }
};
SetQueueQuotaRequest.prototype = {};
SetQueueQuotaRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueQuota = new ttypes.QueueQuota();
        this.queueQuota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueQuotaRequest.prototype.write = function(output) {
  output.writeStructBegin('SetQueueQuotaRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueQuota !== null && this.queueQuota !== undefined) {
    output.writeFieldBegin('queueQuota', Thrift.Type.STRUCT, 2);
    this.queueQuota.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueQuotaResponse = module.exports.SetQueueQuotaResponse = function(args) {
  this.queueName = null;
  this.queueQuota = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueQuota !== undefined) {
      this.queueQuota = args.queueQuota;
    }
  }
};
SetQueueQuotaResponse.prototype = {};
SetQueueQuotaResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueQuota = new ttypes.QueueQuota();
        this.queueQuota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueQuotaResponse.prototype.write = function(output) {
  output.writeStructBegin('SetQueueQuotaResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueQuota !== null && this.queueQuota !== undefined) {
    output.writeFieldBegin('queueQuota', Thrift.Type.STRUCT, 2);
    this.queueQuota.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RedrivePolicy = module.exports.RedrivePolicy = function(args) {
  this.dlqName = null;
  this.maxReceiveTime = null;
  if (args) {
    if (args.dlqName !== undefined) {
      this.dlqName = args.dlqName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dlqName is unset!');
    }
    if (args.maxReceiveTime !== undefined) {
      this.maxReceiveTime = args.maxReceiveTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxReceiveTime is unset!');
    }
  }
};
RedrivePolicy.prototype = {};
RedrivePolicy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dlqName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxReceiveTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RedrivePolicy.prototype.write = function(output) {
  output.writeStructBegin('RedrivePolicy');
  if (this.dlqName !== null && this.dlqName !== undefined) {
    output.writeFieldBegin('dlqName', Thrift.Type.STRING, 1);
    output.writeString(this.dlqName);
    output.writeFieldEnd();
  }
  if (this.maxReceiveTime !== null && this.maxReceiveTime !== undefined) {
    output.writeFieldBegin('maxReceiveTime', Thrift.Type.I32, 2);
    output.writeI32(this.maxReceiveTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetQueueInfoRequest = module.exports.GetQueueInfoRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
GetQueueInfoRequest.prototype = {};
GetQueueInfoRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetQueueInfoRequest.prototype.write = function(output) {
  output.writeStructBegin('GetQueueInfoRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetQueueInfoResponse = module.exports.GetQueueInfoResponse = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  this.queueState = null;
  this.queueQuota = null;
  this.isDeadLetterQueue = null;
  this.redrivePolicy = null;
  this.enablePriority = null;
  this.topicQueue = null;
  this.deleteMessageForce = null;
  this.defaultTagName = null;
  this.sourceQueues = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueAttribute is unset!');
    }
    if (args.queueState !== undefined) {
      this.queueState = args.queueState;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueState is unset!');
    }
    if (args.queueQuota !== undefined) {
      this.queueQuota = args.queueQuota;
    }
    if (args.isDeadLetterQueue !== undefined) {
      this.isDeadLetterQueue = args.isDeadLetterQueue;
    }
    if (args.redrivePolicy !== undefined) {
      this.redrivePolicy = args.redrivePolicy;
    }
    if (args.enablePriority !== undefined) {
      this.enablePriority = args.enablePriority;
    }
    if (args.topicQueue !== undefined) {
      this.topicQueue = args.topicQueue;
    }
    if (args.deleteMessageForce !== undefined) {
      this.deleteMessageForce = args.deleteMessageForce;
    }
    if (args.defaultTagName !== undefined) {
      this.defaultTagName = args.defaultTagName;
    }
    if (args.sourceQueues !== undefined) {
      this.sourceQueues = args.sourceQueues;
    }
  }
};
GetQueueInfoResponse.prototype = {};
GetQueueInfoResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new ttypes.QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueState = new ttypes.QueueState();
        this.queueState.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueQuota = new ttypes.QueueQuota();
        this.queueQuota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isDeadLetterQueue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.redrivePolicy = new ttypes.RedrivePolicy();
        this.redrivePolicy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.enablePriority = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.topicQueue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteMessageForce = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.defaultTagName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.sourceQueues = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString();
          this.sourceQueues.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetQueueInfoResponse.prototype.write = function(output) {
  output.writeStructBegin('GetQueueInfoResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.queueState !== null && this.queueState !== undefined) {
    output.writeFieldBegin('queueState', Thrift.Type.STRUCT, 3);
    this.queueState.write(output);
    output.writeFieldEnd();
  }
  if (this.queueQuota !== null && this.queueQuota !== undefined) {
    output.writeFieldBegin('queueQuota', Thrift.Type.STRUCT, 4);
    this.queueQuota.write(output);
    output.writeFieldEnd();
  }
  if (this.isDeadLetterQueue !== null && this.isDeadLetterQueue !== undefined) {
    output.writeFieldBegin('isDeadLetterQueue', Thrift.Type.BOOL, 5);
    output.writeBool(this.isDeadLetterQueue);
    output.writeFieldEnd();
  }
  if (this.redrivePolicy !== null && this.redrivePolicy !== undefined) {
    output.writeFieldBegin('redrivePolicy', Thrift.Type.STRUCT, 6);
    this.redrivePolicy.write(output);
    output.writeFieldEnd();
  }
  if (this.enablePriority !== null && this.enablePriority !== undefined) {
    output.writeFieldBegin('enablePriority', Thrift.Type.BOOL, 7);
    output.writeBool(this.enablePriority);
    output.writeFieldEnd();
  }
  if (this.topicQueue !== null && this.topicQueue !== undefined) {
    output.writeFieldBegin('topicQueue', Thrift.Type.BOOL, 8);
    output.writeBool(this.topicQueue);
    output.writeFieldEnd();
  }
  if (this.deleteMessageForce !== null && this.deleteMessageForce !== undefined) {
    output.writeFieldBegin('deleteMessageForce', Thrift.Type.BOOL, 9);
    output.writeBool(this.deleteMessageForce);
    output.writeFieldEnd();
  }
  if (this.defaultTagName !== null && this.defaultTagName !== undefined) {
    output.writeFieldBegin('defaultTagName', Thrift.Type.STRING, 10);
    output.writeString(this.defaultTagName);
    output.writeFieldEnd();
  }
  if (this.sourceQueues !== null && this.sourceQueues !== undefined) {
    output.writeFieldBegin('sourceQueues', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.sourceQueues.length);
    for (var iter17 in this.sourceQueues)
    {
      if (this.sourceQueues.hasOwnProperty(iter17))
      {
        iter17 = this.sourceQueues[iter17];
        output.writeString(iter17);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueRedrivePolicyRequest = module.exports.SetQueueRedrivePolicyRequest = function(args) {
  this.queueName = null;
  this.redrivePolicy = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.redrivePolicy !== undefined) {
      this.redrivePolicy = args.redrivePolicy;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field redrivePolicy is unset!');
    }
  }
};
SetQueueRedrivePolicyRequest.prototype = {};
SetQueueRedrivePolicyRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.redrivePolicy = new ttypes.RedrivePolicy();
        this.redrivePolicy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueRedrivePolicyRequest.prototype.write = function(output) {
  output.writeStructBegin('SetQueueRedrivePolicyRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.redrivePolicy !== null && this.redrivePolicy !== undefined) {
    output.writeFieldBegin('redrivePolicy', Thrift.Type.STRUCT, 2);
    this.redrivePolicy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetQueueRedrivePolicyResponse = module.exports.SetQueueRedrivePolicyResponse = function(args) {
  this.queueName = null;
  this.redrivePolicy = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.redrivePolicy !== undefined) {
      this.redrivePolicy = args.redrivePolicy;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field redrivePolicy is unset!');
    }
  }
};
SetQueueRedrivePolicyResponse.prototype = {};
SetQueueRedrivePolicyResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.redrivePolicy = new ttypes.RedrivePolicy();
        this.redrivePolicy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetQueueRedrivePolicyResponse.prototype.write = function(output) {
  output.writeStructBegin('SetQueueRedrivePolicyResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.redrivePolicy !== null && this.redrivePolicy !== undefined) {
    output.writeFieldBegin('redrivePolicy', Thrift.Type.STRUCT, 2);
    this.redrivePolicy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RemoveQueueRedrivePolicyRequest = module.exports.RemoveQueueRedrivePolicyRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
RemoveQueueRedrivePolicyRequest.prototype = {};
RemoveQueueRedrivePolicyRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveQueueRedrivePolicyRequest.prototype.write = function(output) {
  output.writeStructBegin('RemoveQueueRedrivePolicyRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListQueueRequest = module.exports.ListQueueRequest = function(args) {
  this.queueNamePrefix = '';
  if (args) {
    if (args.queueNamePrefix !== undefined) {
      this.queueNamePrefix = args.queueNamePrefix;
    }
  }
};
ListQueueRequest.prototype = {};
ListQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueNamePrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('ListQueueRequest');
  if (this.queueNamePrefix !== null && this.queueNamePrefix !== undefined) {
    output.writeFieldBegin('queueNamePrefix', Thrift.Type.STRING, 1);
    output.writeString(this.queueNamePrefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListQueueResponse = module.exports.ListQueueResponse = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
ListQueueResponse.prototype = {};
ListQueueResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.queueName = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readString();
          this.queueName.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListQueueResponse.prototype.write = function(output) {
  output.writeStructBegin('ListQueueResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.queueName.length);
    for (var iter25 in this.queueName)
    {
      if (this.queueName.hasOwnProperty(iter25))
      {
        iter25 = this.queueName[iter25];
        output.writeString(iter25);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPrivilegedQueueRequest = module.exports.QueryPrivilegedQueueRequest = function(args) {
  this.queueNamePrefix = '';
  if (args) {
    if (args.queueNamePrefix !== undefined) {
      this.queueNamePrefix = args.queueNamePrefix;
    }
  }
};
QueryPrivilegedQueueRequest.prototype = {};
QueryPrivilegedQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueNamePrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPrivilegedQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('QueryPrivilegedQueueRequest');
  if (this.queueNamePrefix !== null && this.queueNamePrefix !== undefined) {
    output.writeFieldBegin('queueNamePrefix', Thrift.Type.STRING, 1);
    output.writeString(this.queueNamePrefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPrivilegedQueueResponseEntry = module.exports.QueryPrivilegedQueueResponseEntry = function(args) {
  this.queueName = null;
  this.approximateMessageNumber = null;
  this.approximateAvailableMessageNumber = null;
  this.approximateInvisibilityMessageNumber = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.approximateMessageNumber !== undefined) {
      this.approximateMessageNumber = args.approximateMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateMessageNumber is unset!');
    }
    if (args.approximateAvailableMessageNumber !== undefined) {
      this.approximateAvailableMessageNumber = args.approximateAvailableMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateAvailableMessageNumber is unset!');
    }
    if (args.approximateInvisibilityMessageNumber !== undefined) {
      this.approximateInvisibilityMessageNumber = args.approximateInvisibilityMessageNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field approximateInvisibilityMessageNumber is unset!');
    }
  }
};
QueryPrivilegedQueueResponseEntry.prototype = {};
QueryPrivilegedQueueResponseEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.approximateMessageNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.approximateAvailableMessageNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.approximateInvisibilityMessageNumber = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPrivilegedQueueResponseEntry.prototype.write = function(output) {
  output.writeStructBegin('QueryPrivilegedQueueResponseEntry');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.approximateMessageNumber !== null && this.approximateMessageNumber !== undefined) {
    output.writeFieldBegin('approximateMessageNumber', Thrift.Type.I64, 2);
    output.writeI64(this.approximateMessageNumber);
    output.writeFieldEnd();
  }
  if (this.approximateAvailableMessageNumber !== null && this.approximateAvailableMessageNumber !== undefined) {
    output.writeFieldBegin('approximateAvailableMessageNumber', Thrift.Type.I64, 3);
    output.writeI64(this.approximateAvailableMessageNumber);
    output.writeFieldEnd();
  }
  if (this.approximateInvisibilityMessageNumber !== null && this.approximateInvisibilityMessageNumber !== undefined) {
    output.writeFieldBegin('approximateInvisibilityMessageNumber', Thrift.Type.I64, 4);
    output.writeI64(this.approximateInvisibilityMessageNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPrivilegedQueueResponse = module.exports.QueryPrivilegedQueueResponse = function(args) {
  this.queueList = null;
  if (args) {
    if (args.queueList !== undefined) {
      this.queueList = args.queueList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueList is unset!');
    }
  }
};
QueryPrivilegedQueueResponse.prototype = {};
QueryPrivilegedQueueResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.queueList = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = new ttypes.QueryPrivilegedQueueResponseEntry();
          elem32.read(input);
          this.queueList.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPrivilegedQueueResponse.prototype.write = function(output) {
  output.writeStructBegin('QueryPrivilegedQueueResponse');
  if (this.queueList !== null && this.queueList !== undefined) {
    output.writeFieldBegin('queueList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.queueList.length);
    for (var iter33 in this.queueList)
    {
      if (this.queueList.hasOwnProperty(iter33))
      {
        iter33 = this.queueList[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetPermissionRequest = module.exports.SetPermissionRequest = function(args) {
  this.queueName = null;
  this.developerId = null;
  this.permission = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field developerId is unset!');
    }
    if (args.permission !== undefined) {
      this.permission = args.permission;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field permission is unset!');
    }
  }
};
SetPermissionRequest.prototype = {};
SetPermissionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetPermissionRequest.prototype.write = function(output) {
  output.writeStructBegin('SetPermissionRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 3);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RevokePermissionRequest = module.exports.RevokePermissionRequest = function(args) {
  this.queueName = null;
  this.developerId = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field developerId is unset!');
    }
  }
};
RevokePermissionRequest.prototype = {};
RevokePermissionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RevokePermissionRequest.prototype.write = function(output) {
  output.writeStructBegin('RevokePermissionRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionRequest = module.exports.QueryPermissionRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
QueryPermissionRequest.prototype = {};
QueryPermissionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionRequest.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionResponse = module.exports.QueryPermissionResponse = function(args) {
  this.permission = null;
  if (args) {
    if (args.permission !== undefined) {
      this.permission = args.permission;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field permission is unset!');
    }
  }
};
QueryPermissionResponse.prototype = {};
QueryPermissionResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionResponse.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionResponse');
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 1);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionForIdRequest = module.exports.QueryPermissionForIdRequest = function(args) {
  this.queueName = null;
  this.developerId = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field developerId is unset!');
    }
  }
};
QueryPermissionForIdRequest.prototype = {};
QueryPermissionForIdRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionForIdRequest.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionForIdRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryPermissionForIdResponse = module.exports.QueryPermissionForIdResponse = function(args) {
  this.permission = null;
  if (args) {
    if (args.permission !== undefined) {
      this.permission = args.permission;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field permission is unset!');
    }
  }
};
QueryPermissionForIdResponse.prototype = {};
QueryPermissionForIdResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryPermissionForIdResponse.prototype.write = function(output) {
  output.writeStructBegin('QueryPermissionForIdResponse');
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 1);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListPermissionsRequest = module.exports.ListPermissionsRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
ListPermissionsRequest.prototype = {};
ListPermissionsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListPermissionsRequest.prototype.write = function(output) {
  output.writeStructBegin('ListPermissionsRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListPermissionsResponse = module.exports.ListPermissionsResponse = function(args) {
  this.permissionList = null;
  if (args) {
    if (args.permissionList !== undefined) {
      this.permissionList = args.permissionList;
    }
  }
};
ListPermissionsResponse.prototype = {};
ListPermissionsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size34 = 0;
        var _rtmp338;
        this.permissionList = {};
        var _ktype35 = 0;
        var _vtype36 = 0;
        _rtmp338 = input.readMapBegin();
        _ktype35 = _rtmp338.ktype;
        _vtype36 = _rtmp338.vtype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var key40 = null;
          var val41 = null;
          key40 = input.readString();
          val41 = input.readI32();
          this.permissionList[key40] = val41;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListPermissionsResponse.prototype.write = function(output) {
  output.writeStructBegin('ListPermissionsResponse');
  if (this.permissionList !== null && this.permissionList !== undefined) {
    output.writeFieldBegin('permissionList', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.permissionList));
    for (var kiter42 in this.permissionList)
    {
      if (this.permissionList.hasOwnProperty(kiter42))
      {
        var viter43 = this.permissionList[kiter42];
        output.writeString(kiter42);
        output.writeI32(viter43);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateTagRequest = module.exports.CreateTagRequest = function(args) {
  this.queueName = null;
  this.tagName = null;
  this.startTimestamp = null;
  this.readQPSQuota = null;
  this.attributeName = null;
  this.attributeValue = null;
  this.userAttributes = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagName is unset!');
    }
    if (args.startTimestamp !== undefined) {
      this.startTimestamp = args.startTimestamp;
    }
    if (args.readQPSQuota !== undefined) {
      this.readQPSQuota = args.readQPSQuota;
    }
    if (args.attributeName !== undefined) {
      this.attributeName = args.attributeName;
    }
    if (args.attributeValue !== undefined) {
      this.attributeValue = args.attributeValue;
    }
    if (args.userAttributes !== undefined) {
      this.userAttributes = args.userAttributes;
    }
  }
};
CreateTagRequest.prototype = {};
CreateTagRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.readQPSQuota = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.attributeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributeValue = new Message_ttypes.MessageAttribute();
        this.attributeValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size44 = 0;
        var _rtmp348;
        this.userAttributes = {};
        var _ktype45 = 0;
        var _vtype46 = 0;
        _rtmp348 = input.readMapBegin();
        _ktype45 = _rtmp348.ktype;
        _vtype46 = _rtmp348.vtype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var key50 = null;
          var val51 = null;
          key50 = input.readString();
          val51 = input.readString();
          this.userAttributes[key50] = val51;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateTagRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateTagRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  if (this.startTimestamp !== null && this.startTimestamp !== undefined) {
    output.writeFieldBegin('startTimestamp', Thrift.Type.I64, 3);
    output.writeI64(this.startTimestamp);
    output.writeFieldEnd();
  }
  if (this.readQPSQuota !== null && this.readQPSQuota !== undefined) {
    output.writeFieldBegin('readQPSQuota', Thrift.Type.I64, 4);
    output.writeI64(this.readQPSQuota);
    output.writeFieldEnd();
  }
  if (this.attributeName !== null && this.attributeName !== undefined) {
    output.writeFieldBegin('attributeName', Thrift.Type.STRING, 5);
    output.writeString(this.attributeName);
    output.writeFieldEnd();
  }
  if (this.attributeValue !== null && this.attributeValue !== undefined) {
    output.writeFieldBegin('attributeValue', Thrift.Type.STRUCT, 6);
    this.attributeValue.write(output);
    output.writeFieldEnd();
  }
  if (this.userAttributes !== null && this.userAttributes !== undefined) {
    output.writeFieldBegin('userAttributes', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.userAttributes));
    for (var kiter52 in this.userAttributes)
    {
      if (this.userAttributes.hasOwnProperty(kiter52))
      {
        var viter53 = this.userAttributes[kiter52];
        output.writeString(kiter52);
        output.writeString(viter53);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateTagResponse = module.exports.CreateTagResponse = function(args) {
  this.queueName = null;
  this.tagName = null;
  this.startTimestamp = null;
  this.readQPSQuota = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagName is unset!');
    }
    if (args.startTimestamp !== undefined) {
      this.startTimestamp = args.startTimestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startTimestamp is unset!');
    }
    if (args.readQPSQuota !== undefined) {
      this.readQPSQuota = args.readQPSQuota;
    }
  }
};
CreateTagResponse.prototype = {};
CreateTagResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.readQPSQuota = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateTagResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateTagResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  if (this.startTimestamp !== null && this.startTimestamp !== undefined) {
    output.writeFieldBegin('startTimestamp', Thrift.Type.I64, 3);
    output.writeI64(this.startTimestamp);
    output.writeFieldEnd();
  }
  if (this.readQPSQuota !== null && this.readQPSQuota !== undefined) {
    output.writeFieldBegin('readQPSQuota', Thrift.Type.I64, 4);
    output.writeI64(this.readQPSQuota);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteTagRequest = module.exports.DeleteTagRequest = function(args) {
  this.queueName = null;
  this.tagName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagName is unset!');
    }
  }
};
DeleteTagRequest.prototype = {};
DeleteTagRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteTagRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteTagRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetTagInfoRequest = module.exports.GetTagInfoRequest = function(args) {
  this.queueName = null;
  this.tagName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    }
  }
};
GetTagInfoRequest.prototype = {};
GetTagInfoRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTagInfoRequest.prototype.write = function(output) {
  output.writeStructBegin('GetTagInfoRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetTagInfoResponse = module.exports.GetTagInfoResponse = function(args) {
  this.queueName = null;
  this.tagName = null;
  this.tagState = null;
  this.startTimestamp = null;
  this.readQPSQuota = null;
  this.attributeName = null;
  this.attributeValue = null;
  this.userAttributes = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    }
    if (args.tagState !== undefined) {
      this.tagState = args.tagState;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagState is unset!');
    }
    if (args.startTimestamp !== undefined) {
      this.startTimestamp = args.startTimestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startTimestamp is unset!');
    }
    if (args.readQPSQuota !== undefined) {
      this.readQPSQuota = args.readQPSQuota;
    }
    if (args.attributeName !== undefined) {
      this.attributeName = args.attributeName;
    }
    if (args.attributeValue !== undefined) {
      this.attributeValue = args.attributeValue;
    }
    if (args.userAttributes !== undefined) {
      this.userAttributes = args.userAttributes;
    }
  }
};
GetTagInfoResponse.prototype = {};
GetTagInfoResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tagState = new ttypes.QueueState();
        this.tagState.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.startTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.readQPSQuota = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.attributeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributeValue = new Message_ttypes.MessageAttribute();
        this.attributeValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size54 = 0;
        var _rtmp358;
        this.userAttributes = {};
        var _ktype55 = 0;
        var _vtype56 = 0;
        _rtmp358 = input.readMapBegin();
        _ktype55 = _rtmp358.ktype;
        _vtype56 = _rtmp358.vtype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var key60 = null;
          var val61 = null;
          key60 = input.readString();
          val61 = input.readString();
          this.userAttributes[key60] = val61;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTagInfoResponse.prototype.write = function(output) {
  output.writeStructBegin('GetTagInfoResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  if (this.tagState !== null && this.tagState !== undefined) {
    output.writeFieldBegin('tagState', Thrift.Type.STRUCT, 3);
    this.tagState.write(output);
    output.writeFieldEnd();
  }
  if (this.startTimestamp !== null && this.startTimestamp !== undefined) {
    output.writeFieldBegin('startTimestamp', Thrift.Type.I64, 4);
    output.writeI64(this.startTimestamp);
    output.writeFieldEnd();
  }
  if (this.readQPSQuota !== null && this.readQPSQuota !== undefined) {
    output.writeFieldBegin('readQPSQuota', Thrift.Type.I64, 5);
    output.writeI64(this.readQPSQuota);
    output.writeFieldEnd();
  }
  if (this.attributeName !== null && this.attributeName !== undefined) {
    output.writeFieldBegin('attributeName', Thrift.Type.STRING, 6);
    output.writeString(this.attributeName);
    output.writeFieldEnd();
  }
  if (this.attributeValue !== null && this.attributeValue !== undefined) {
    output.writeFieldBegin('attributeValue', Thrift.Type.STRUCT, 7);
    this.attributeValue.write(output);
    output.writeFieldEnd();
  }
  if (this.userAttributes !== null && this.userAttributes !== undefined) {
    output.writeFieldBegin('userAttributes', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.userAttributes));
    for (var kiter62 in this.userAttributes)
    {
      if (this.userAttributes.hasOwnProperty(kiter62))
      {
        var viter63 = this.userAttributes[kiter62];
        output.writeString(kiter62);
        output.writeString(viter63);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListTagRequest = module.exports.ListTagRequest = function(args) {
  this.queueName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
  }
};
ListTagRequest.prototype = {};
ListTagRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListTagRequest.prototype.write = function(output) {
  output.writeStructBegin('ListTagRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ListTagResponse = module.exports.ListTagResponse = function(args) {
  this.queueName = null;
  this.tagName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagName is unset!');
    }
  }
};
ListTagResponse.prototype = {};
ListTagResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.tagName = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.tagName.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListTagResponse.prototype.write = function(output) {
  output.writeStructBegin('ListTagResponse');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tagName.length);
    for (var iter71 in this.tagName)
    {
      if (this.tagName.hasOwnProperty(iter71))
      {
        iter71 = this.tagName[iter71];
        output.writeString(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryMetricRequest = module.exports.QueryMetricRequest = function(args) {
  this.queueName = null;
  this.startTime = null;
  this.endTime = null;
  this.metrics = null;
  this.tags = null;
  this.aggregator = null;
  this.downsampleAggregator = null;
  this.downsampleInterval = null;
  this.downsampleTimeUnit = null;
  this.calRate = null;
  this.tagName = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.metrics !== undefined) {
      this.metrics = args.metrics;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.aggregator !== undefined) {
      this.aggregator = args.aggregator;
    }
    if (args.downsampleAggregator !== undefined) {
      this.downsampleAggregator = args.downsampleAggregator;
    }
    if (args.downsampleInterval !== undefined) {
      this.downsampleInterval = args.downsampleInterval;
    }
    if (args.downsampleTimeUnit !== undefined) {
      this.downsampleTimeUnit = args.downsampleTimeUnit;
    }
    if (args.calRate !== undefined) {
      this.calRate = args.calRate;
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    }
  }
};
QueryMetricRequest.prototype = {};
QueryMetricRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.metrics = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size72 = 0;
        var _rtmp376;
        this.tags = {};
        var _ktype73 = 0;
        var _vtype74 = 0;
        _rtmp376 = input.readMapBegin();
        _ktype73 = _rtmp376.ktype;
        _vtype74 = _rtmp376.vtype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var key78 = null;
          var val79 = null;
          key78 = input.readString();
          val79 = input.readString();
          this.tags[key78] = val79;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.aggregator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.downsampleAggregator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.downsampleInterval = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.downsampleTimeUnit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.calRate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryMetricRequest.prototype.write = function(output) {
  output.writeStructBegin('QueryMetricRequest');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 2);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 3);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.metrics !== null && this.metrics !== undefined) {
    output.writeFieldBegin('metrics', Thrift.Type.STRING, 4);
    output.writeString(this.metrics);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.tags));
    for (var kiter80 in this.tags)
    {
      if (this.tags.hasOwnProperty(kiter80))
      {
        var viter81 = this.tags[kiter80];
        output.writeString(kiter80);
        output.writeString(viter81);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.aggregator !== null && this.aggregator !== undefined) {
    output.writeFieldBegin('aggregator', Thrift.Type.STRING, 6);
    output.writeString(this.aggregator);
    output.writeFieldEnd();
  }
  if (this.downsampleAggregator !== null && this.downsampleAggregator !== undefined) {
    output.writeFieldBegin('downsampleAggregator', Thrift.Type.STRING, 7);
    output.writeString(this.downsampleAggregator);
    output.writeFieldEnd();
  }
  if (this.downsampleInterval !== null && this.downsampleInterval !== undefined) {
    output.writeFieldBegin('downsampleInterval', Thrift.Type.I32, 8);
    output.writeI32(this.downsampleInterval);
    output.writeFieldEnd();
  }
  if (this.downsampleTimeUnit !== null && this.downsampleTimeUnit !== undefined) {
    output.writeFieldBegin('downsampleTimeUnit', Thrift.Type.STRING, 9);
    output.writeString(this.downsampleTimeUnit);
    output.writeFieldEnd();
  }
  if (this.calRate !== null && this.calRate !== undefined) {
    output.writeFieldBegin('calRate', Thrift.Type.BOOL, 10);
    output.writeBool(this.calRate);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 11);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeSeriesData = module.exports.TimeSeriesData = function(args) {
  this.metric = null;
  this.tags = null;
  this.data = null;
  if (args) {
    if (args.metric !== undefined) {
      this.metric = args.metric;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TimeSeriesData.prototype = {};
TimeSeriesData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.metric = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size82 = 0;
        var _rtmp386;
        this.tags = {};
        var _ktype83 = 0;
        var _vtype84 = 0;
        _rtmp386 = input.readMapBegin();
        _ktype83 = _rtmp386.ktype;
        _vtype84 = _rtmp386.vtype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var key88 = null;
          var val89 = null;
          key88 = input.readString();
          val89 = input.readString();
          this.tags[key88] = val89;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size90 = 0;
        var _rtmp394;
        this.data = {};
        var _ktype91 = 0;
        var _vtype92 = 0;
        _rtmp394 = input.readMapBegin();
        _ktype91 = _rtmp394.ktype;
        _vtype92 = _rtmp394.vtype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var key96 = null;
          var val97 = null;
          key96 = input.readI64();
          val97 = input.readDouble();
          this.data[key96] = val97;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeSeriesData.prototype.write = function(output) {
  output.writeStructBegin('TimeSeriesData');
  if (this.metric !== null && this.metric !== undefined) {
    output.writeFieldBegin('metric', Thrift.Type.STRING, 1);
    output.writeString(this.metric);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.tags));
    for (var kiter98 in this.tags)
    {
      if (this.tags.hasOwnProperty(kiter98))
      {
        var viter99 = this.tags[kiter98];
        output.writeString(kiter98);
        output.writeString(viter99);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.DOUBLE, Thrift.objectLength(this.data));
    for (var kiter100 in this.data)
    {
      if (this.data.hasOwnProperty(kiter100))
      {
        var viter101 = this.data[kiter100];
        output.writeI64(kiter100);
        output.writeDouble(viter101);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VerifyEMQAdminResponse = module.exports.VerifyEMQAdminResponse = function(args) {
  this.prefix = null;
  if (args) {
    if (args.prefix !== undefined) {
      this.prefix = args.prefix;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field prefix is unset!');
    }
  }
};
VerifyEMQAdminResponse.prototype = {};
VerifyEMQAdminResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.prefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VerifyEMQAdminResponse.prototype.write = function(output) {
  output.writeStructBegin('VerifyEMQAdminResponse');
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.STRING, 1);
    output.writeString(this.prefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueTag = module.exports.QueueTag = function(args) {
  this.queueName = null;
  this.tagName = null;
  this.tagId = null;
  this.startTimestamp = null;
  this.createTimestamp = null;
  this.attributeName = null;
  this.attributeValue = null;
  this.userAttributes = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.tagName !== undefined) {
      this.tagName = args.tagName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagName is unset!');
    }
    if (args.tagId !== undefined) {
      this.tagId = args.tagId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tagId is unset!');
    }
    if (args.startTimestamp !== undefined) {
      this.startTimestamp = args.startTimestamp;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.attributeName !== undefined) {
      this.attributeName = args.attributeName;
    }
    if (args.attributeValue !== undefined) {
      this.attributeValue = args.attributeValue;
    }
    if (args.userAttributes !== undefined) {
      this.userAttributes = args.userAttributes;
    }
  }
};
QueueTag.prototype = {};
QueueTag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tagName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tagId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.startTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.attributeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributeValue = new Message_ttypes.MessageAttribute();
        this.attributeValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size102 = 0;
        var _rtmp3106;
        this.userAttributes = {};
        var _ktype103 = 0;
        var _vtype104 = 0;
        _rtmp3106 = input.readMapBegin();
        _ktype103 = _rtmp3106.ktype;
        _vtype104 = _rtmp3106.vtype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var key108 = null;
          var val109 = null;
          key108 = input.readString();
          val109 = input.readString();
          this.userAttributes[key108] = val109;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueTag.prototype.write = function(output) {
  output.writeStructBegin('QueueTag');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.tagName !== null && this.tagName !== undefined) {
    output.writeFieldBegin('tagName', Thrift.Type.STRING, 2);
    output.writeString(this.tagName);
    output.writeFieldEnd();
  }
  if (this.tagId !== null && this.tagId !== undefined) {
    output.writeFieldBegin('tagId', Thrift.Type.I32, 3);
    output.writeI32(this.tagId);
    output.writeFieldEnd();
  }
  if (this.startTimestamp !== null && this.startTimestamp !== undefined) {
    output.writeFieldBegin('startTimestamp', Thrift.Type.I64, 4);
    output.writeI64(this.startTimestamp);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 5);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.attributeName !== null && this.attributeName !== undefined) {
    output.writeFieldBegin('attributeName', Thrift.Type.STRING, 6);
    output.writeString(this.attributeName);
    output.writeFieldEnd();
  }
  if (this.attributeValue !== null && this.attributeValue !== undefined) {
    output.writeFieldBegin('attributeValue', Thrift.Type.STRUCT, 7);
    this.attributeValue.write(output);
    output.writeFieldEnd();
  }
  if (this.userAttributes !== null && this.userAttributes !== undefined) {
    output.writeFieldBegin('userAttributes', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.userAttributes));
    for (var kiter110 in this.userAttributes)
    {
      if (this.userAttributes.hasOwnProperty(kiter110))
      {
        var viter111 = this.userAttributes[kiter110];
        output.writeString(kiter110);
        output.writeString(viter111);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueueMeta = module.exports.QueueMeta = function(args) {
  this.queueName = null;
  this.queueAttribute = null;
  this.queueQuota = null;
  this.enablePriority = null;
  this.topicQueue = null;
  this.deleteMessageForce = true;
  this.defaultTagName = null;
  this.permissionList = null;
  this.redrivePolicy = null;
  this.sourceQueues = null;
  this.createTimestamp = null;
  this.lastModifiedTimestamp = null;
  this.queueTagMap = null;
  if (args) {
    if (args.queueName !== undefined) {
      this.queueName = args.queueName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueName is unset!');
    }
    if (args.queueAttribute !== undefined) {
      this.queueAttribute = args.queueAttribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueAttribute is unset!');
    }
    if (args.queueQuota !== undefined) {
      this.queueQuota = args.queueQuota;
    }
    if (args.enablePriority !== undefined) {
      this.enablePriority = args.enablePriority;
    }
    if (args.topicQueue !== undefined) {
      this.topicQueue = args.topicQueue;
    }
    if (args.deleteMessageForce !== undefined) {
      this.deleteMessageForce = args.deleteMessageForce;
    }
    if (args.defaultTagName !== undefined) {
      this.defaultTagName = args.defaultTagName;
    }
    if (args.permissionList !== undefined) {
      this.permissionList = args.permissionList;
    }
    if (args.redrivePolicy !== undefined) {
      this.redrivePolicy = args.redrivePolicy;
    }
    if (args.sourceQueues !== undefined) {
      this.sourceQueues = args.sourceQueues;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModifiedTimestamp !== undefined) {
      this.lastModifiedTimestamp = args.lastModifiedTimestamp;
    }
    if (args.queueTagMap !== undefined) {
      this.queueTagMap = args.queueTagMap;
    }
  }
};
QueueMeta.prototype = {};
QueueMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queueName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueAttribute = new ttypes.QueueAttribute();
        this.queueAttribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueQuota = new ttypes.QueueQuota();
        this.queueQuota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.enablePriority = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.topicQueue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteMessageForce = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.defaultTagName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size112 = 0;
        var _rtmp3116;
        this.permissionList = {};
        var _ktype113 = 0;
        var _vtype114 = 0;
        _rtmp3116 = input.readMapBegin();
        _ktype113 = _rtmp3116.ktype;
        _vtype114 = _rtmp3116.vtype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var key118 = null;
          var val119 = null;
          key118 = input.readString();
          val119 = input.readI32();
          this.permissionList[key118] = val119;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.redrivePolicy = new ttypes.RedrivePolicy();
        this.redrivePolicy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.sourceQueues = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = input.readString();
          this.sourceQueues.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.lastModifiedTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.MAP) {
        var _size127 = 0;
        var _rtmp3131;
        this.queueTagMap = {};
        var _ktype128 = 0;
        var _vtype129 = 0;
        _rtmp3131 = input.readMapBegin();
        _ktype128 = _rtmp3131.ktype;
        _vtype129 = _rtmp3131.vtype;
        _size127 = _rtmp3131.size;
        for (var _i132 = 0; _i132 < _size127; ++_i132)
        {
          var key133 = null;
          var val134 = null;
          key133 = input.readString();
          val134 = new ttypes.QueueTag();
          val134.read(input);
          this.queueTagMap[key133] = val134;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueMeta.prototype.write = function(output) {
  output.writeStructBegin('QueueMeta');
  if (this.queueName !== null && this.queueName !== undefined) {
    output.writeFieldBegin('queueName', Thrift.Type.STRING, 1);
    output.writeString(this.queueName);
    output.writeFieldEnd();
  }
  if (this.queueAttribute !== null && this.queueAttribute !== undefined) {
    output.writeFieldBegin('queueAttribute', Thrift.Type.STRUCT, 2);
    this.queueAttribute.write(output);
    output.writeFieldEnd();
  }
  if (this.queueQuota !== null && this.queueQuota !== undefined) {
    output.writeFieldBegin('queueQuota', Thrift.Type.STRUCT, 3);
    this.queueQuota.write(output);
    output.writeFieldEnd();
  }
  if (this.enablePriority !== null && this.enablePriority !== undefined) {
    output.writeFieldBegin('enablePriority', Thrift.Type.BOOL, 4);
    output.writeBool(this.enablePriority);
    output.writeFieldEnd();
  }
  if (this.topicQueue !== null && this.topicQueue !== undefined) {
    output.writeFieldBegin('topicQueue', Thrift.Type.BOOL, 5);
    output.writeBool(this.topicQueue);
    output.writeFieldEnd();
  }
  if (this.deleteMessageForce !== null && this.deleteMessageForce !== undefined) {
    output.writeFieldBegin('deleteMessageForce', Thrift.Type.BOOL, 6);
    output.writeBool(this.deleteMessageForce);
    output.writeFieldEnd();
  }
  if (this.defaultTagName !== null && this.defaultTagName !== undefined) {
    output.writeFieldBegin('defaultTagName', Thrift.Type.STRING, 7);
    output.writeString(this.defaultTagName);
    output.writeFieldEnd();
  }
  if (this.permissionList !== null && this.permissionList !== undefined) {
    output.writeFieldBegin('permissionList', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.permissionList));
    for (var kiter135 in this.permissionList)
    {
      if (this.permissionList.hasOwnProperty(kiter135))
      {
        var viter136 = this.permissionList[kiter135];
        output.writeString(kiter135);
        output.writeI32(viter136);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.redrivePolicy !== null && this.redrivePolicy !== undefined) {
    output.writeFieldBegin('redrivePolicy', Thrift.Type.STRUCT, 9);
    this.redrivePolicy.write(output);
    output.writeFieldEnd();
  }
  if (this.sourceQueues !== null && this.sourceQueues !== undefined) {
    output.writeFieldBegin('sourceQueues', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.sourceQueues.length);
    for (var iter137 in this.sourceQueues)
    {
      if (this.sourceQueues.hasOwnProperty(iter137))
      {
        iter137 = this.sourceQueues[iter137];
        output.writeString(iter137);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 11);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModifiedTimestamp !== null && this.lastModifiedTimestamp !== undefined) {
    output.writeFieldBegin('lastModifiedTimestamp', Thrift.Type.I64, 12);
    output.writeI64(this.lastModifiedTimestamp);
    output.writeFieldEnd();
  }
  if (this.queueTagMap !== null && this.queueTagMap !== undefined) {
    output.writeFieldBegin('queueTagMap', Thrift.Type.MAP, 13);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.queueTagMap));
    for (var kiter138 in this.queueTagMap)
    {
      if (this.queueTagMap.hasOwnProperty(kiter138))
      {
        var viter139 = this.queueTagMap[kiter138];
        output.writeString(kiter138);
        viter139.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetQueueMetaResponse = module.exports.GetQueueMetaResponse = function(args) {
  this.queueMeta = null;
  if (args) {
    if (args.queueMeta !== undefined) {
      this.queueMeta = args.queueMeta;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueMeta is unset!');
    }
  }
};
GetQueueMetaResponse.prototype = {};
GetQueueMetaResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueMeta = new ttypes.QueueMeta();
        this.queueMeta.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetQueueMetaResponse.prototype.write = function(output) {
  output.writeStructBegin('GetQueueMetaResponse');
  if (this.queueMeta !== null && this.queueMeta !== undefined) {
    output.writeFieldBegin('queueMeta', Thrift.Type.STRUCT, 1);
    this.queueMeta.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CopyQueueRequest = module.exports.CopyQueueRequest = function(args) {
  this.queueMeta = null;
  if (args) {
    if (args.queueMeta !== undefined) {
      this.queueMeta = args.queueMeta;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queueMeta is unset!');
    }
  }
};
CopyQueueRequest.prototype = {};
CopyQueueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.queueMeta = new ttypes.QueueMeta();
        this.queueMeta.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CopyQueueRequest.prototype.write = function(output) {
  output.writeStructBegin('CopyQueueRequest');
  if (this.queueMeta !== null && this.queueMeta !== undefined) {
    output.writeFieldBegin('queueMeta', Thrift.Type.STRUCT, 1);
    this.queueMeta.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

