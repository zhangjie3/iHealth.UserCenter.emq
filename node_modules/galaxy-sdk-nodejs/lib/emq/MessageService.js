//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('../thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Common_ttypes = require('./Common_types')


var EMQBaseService = require('./EMQBaseService')
var EMQBaseServiceClient = EMQBaseService.Client
var EMQBaseServiceProcessor = EMQBaseService.Processor
var ttypes = require('./Message_types');
//HELPER FUNCTIONS AND STRUCTURES

MessageService_sendMessage_args = function(args) {
  this.sendMessageRequest = null;
  if (args) {
    if (args.sendMessageRequest !== undefined) {
      this.sendMessageRequest = args.sendMessageRequest;
    }
  }
};
MessageService_sendMessage_args.prototype = {};
MessageService_sendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sendMessageRequest = new ttypes.SendMessageRequest();
        this.sendMessageRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessage_args');
  if (this.sendMessageRequest !== null && this.sendMessageRequest !== undefined) {
    output.writeFieldBegin('sendMessageRequest', Thrift.Type.STRUCT, 1);
    this.sendMessageRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_sendMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_sendMessage_result.prototype = {};
MessageService_sendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SendMessageResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_sendMessageBatch_args = function(args) {
  this.sendMessageBatchRequest = null;
  if (args) {
    if (args.sendMessageBatchRequest !== undefined) {
      this.sendMessageBatchRequest = args.sendMessageBatchRequest;
    }
  }
};
MessageService_sendMessageBatch_args.prototype = {};
MessageService_sendMessageBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sendMessageBatchRequest = new ttypes.SendMessageBatchRequest();
        this.sendMessageBatchRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessageBatch_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessageBatch_args');
  if (this.sendMessageBatchRequest !== null && this.sendMessageBatchRequest !== undefined) {
    output.writeFieldBegin('sendMessageBatchRequest', Thrift.Type.STRUCT, 1);
    this.sendMessageBatchRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_sendMessageBatch_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_sendMessageBatch_result.prototype = {};
MessageService_sendMessageBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SendMessageBatchResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessageBatch_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessageBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_receiveMessage_args = function(args) {
  this.receiveMessageRequest = null;
  if (args) {
    if (args.receiveMessageRequest !== undefined) {
      this.receiveMessageRequest = args.receiveMessageRequest;
    }
  }
};
MessageService_receiveMessage_args.prototype = {};
MessageService_receiveMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.receiveMessageRequest = new ttypes.ReceiveMessageRequest();
        this.receiveMessageRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_receiveMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_receiveMessage_args');
  if (this.receiveMessageRequest !== null && this.receiveMessageRequest !== undefined) {
    output.writeFieldBegin('receiveMessageRequest', Thrift.Type.STRUCT, 1);
    this.receiveMessageRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_receiveMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_receiveMessage_result.prototype = {};
MessageService_receiveMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.success = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new ttypes.ReceiveMessageResponse();
          elem142.read(input);
          this.success.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_receiveMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_receiveMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter143 in this.success)
    {
      if (this.success.hasOwnProperty(iter143))
      {
        iter143 = this.success[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_changeMessageVisibilitySeconds_args = function(args) {
  this.changeMessageVisibilityRequest = null;
  if (args) {
    if (args.changeMessageVisibilityRequest !== undefined) {
      this.changeMessageVisibilityRequest = args.changeMessageVisibilityRequest;
    }
  }
};
MessageService_changeMessageVisibilitySeconds_args.prototype = {};
MessageService_changeMessageVisibilitySeconds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.changeMessageVisibilityRequest = new ttypes.ChangeMessageVisibilityRequest();
        this.changeMessageVisibilityRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_changeMessageVisibilitySeconds_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_changeMessageVisibilitySeconds_args');
  if (this.changeMessageVisibilityRequest !== null && this.changeMessageVisibilityRequest !== undefined) {
    output.writeFieldBegin('changeMessageVisibilityRequest', Thrift.Type.STRUCT, 1);
    this.changeMessageVisibilityRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_changeMessageVisibilitySeconds_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_changeMessageVisibilitySeconds_result.prototype = {};
MessageService_changeMessageVisibilitySeconds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_changeMessageVisibilitySeconds_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_changeMessageVisibilitySeconds_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_changeMessageVisibilitySecondsBatch_args = function(args) {
  this.changeMessageVisibilityBatchRequest = null;
  if (args) {
    if (args.changeMessageVisibilityBatchRequest !== undefined) {
      this.changeMessageVisibilityBatchRequest = args.changeMessageVisibilityBatchRequest;
    }
  }
};
MessageService_changeMessageVisibilitySecondsBatch_args.prototype = {};
MessageService_changeMessageVisibilitySecondsBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.changeMessageVisibilityBatchRequest = new ttypes.ChangeMessageVisibilityBatchRequest();
        this.changeMessageVisibilityBatchRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_changeMessageVisibilitySecondsBatch_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_changeMessageVisibilitySecondsBatch_args');
  if (this.changeMessageVisibilityBatchRequest !== null && this.changeMessageVisibilityBatchRequest !== undefined) {
    output.writeFieldBegin('changeMessageVisibilityBatchRequest', Thrift.Type.STRUCT, 1);
    this.changeMessageVisibilityBatchRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_changeMessageVisibilitySecondsBatch_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_changeMessageVisibilitySecondsBatch_result.prototype = {};
MessageService_changeMessageVisibilitySecondsBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChangeMessageVisibilityBatchResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_changeMessageVisibilitySecondsBatch_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_changeMessageVisibilitySecondsBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deleteMessage_args = function(args) {
  this.deleteMessageRequest = null;
  if (args) {
    if (args.deleteMessageRequest !== undefined) {
      this.deleteMessageRequest = args.deleteMessageRequest;
    }
  }
};
MessageService_deleteMessage_args.prototype = {};
MessageService_deleteMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteMessageRequest = new ttypes.DeleteMessageRequest();
        this.deleteMessageRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteMessage_args');
  if (this.deleteMessageRequest !== null && this.deleteMessageRequest !== undefined) {
    output.writeFieldBegin('deleteMessageRequest', Thrift.Type.STRUCT, 1);
    this.deleteMessageRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deleteMessage_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_deleteMessage_result.prototype = {};
MessageService_deleteMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteMessage_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deleteMessageBatch_args = function(args) {
  this.deleteMessageBatchRequest = null;
  if (args) {
    if (args.deleteMessageBatchRequest !== undefined) {
      this.deleteMessageBatchRequest = args.deleteMessageBatchRequest;
    }
  }
};
MessageService_deleteMessageBatch_args.prototype = {};
MessageService_deleteMessageBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteMessageBatchRequest = new ttypes.DeleteMessageBatchRequest();
        this.deleteMessageBatchRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteMessageBatch_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteMessageBatch_args');
  if (this.deleteMessageBatchRequest !== null && this.deleteMessageBatchRequest !== undefined) {
    output.writeFieldBegin('deleteMessageBatchRequest', Thrift.Type.STRUCT, 1);
    this.deleteMessageBatchRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deleteMessageBatch_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_deleteMessageBatch_result.prototype = {};
MessageService_deleteMessageBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeleteMessageBatchResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteMessageBatch_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteMessageBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deadMessage_args = function(args) {
  this.deadMessageRequest = null;
  if (args) {
    if (args.deadMessageRequest !== undefined) {
      this.deadMessageRequest = args.deadMessageRequest;
    }
  }
};
MessageService_deadMessage_args.prototype = {};
MessageService_deadMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deadMessageRequest = new ttypes.DeadMessageRequest();
        this.deadMessageRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deadMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deadMessage_args');
  if (this.deadMessageRequest !== null && this.deadMessageRequest !== undefined) {
    output.writeFieldBegin('deadMessageRequest', Thrift.Type.STRUCT, 1);
    this.deadMessageRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deadMessage_result = function(args) {
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_deadMessage_result.prototype = {};
MessageService_deadMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deadMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deadMessage_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deadMessageBatch_args = function(args) {
  this.deadMessageBatchRequest = null;
  if (args) {
    if (args.deadMessageBatchRequest !== undefined) {
      this.deadMessageBatchRequest = args.deadMessageBatchRequest;
    }
  }
};
MessageService_deadMessageBatch_args.prototype = {};
MessageService_deadMessageBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deadMessageBatchRequest = new ttypes.DeadMessageBatchRequest();
        this.deadMessageBatchRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deadMessageBatch_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deadMessageBatch_args');
  if (this.deadMessageBatchRequest !== null && this.deadMessageBatchRequest !== undefined) {
    output.writeFieldBegin('deadMessageBatchRequest', Thrift.Type.STRUCT, 1);
    this.deadMessageBatchRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_deadMessageBatch_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Common_ttypes.GalaxyEmqServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MessageService_deadMessageBatch_result.prototype = {};
MessageService_deadMessageBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeadMessageBatchResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Common_ttypes.GalaxyEmqServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deadMessageBatch_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deadMessageBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(MessageServiceClient, EMQBaseServiceClient);
MessageServiceClient.prototype.seqid = function() { return this._seqid; }
MessageServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
MessageServiceClient.prototype.sendMessage = function(sendMessageRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendMessage(sendMessageRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendMessage(sendMessageRequest);
  }
};

MessageServiceClient.prototype.send_sendMessage = function(sendMessageRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageService_sendMessage_args();
  args.sendMessageRequest = sendMessageRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_sendMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_sendMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendMessage failed: unknown result');
};
MessageServiceClient.prototype.sendMessageBatch = function(sendMessageBatchRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendMessageBatch(sendMessageBatchRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendMessageBatch(sendMessageBatchRequest);
  }
};

MessageServiceClient.prototype.send_sendMessageBatch = function(sendMessageBatchRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMessageBatch', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageService_sendMessageBatch_args();
  args.sendMessageBatchRequest = sendMessageBatchRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_sendMessageBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_sendMessageBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendMessageBatch failed: unknown result');
};
MessageServiceClient.prototype.receiveMessage = function(receiveMessageRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_receiveMessage(receiveMessageRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_receiveMessage(receiveMessageRequest);
  }
};

MessageServiceClient.prototype.send_receiveMessage = function(receiveMessageRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('receiveMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageService_receiveMessage_args();
  args.receiveMessageRequest = receiveMessageRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_receiveMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_receiveMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('receiveMessage failed: unknown result');
};
MessageServiceClient.prototype.changeMessageVisibilitySeconds = function(changeMessageVisibilityRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_changeMessageVisibilitySeconds(changeMessageVisibilityRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_changeMessageVisibilitySeconds(changeMessageVisibilityRequest);
  }
};

MessageServiceClient.prototype.send_changeMessageVisibilitySeconds = function(changeMessageVisibilityRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changeMessageVisibilitySeconds', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageService_changeMessageVisibilitySeconds_args();
  args.changeMessageVisibilityRequest = changeMessageVisibilityRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_changeMessageVisibilitySeconds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_changeMessageVisibilitySeconds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
MessageServiceClient.prototype.changeMessageVisibilitySecondsBatch = function(changeMessageVisibilityBatchRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_changeMessageVisibilitySecondsBatch(changeMessageVisibilityBatchRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_changeMessageVisibilitySecondsBatch(changeMessageVisibilityBatchRequest);
  }
};

MessageServiceClient.prototype.send_changeMessageVisibilitySecondsBatch = function(changeMessageVisibilityBatchRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changeMessageVisibilitySecondsBatch', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageService_changeMessageVisibilitySecondsBatch_args();
  args.changeMessageVisibilityBatchRequest = changeMessageVisibilityBatchRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_changeMessageVisibilitySecondsBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_changeMessageVisibilitySecondsBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('changeMessageVisibilitySecondsBatch failed: unknown result');
};
MessageServiceClient.prototype.deleteMessage = function(deleteMessageRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteMessage(deleteMessageRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteMessage(deleteMessageRequest);
  }
};

MessageServiceClient.prototype.send_deleteMessage = function(deleteMessageRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageService_deleteMessage_args();
  args.deleteMessageRequest = deleteMessageRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_deleteMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_deleteMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
MessageServiceClient.prototype.deleteMessageBatch = function(deleteMessageBatchRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteMessageBatch(deleteMessageBatchRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteMessageBatch(deleteMessageBatchRequest);
  }
};

MessageServiceClient.prototype.send_deleteMessageBatch = function(deleteMessageBatchRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteMessageBatch', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageService_deleteMessageBatch_args();
  args.deleteMessageBatchRequest = deleteMessageBatchRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_deleteMessageBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_deleteMessageBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteMessageBatch failed: unknown result');
};
MessageServiceClient.prototype.deadMessage = function(deadMessageRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deadMessage(deadMessageRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deadMessage(deadMessageRequest);
  }
};

MessageServiceClient.prototype.send_deadMessage = function(deadMessageRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deadMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageService_deadMessage_args();
  args.deadMessageRequest = deadMessageRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_deadMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_deadMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
MessageServiceClient.prototype.deadMessageBatch = function(deadMessageBatchRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deadMessageBatch(deadMessageBatchRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deadMessageBatch(deadMessageBatchRequest);
  }
};

MessageServiceClient.prototype.send_deadMessageBatch = function(deadMessageBatchRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deadMessageBatch', Thrift.MessageType.CALL, this.seqid());
  var args = new MessageService_deadMessageBatch_args();
  args.deadMessageBatchRequest = deadMessageBatchRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_deadMessageBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_deadMessageBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deadMessageBatch failed: unknown result');
};
MessageServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(MessageServiceProcessor, EMQBaseServiceProcessor)
MessageServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

MessageServiceProcessor.prototype.process_sendMessage = function(seqid, input, output) {
  var args = new MessageService_sendMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendMessage.length === 1) {
    Q.fcall(this._handler.sendMessage, args.sendMessageRequest)
      .then(function(result) {
        var result = new MessageService_sendMessage_result({success: result});
        output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageService_sendMessage_result(err);
        output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendMessage(args.sendMessageRequest,  function (err, result) {
      var result = new MessageService_sendMessage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServiceProcessor.prototype.process_sendMessageBatch = function(seqid, input, output) {
  var args = new MessageService_sendMessageBatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendMessageBatch.length === 1) {
    Q.fcall(this._handler.sendMessageBatch, args.sendMessageBatchRequest)
      .then(function(result) {
        var result = new MessageService_sendMessageBatch_result({success: result});
        output.writeMessageBegin("sendMessageBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageService_sendMessageBatch_result(err);
        output.writeMessageBegin("sendMessageBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendMessageBatch(args.sendMessageBatchRequest,  function (err, result) {
      var result = new MessageService_sendMessageBatch_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sendMessageBatch", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServiceProcessor.prototype.process_receiveMessage = function(seqid, input, output) {
  var args = new MessageService_receiveMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.receiveMessage.length === 1) {
    Q.fcall(this._handler.receiveMessage, args.receiveMessageRequest)
      .then(function(result) {
        var result = new MessageService_receiveMessage_result({success: result});
        output.writeMessageBegin("receiveMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageService_receiveMessage_result(err);
        output.writeMessageBegin("receiveMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.receiveMessage(args.receiveMessageRequest,  function (err, result) {
      var result = new MessageService_receiveMessage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("receiveMessage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServiceProcessor.prototype.process_changeMessageVisibilitySeconds = function(seqid, input, output) {
  var args = new MessageService_changeMessageVisibilitySeconds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.changeMessageVisibilitySeconds.length === 1) {
    Q.fcall(this._handler.changeMessageVisibilitySeconds, args.changeMessageVisibilityRequest)
      .then(function(result) {
        var result = new MessageService_changeMessageVisibilitySeconds_result({success: result});
        output.writeMessageBegin("changeMessageVisibilitySeconds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageService_changeMessageVisibilitySeconds_result(err);
        output.writeMessageBegin("changeMessageVisibilitySeconds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.changeMessageVisibilitySeconds(args.changeMessageVisibilityRequest,  function (err, result) {
      var result = new MessageService_changeMessageVisibilitySeconds_result((err != null ? err : {success: result}));
      output.writeMessageBegin("changeMessageVisibilitySeconds", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServiceProcessor.prototype.process_changeMessageVisibilitySecondsBatch = function(seqid, input, output) {
  var args = new MessageService_changeMessageVisibilitySecondsBatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.changeMessageVisibilitySecondsBatch.length === 1) {
    Q.fcall(this._handler.changeMessageVisibilitySecondsBatch, args.changeMessageVisibilityBatchRequest)
      .then(function(result) {
        var result = new MessageService_changeMessageVisibilitySecondsBatch_result({success: result});
        output.writeMessageBegin("changeMessageVisibilitySecondsBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageService_changeMessageVisibilitySecondsBatch_result(err);
        output.writeMessageBegin("changeMessageVisibilitySecondsBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.changeMessageVisibilitySecondsBatch(args.changeMessageVisibilityBatchRequest,  function (err, result) {
      var result = new MessageService_changeMessageVisibilitySecondsBatch_result((err != null ? err : {success: result}));
      output.writeMessageBegin("changeMessageVisibilitySecondsBatch", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServiceProcessor.prototype.process_deleteMessage = function(seqid, input, output) {
  var args = new MessageService_deleteMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteMessage.length === 1) {
    Q.fcall(this._handler.deleteMessage, args.deleteMessageRequest)
      .then(function(result) {
        var result = new MessageService_deleteMessage_result({success: result});
        output.writeMessageBegin("deleteMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageService_deleteMessage_result(err);
        output.writeMessageBegin("deleteMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteMessage(args.deleteMessageRequest,  function (err, result) {
      var result = new MessageService_deleteMessage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteMessage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServiceProcessor.prototype.process_deleteMessageBatch = function(seqid, input, output) {
  var args = new MessageService_deleteMessageBatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteMessageBatch.length === 1) {
    Q.fcall(this._handler.deleteMessageBatch, args.deleteMessageBatchRequest)
      .then(function(result) {
        var result = new MessageService_deleteMessageBatch_result({success: result});
        output.writeMessageBegin("deleteMessageBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageService_deleteMessageBatch_result(err);
        output.writeMessageBegin("deleteMessageBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteMessageBatch(args.deleteMessageBatchRequest,  function (err, result) {
      var result = new MessageService_deleteMessageBatch_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteMessageBatch", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServiceProcessor.prototype.process_deadMessage = function(seqid, input, output) {
  var args = new MessageService_deadMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deadMessage.length === 1) {
    Q.fcall(this._handler.deadMessage, args.deadMessageRequest)
      .then(function(result) {
        var result = new MessageService_deadMessage_result({success: result});
        output.writeMessageBegin("deadMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageService_deadMessage_result(err);
        output.writeMessageBegin("deadMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deadMessage(args.deadMessageRequest,  function (err, result) {
      var result = new MessageService_deadMessage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deadMessage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MessageServiceProcessor.prototype.process_deadMessageBatch = function(seqid, input, output) {
  var args = new MessageService_deadMessageBatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deadMessageBatch.length === 1) {
    Q.fcall(this._handler.deadMessageBatch, args.deadMessageBatchRequest)
      .then(function(result) {
        var result = new MessageService_deadMessageBatch_result({success: result});
        output.writeMessageBegin("deadMessageBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new MessageService_deadMessageBatch_result(err);
        output.writeMessageBegin("deadMessageBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deadMessageBatch(args.deadMessageBatchRequest,  function (err, result) {
      var result = new MessageService_deadMessageBatch_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deadMessageBatch", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

