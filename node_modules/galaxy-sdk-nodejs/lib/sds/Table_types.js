//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('../thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Errors_ttypes = require('./Errors_types')
var Common_ttypes = require('./Common_types')
var Authentication_ttypes = require('./Authentication_types')
var Authorization_ttypes = require('../rpc/Authorization_types')


var ttypes = module.exports = {};
ttypes.DataType = {
  'BOOL' : 1,
  'INT8' : 2,
  'INT16' : 3,
  'INT32' : 4,
  'INT64' : 5,
  'FLOAT' : 6,
  'DOUBLE' : 7,
  'STRING' : 8,
  'BINARY' : 9,
  'RAWBINARY' : 10,
  'BOOL_SET' : 100,
  'INT8_SET' : 101,
  'INT16_SET' : 102,
  'INT32_SET' : 103,
  'INT64_SET' : 104,
  'FLOAT_SET' : 105,
  'DOUBLE_SET' : 106,
  'STRING_SET' : 107,
  'BINARY_SET' : 108
};
ttypes.OperatorType = {
  'EQUAL' : 1,
  'NOT_EQUAL' : 2,
  'GREATER' : 3,
  'GREATER_OR_EQUAL' : 4,
  'LESS' : 5,
  'LESS_OR_EQUAL' : 6
};
ttypes.SecondaryIndexConsistencyMode = {
  'LAZY' : 0,
  'EAGER' : 1,
  'IMMUTABLE' : 2
};
ttypes.CannedAcl = {
  'APP_SECRET_READ' : 1,
  'APP_SECRET_WRITE' : 2,
  'APP_USER_ENTITY_GROUP_READ' : 3,
  'APP_USER_ENTITY_GROUP_WRITE' : 4,
  'APP_USER_READ' : 5,
  'APP_USER_WRITE' : 6,
  'PUBLIC_READ' : 7,
  'PUBLIC_WRITE' : 8
};
ttypes.Permission = {
  'READ' : 1,
  'WRITE' : 2,
  'ADMIN' : 3
};
ttypes.ConsistencyLevel = {
  'STRONG' : 0,
  'EVENTUAL' : 1,
  'WEAK' : 2
};
ttypes.StreamViewType = {
  'RECORD_IMAGE' : 1,
  'MUTATE_LOG' : 2
};
ttypes.TableState = {
  'CREATING' : 1,
  'ENABLING' : 2,
  'ENABLED' : 3,
  'DISABLING' : 4,
  'DISABLED' : 5,
  'DELETING' : 6,
  'DELETED' : 7,
  'LAZY_DELETE' : 8,
  'RENAMING' : 9
};
ttypes.SnapshotState = {
  'ENABLED' : 1,
  'INPROGRESS' : 2
};
ttypes.ScanOp = {
  'COUNT' : 0,
  'DELETE' : 1,
  'UPDATE' : 2
};
ttypes.BatchOp = {
  'GET' : 1,
  'PUT' : 2,
  'INCREMENT' : 3,
  'REMOVE' : 4
};
ttypes.MutationType = {
  'PUT' : 1,
  'DELETE' : 2,
  'INCREMENT' : 3
};
Value = module.exports.Value = function(args) {
  this.boolValue = null;
  this.int8Value = null;
  this.int16Value = null;
  this.int32Value = null;
  this.int64Value = null;
  this.doubleValue = null;
  this.stringValue = null;
  this.binaryValue = null;
  this.boolSetValue = null;
  this.int8SetValue = null;
  this.int16SetValue = null;
  this.int32SetValue = null;
  this.int64SetValue = null;
  this.doubleSetValue = null;
  this.stringSetValue = null;
  this.binarySetValue = null;
  this.nullValue = null;
  if (args) {
    if (args.boolValue !== undefined) {
      this.boolValue = args.boolValue;
    }
    if (args.int8Value !== undefined) {
      this.int8Value = args.int8Value;
    }
    if (args.int16Value !== undefined) {
      this.int16Value = args.int16Value;
    }
    if (args.int32Value !== undefined) {
      this.int32Value = args.int32Value;
    }
    if (args.int64Value !== undefined) {
      this.int64Value = args.int64Value;
    }
    if (args.doubleValue !== undefined) {
      this.doubleValue = args.doubleValue;
    }
    if (args.stringValue !== undefined) {
      this.stringValue = args.stringValue;
    }
    if (args.binaryValue !== undefined) {
      this.binaryValue = args.binaryValue;
    }
    if (args.boolSetValue !== undefined) {
      this.boolSetValue = args.boolSetValue;
    }
    if (args.int8SetValue !== undefined) {
      this.int8SetValue = args.int8SetValue;
    }
    if (args.int16SetValue !== undefined) {
      this.int16SetValue = args.int16SetValue;
    }
    if (args.int32SetValue !== undefined) {
      this.int32SetValue = args.int32SetValue;
    }
    if (args.int64SetValue !== undefined) {
      this.int64SetValue = args.int64SetValue;
    }
    if (args.doubleSetValue !== undefined) {
      this.doubleSetValue = args.doubleSetValue;
    }
    if (args.stringSetValue !== undefined) {
      this.stringSetValue = args.stringSetValue;
    }
    if (args.binarySetValue !== undefined) {
      this.binarySetValue = args.binarySetValue;
    }
    if (args.nullValue !== undefined) {
      this.nullValue = args.nullValue;
    }
  }
};
Value.prototype = {};
Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.boolValue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.int8Value = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.int16Value = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.int32Value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.int64Value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.binaryValue = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.boolSetValue = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readBool();
          this.boolSetValue.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.int8SetValue = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readByte();
          this.int8SetValue.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.int16SetValue = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readI16();
          this.int16SetValue.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.int32SetValue = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = input.readI32();
          this.int32SetValue.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.int64SetValue = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = input.readI64();
          this.int64SetValue.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.doubleSetValue = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = input.readDouble();
          this.doubleSetValue.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.stringSetValue = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString();
          this.stringSetValue.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size49 = 0;
        var _rtmp353;
        this.binarySetValue = [];
        var _etype52 = 0;
        _rtmp353 = input.readListBegin();
        _etype52 = _rtmp353.etype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var elem55 = null;
          elem55 = input.readBinary();
          this.binarySetValue.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.nullValue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Value.prototype.write = function(output) {
  output.writeStructBegin('Value');
  if (this.boolValue !== null && this.boolValue !== undefined) {
    output.writeFieldBegin('boolValue', Thrift.Type.BOOL, 1);
    output.writeBool(this.boolValue);
    output.writeFieldEnd();
  }
  if (this.int8Value !== null && this.int8Value !== undefined) {
    output.writeFieldBegin('int8Value', Thrift.Type.BYTE, 2);
    output.writeByte(this.int8Value);
    output.writeFieldEnd();
  }
  if (this.int16Value !== null && this.int16Value !== undefined) {
    output.writeFieldBegin('int16Value', Thrift.Type.I16, 3);
    output.writeI16(this.int16Value);
    output.writeFieldEnd();
  }
  if (this.int32Value !== null && this.int32Value !== undefined) {
    output.writeFieldBegin('int32Value', Thrift.Type.I32, 4);
    output.writeI32(this.int32Value);
    output.writeFieldEnd();
  }
  if (this.int64Value !== null && this.int64Value !== undefined) {
    output.writeFieldBegin('int64Value', Thrift.Type.I64, 5);
    output.writeI64(this.int64Value);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 7);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.STRING, 8);
    output.writeBinary(this.binaryValue);
    output.writeFieldEnd();
  }
  if (this.boolSetValue !== null && this.boolSetValue !== undefined) {
    output.writeFieldBegin('boolSetValue', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.BOOL, this.boolSetValue.length);
    for (var iter56 in this.boolSetValue)
    {
      if (this.boolSetValue.hasOwnProperty(iter56))
      {
        iter56 = this.boolSetValue[iter56];
        output.writeBool(iter56);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int8SetValue !== null && this.int8SetValue !== undefined) {
    output.writeFieldBegin('int8SetValue', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.BYTE, this.int8SetValue.length);
    for (var iter57 in this.int8SetValue)
    {
      if (this.int8SetValue.hasOwnProperty(iter57))
      {
        iter57 = this.int8SetValue[iter57];
        output.writeByte(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int16SetValue !== null && this.int16SetValue !== undefined) {
    output.writeFieldBegin('int16SetValue', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.I16, this.int16SetValue.length);
    for (var iter58 in this.int16SetValue)
    {
      if (this.int16SetValue.hasOwnProperty(iter58))
      {
        iter58 = this.int16SetValue[iter58];
        output.writeI16(iter58);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int32SetValue !== null && this.int32SetValue !== undefined) {
    output.writeFieldBegin('int32SetValue', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.I32, this.int32SetValue.length);
    for (var iter59 in this.int32SetValue)
    {
      if (this.int32SetValue.hasOwnProperty(iter59))
      {
        iter59 = this.int32SetValue[iter59];
        output.writeI32(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.int64SetValue !== null && this.int64SetValue !== undefined) {
    output.writeFieldBegin('int64SetValue', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.I64, this.int64SetValue.length);
    for (var iter60 in this.int64SetValue)
    {
      if (this.int64SetValue.hasOwnProperty(iter60))
      {
        iter60 = this.int64SetValue[iter60];
        output.writeI64(iter60);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.doubleSetValue !== null && this.doubleSetValue !== undefined) {
    output.writeFieldBegin('doubleSetValue', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.DOUBLE, this.doubleSetValue.length);
    for (var iter61 in this.doubleSetValue)
    {
      if (this.doubleSetValue.hasOwnProperty(iter61))
      {
        iter61 = this.doubleSetValue[iter61];
        output.writeDouble(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stringSetValue !== null && this.stringSetValue !== undefined) {
    output.writeFieldBegin('stringSetValue', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRING, this.stringSetValue.length);
    for (var iter62 in this.stringSetValue)
    {
      if (this.stringSetValue.hasOwnProperty(iter62))
      {
        iter62 = this.stringSetValue[iter62];
        output.writeString(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.binarySetValue !== null && this.binarySetValue !== undefined) {
    output.writeFieldBegin('binarySetValue', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRING, this.binarySetValue.length);
    for (var iter63 in this.binarySetValue)
    {
      if (this.binarySetValue.hasOwnProperty(iter63))
      {
        iter63 = this.binarySetValue[iter63];
        output.writeBinary(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nullValue !== null && this.nullValue !== undefined) {
    output.writeFieldBegin('nullValue', Thrift.Type.BOOL, 20);
    output.writeBool(this.nullValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Datum = module.exports.Datum = function(args) {
  this.type = null;
  this.value = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Datum.prototype = {};
Datum.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.Value();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Datum.prototype.write = function(output) {
  output.writeStructBegin('Datum');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProvisionThroughput = module.exports.ProvisionThroughput = function(args) {
  this.readCapacity = null;
  this.writeCapacity = null;
  if (args) {
    if (args.readCapacity !== undefined) {
      this.readCapacity = args.readCapacity;
    }
    if (args.writeCapacity !== undefined) {
      this.writeCapacity = args.writeCapacity;
    }
  }
};
ProvisionThroughput.prototype = {};
ProvisionThroughput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.readCapacity = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.writeCapacity = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProvisionThroughput.prototype.write = function(output) {
  output.writeStructBegin('ProvisionThroughput');
  if (this.readCapacity !== null && this.readCapacity !== undefined) {
    output.writeFieldBegin('readCapacity', Thrift.Type.I64, 1);
    output.writeI64(this.readCapacity);
    output.writeFieldEnd();
  }
  if (this.writeCapacity !== null && this.writeCapacity !== undefined) {
    output.writeFieldBegin('writeCapacity', Thrift.Type.I64, 2);
    output.writeI64(this.writeCapacity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableQuota = module.exports.TableQuota = function(args) {
  this.size = null;
  if (args) {
    if (args.size !== undefined) {
      this.size = args.size;
    }
  }
};
TableQuota.prototype = {};
TableQuota.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableQuota.prototype.write = function(output) {
  output.writeStructBegin('TableQuota');
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 1);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeySpec = module.exports.KeySpec = function(args) {
  this.attribute = null;
  this.asc = true;
  if (args) {
    if (args.attribute !== undefined) {
      this.attribute = args.attribute;
    }
    if (args.asc !== undefined) {
      this.asc = args.asc;
    }
  }
};
KeySpec.prototype = {};
KeySpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.attribute = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.asc = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeySpec.prototype.write = function(output) {
  output.writeStructBegin('KeySpec');
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRING, 1);
    output.writeString(this.attribute);
    output.writeFieldEnd();
  }
  if (this.asc !== null && this.asc !== undefined) {
    output.writeFieldBegin('asc', Thrift.Type.BOOL, 2);
    output.writeBool(this.asc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LocalSecondaryIndexSpec = module.exports.LocalSecondaryIndexSpec = function(args) {
  this.indexSchema = null;
  this.projections = null;
  this.consistencyMode = 0;
  this.unique = false;
  if (args) {
    if (args.indexSchema !== undefined) {
      this.indexSchema = args.indexSchema;
    }
    if (args.projections !== undefined) {
      this.projections = args.projections;
    }
    if (args.consistencyMode !== undefined) {
      this.consistencyMode = args.consistencyMode;
    }
    if (args.unique !== undefined) {
      this.unique = args.unique;
    }
  }
};
LocalSecondaryIndexSpec.prototype = {};
LocalSecondaryIndexSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.indexSchema = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.KeySpec();
          elem70.read(input);
          this.indexSchema.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.projections = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = input.readString();
          this.projections.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.consistencyMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.unique = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LocalSecondaryIndexSpec.prototype.write = function(output) {
  output.writeStructBegin('LocalSecondaryIndexSpec');
  if (this.indexSchema !== null && this.indexSchema !== undefined) {
    output.writeFieldBegin('indexSchema', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.indexSchema.length);
    for (var iter78 in this.indexSchema)
    {
      if (this.indexSchema.hasOwnProperty(iter78))
      {
        iter78 = this.indexSchema[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.projections !== null && this.projections !== undefined) {
    output.writeFieldBegin('projections', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.projections.length);
    for (var iter79 in this.projections)
    {
      if (this.projections.hasOwnProperty(iter79))
      {
        iter79 = this.projections[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.consistencyMode !== null && this.consistencyMode !== undefined) {
    output.writeFieldBegin('consistencyMode', Thrift.Type.I32, 3);
    output.writeI32(this.consistencyMode);
    output.writeFieldEnd();
  }
  if (this.unique !== null && this.unique !== undefined) {
    output.writeFieldBegin('unique', Thrift.Type.BOOL, 4);
    output.writeBool(this.unique);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EntityGroupSpec = module.exports.EntityGroupSpec = function(args) {
  this.attributes = null;
  this.enableHash = true;
  if (args) {
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.enableHash !== undefined) {
      this.enableHash = args.enableHash;
    }
  }
};
EntityGroupSpec.prototype = {};
EntityGroupSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.attributes = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.KeySpec();
          elem86.read(input);
          this.attributes.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.enableHash = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityGroupSpec.prototype.write = function(output) {
  output.writeStructBegin('EntityGroupSpec');
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.attributes.length);
    for (var iter87 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter87))
      {
        iter87 = this.attributes[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.enableHash !== null && this.enableHash !== undefined) {
    output.writeFieldBegin('enableHash', Thrift.Type.BOOL, 2);
    output.writeBool(this.enableHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GlobalSecondaryIndexSpec = module.exports.GlobalSecondaryIndexSpec = function(args) {
  this.indexEntityGroup = null;
  this.indexPrimaryKey = null;
  this.projections = null;
  this.consistencyLevel = 0;
  this.unique = false;
  this.throughput = null;
  this.slaveThroughput = null;
  this.exceededThroughput = null;
  this.exceededSlaveThroughput = null;
  this.preSplits = 1;
  if (args) {
    if (args.indexEntityGroup !== undefined) {
      this.indexEntityGroup = args.indexEntityGroup;
    }
    if (args.indexPrimaryKey !== undefined) {
      this.indexPrimaryKey = args.indexPrimaryKey;
    }
    if (args.projections !== undefined) {
      this.projections = args.projections;
    }
    if (args.consistencyLevel !== undefined) {
      this.consistencyLevel = args.consistencyLevel;
    }
    if (args.unique !== undefined) {
      this.unique = args.unique;
    }
    if (args.throughput !== undefined) {
      this.throughput = args.throughput;
    }
    if (args.slaveThroughput !== undefined) {
      this.slaveThroughput = args.slaveThroughput;
    }
    if (args.exceededThroughput !== undefined) {
      this.exceededThroughput = args.exceededThroughput;
    }
    if (args.exceededSlaveThroughput !== undefined) {
      this.exceededSlaveThroughput = args.exceededSlaveThroughput;
    }
    if (args.preSplits !== undefined) {
      this.preSplits = args.preSplits;
    }
  }
};
GlobalSecondaryIndexSpec.prototype = {};
GlobalSecondaryIndexSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexEntityGroup = new ttypes.EntityGroupSpec();
        this.indexEntityGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.indexPrimaryKey = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.KeySpec();
          elem94.read(input);
          this.indexPrimaryKey.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size95 = 0;
        var _rtmp399;
        this.projections = [];
        var _etype98 = 0;
        _rtmp399 = input.readListBegin();
        _etype98 = _rtmp399.etype;
        _size95 = _rtmp399.size;
        for (var _i100 = 0; _i100 < _size95; ++_i100)
        {
          var elem101 = null;
          elem101 = input.readString();
          this.projections.push(elem101);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consistencyLevel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.unique = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.throughput = new ttypes.ProvisionThroughput();
        this.throughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.slaveThroughput = new ttypes.ProvisionThroughput();
        this.slaveThroughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.exceededThroughput = new ttypes.ProvisionThroughput();
        this.exceededThroughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.exceededSlaveThroughput = new ttypes.ProvisionThroughput();
        this.exceededSlaveThroughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.preSplits = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GlobalSecondaryIndexSpec.prototype.write = function(output) {
  output.writeStructBegin('GlobalSecondaryIndexSpec');
  if (this.indexEntityGroup !== null && this.indexEntityGroup !== undefined) {
    output.writeFieldBegin('indexEntityGroup', Thrift.Type.STRUCT, 1);
    this.indexEntityGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.indexPrimaryKey !== null && this.indexPrimaryKey !== undefined) {
    output.writeFieldBegin('indexPrimaryKey', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.indexPrimaryKey.length);
    for (var iter102 in this.indexPrimaryKey)
    {
      if (this.indexPrimaryKey.hasOwnProperty(iter102))
      {
        iter102 = this.indexPrimaryKey[iter102];
        iter102.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.projections !== null && this.projections !== undefined) {
    output.writeFieldBegin('projections', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.projections.length);
    for (var iter103 in this.projections)
    {
      if (this.projections.hasOwnProperty(iter103))
      {
        iter103 = this.projections[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.consistencyLevel !== null && this.consistencyLevel !== undefined) {
    output.writeFieldBegin('consistencyLevel', Thrift.Type.I32, 4);
    output.writeI32(this.consistencyLevel);
    output.writeFieldEnd();
  }
  if (this.unique !== null && this.unique !== undefined) {
    output.writeFieldBegin('unique', Thrift.Type.BOOL, 5);
    output.writeBool(this.unique);
    output.writeFieldEnd();
  }
  if (this.throughput !== null && this.throughput !== undefined) {
    output.writeFieldBegin('throughput', Thrift.Type.STRUCT, 6);
    this.throughput.write(output);
    output.writeFieldEnd();
  }
  if (this.slaveThroughput !== null && this.slaveThroughput !== undefined) {
    output.writeFieldBegin('slaveThroughput', Thrift.Type.STRUCT, 7);
    this.slaveThroughput.write(output);
    output.writeFieldEnd();
  }
  if (this.exceededThroughput !== null && this.exceededThroughput !== undefined) {
    output.writeFieldBegin('exceededThroughput', Thrift.Type.STRUCT, 8);
    this.exceededThroughput.write(output);
    output.writeFieldEnd();
  }
  if (this.exceededSlaveThroughput !== null && this.exceededSlaveThroughput !== undefined) {
    output.writeFieldBegin('exceededSlaveThroughput', Thrift.Type.STRUCT, 9);
    this.exceededSlaveThroughput.write(output);
    output.writeFieldEnd();
  }
  if (this.preSplits !== null && this.preSplits !== undefined) {
    output.writeFieldBegin('preSplits', Thrift.Type.I32, 10);
    output.writeI32(this.preSplits);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamSpec = module.exports.StreamSpec = function(args) {
  this.enableStream = null;
  this.viewType = null;
  this.attributes = null;
  if (args) {
    if (args.enableStream !== undefined) {
      this.enableStream = args.enableStream;
    }
    if (args.viewType !== undefined) {
      this.viewType = args.viewType;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
StreamSpec.prototype = {};
StreamSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enableStream = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.viewType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.attributes = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readString();
          this.attributes.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamSpec.prototype.write = function(output) {
  output.writeStructBegin('StreamSpec');
  if (this.enableStream !== null && this.enableStream !== undefined) {
    output.writeFieldBegin('enableStream', Thrift.Type.BOOL, 1);
    output.writeBool(this.enableStream);
    output.writeFieldEnd();
  }
  if (this.viewType !== null && this.viewType !== undefined) {
    output.writeFieldBegin('viewType', Thrift.Type.I32, 2);
    output.writeI32(this.viewType);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
    for (var iter111 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter111))
      {
        iter111 = this.attributes[iter111];
        output.writeString(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableSchema = module.exports.TableSchema = function(args) {
  this.version = null;
  this.entityGroup = null;
  this.primaryIndex = null;
  this.secondaryIndexes = null;
  this.attributes = null;
  this.ttl = -1;
  this.preSplits = 1;
  this.streams = null;
  this.globalSecondaryIndexes = null;
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.entityGroup !== undefined) {
      this.entityGroup = args.entityGroup;
    }
    if (args.primaryIndex !== undefined) {
      this.primaryIndex = args.primaryIndex;
    }
    if (args.secondaryIndexes !== undefined) {
      this.secondaryIndexes = args.secondaryIndexes;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.ttl !== undefined) {
      this.ttl = args.ttl;
    }
    if (args.preSplits !== undefined) {
      this.preSplits = args.preSplits;
    }
    if (args.streams !== undefined) {
      this.streams = args.streams;
    }
    if (args.globalSecondaryIndexes !== undefined) {
      this.globalSecondaryIndexes = args.globalSecondaryIndexes;
    }
  }
};
TableSchema.prototype = {};
TableSchema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.entityGroup = new ttypes.EntityGroupSpec();
        this.entityGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.primaryIndex = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.KeySpec();
          elem118.read(input);
          this.primaryIndex.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size119 = 0;
        var _rtmp3123;
        this.secondaryIndexes = {};
        var _ktype120 = 0;
        var _vtype121 = 0;
        _rtmp3123 = input.readMapBegin();
        _ktype120 = _rtmp3123.ktype;
        _vtype121 = _rtmp3123.vtype;
        _size119 = _rtmp3123.size;
        for (var _i124 = 0; _i124 < _size119; ++_i124)
        {
          var key125 = null;
          var val126 = null;
          key125 = input.readString();
          val126 = new ttypes.LocalSecondaryIndexSpec();
          val126.read(input);
          this.secondaryIndexes[key125] = val126;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size127 = 0;
        var _rtmp3131;
        this.attributes = {};
        var _ktype128 = 0;
        var _vtype129 = 0;
        _rtmp3131 = input.readMapBegin();
        _ktype128 = _rtmp3131.ktype;
        _vtype129 = _rtmp3131.vtype;
        _size127 = _rtmp3131.size;
        for (var _i132 = 0; _i132 < _size127; ++_i132)
        {
          var key133 = null;
          var val134 = null;
          key133 = input.readString();
          val134 = input.readI32();
          this.attributes[key133] = val134;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.ttl = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.preSplits = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size135 = 0;
        var _rtmp3139;
        this.streams = {};
        var _ktype136 = 0;
        var _vtype137 = 0;
        _rtmp3139 = input.readMapBegin();
        _ktype136 = _rtmp3139.ktype;
        _vtype137 = _rtmp3139.vtype;
        _size135 = _rtmp3139.size;
        for (var _i140 = 0; _i140 < _size135; ++_i140)
        {
          var key141 = null;
          var val142 = null;
          key141 = input.readString();
          val142 = new ttypes.StreamSpec();
          val142.read(input);
          this.streams[key141] = val142;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size143 = 0;
        var _rtmp3147;
        this.globalSecondaryIndexes = {};
        var _ktype144 = 0;
        var _vtype145 = 0;
        _rtmp3147 = input.readMapBegin();
        _ktype144 = _rtmp3147.ktype;
        _vtype145 = _rtmp3147.vtype;
        _size143 = _rtmp3147.size;
        for (var _i148 = 0; _i148 < _size143; ++_i148)
        {
          var key149 = null;
          var val150 = null;
          key149 = input.readString();
          val150 = new ttypes.GlobalSecondaryIndexSpec();
          val150.read(input);
          this.globalSecondaryIndexes[key149] = val150;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableSchema.prototype.write = function(output) {
  output.writeStructBegin('TableSchema');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.entityGroup !== null && this.entityGroup !== undefined) {
    output.writeFieldBegin('entityGroup', Thrift.Type.STRUCT, 2);
    this.entityGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.primaryIndex !== null && this.primaryIndex !== undefined) {
    output.writeFieldBegin('primaryIndex', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.primaryIndex.length);
    for (var iter151 in this.primaryIndex)
    {
      if (this.primaryIndex.hasOwnProperty(iter151))
      {
        iter151 = this.primaryIndex[iter151];
        iter151.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.secondaryIndexes !== null && this.secondaryIndexes !== undefined) {
    output.writeFieldBegin('secondaryIndexes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.secondaryIndexes));
    for (var kiter152 in this.secondaryIndexes)
    {
      if (this.secondaryIndexes.hasOwnProperty(kiter152))
      {
        var viter153 = this.secondaryIndexes[kiter152];
        output.writeString(kiter152);
        viter153.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.attributes));
    for (var kiter154 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter154))
      {
        var viter155 = this.attributes[kiter154];
        output.writeString(kiter154);
        output.writeI32(viter155);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ttl !== null && this.ttl !== undefined) {
    output.writeFieldBegin('ttl', Thrift.Type.I32, 6);
    output.writeI32(this.ttl);
    output.writeFieldEnd();
  }
  if (this.preSplits !== null && this.preSplits !== undefined) {
    output.writeFieldBegin('preSplits', Thrift.Type.I32, 7);
    output.writeI32(this.preSplits);
    output.writeFieldEnd();
  }
  if (this.streams !== null && this.streams !== undefined) {
    output.writeFieldBegin('streams', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.streams));
    for (var kiter156 in this.streams)
    {
      if (this.streams.hasOwnProperty(kiter156))
      {
        var viter157 = this.streams[kiter156];
        output.writeString(kiter156);
        viter157.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.globalSecondaryIndexes !== null && this.globalSecondaryIndexes !== undefined) {
    output.writeFieldBegin('globalSecondaryIndexes', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.globalSecondaryIndexes));
    for (var kiter158 in this.globalSecondaryIndexes)
    {
      if (this.globalSecondaryIndexes.hasOwnProperty(kiter158))
      {
        var viter159 = this.globalSecondaryIndexes[kiter158];
        output.writeString(kiter158);
        viter159.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableMetadata = module.exports.TableMetadata = function(args) {
  this.tableId = null;
  this.developerId = null;
  this.appAcl = null;
  this.quota = null;
  this.throughput = null;
  this.description = null;
  this.stream = null;
  this.enableSysSnapshot = null;
  this.exceededThroughput = null;
  this.slaveThroughput = null;
  this.exceededSlaveThroughput = null;
  this.acl = null;
  this.spaceId = null;
  this.enableEgAcl = false;
  if (args) {
    if (args.tableId !== undefined) {
      this.tableId = args.tableId;
    }
    if (args.developerId !== undefined) {
      this.developerId = args.developerId;
    }
    if (args.appAcl !== undefined) {
      this.appAcl = args.appAcl;
    }
    if (args.quota !== undefined) {
      this.quota = args.quota;
    }
    if (args.throughput !== undefined) {
      this.throughput = args.throughput;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
    if (args.enableSysSnapshot !== undefined) {
      this.enableSysSnapshot = args.enableSysSnapshot;
    }
    if (args.exceededThroughput !== undefined) {
      this.exceededThroughput = args.exceededThroughput;
    }
    if (args.slaveThroughput !== undefined) {
      this.slaveThroughput = args.slaveThroughput;
    }
    if (args.exceededSlaveThroughput !== undefined) {
      this.exceededSlaveThroughput = args.exceededSlaveThroughput;
    }
    if (args.acl !== undefined) {
      this.acl = args.acl;
    }
    if (args.spaceId !== undefined) {
      this.spaceId = args.spaceId;
    }
    if (args.enableEgAcl !== undefined) {
      this.enableEgAcl = args.enableEgAcl;
    }
  }
};
TableMetadata.prototype = {};
TableMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.developerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size160 = 0;
        var _rtmp3164;
        this.appAcl = {};
        var _ktype161 = 0;
        var _vtype162 = 0;
        _rtmp3164 = input.readMapBegin();
        _ktype161 = _rtmp3164.ktype;
        _vtype162 = _rtmp3164.vtype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var key166 = null;
          var val167 = null;
          key166 = input.readString();
          var _size168 = 0;
          var _rtmp3172;
          val167 = [];
          var _etype171 = 0;
          _rtmp3172 = input.readListBegin();
          _etype171 = _rtmp3172.etype;
          _size168 = _rtmp3172.size;
          for (var _i173 = 0; _i173 < _size168; ++_i173)
          {
            var elem174 = null;
            elem174 = input.readI32();
            val167.push(elem174);
          }
          input.readListEnd();
          this.appAcl[key166] = val167;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.quota = new ttypes.TableQuota();
        this.quota.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.throughput = new ttypes.ProvisionThroughput();
        this.throughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.stream = new ttypes.StreamSpec();
        this.stream.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.enableSysSnapshot = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.exceededThroughput = new ttypes.ProvisionThroughput();
        this.exceededThroughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.slaveThroughput = new ttypes.ProvisionThroughput();
        this.slaveThroughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.exceededSlaveThroughput = new ttypes.ProvisionThroughput();
        this.exceededSlaveThroughput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.MAP) {
        var _size175 = 0;
        var _rtmp3179;
        this.acl = {};
        var _ktype176 = 0;
        var _vtype177 = 0;
        _rtmp3179 = input.readMapBegin();
        _ktype176 = _rtmp3179.ktype;
        _vtype177 = _rtmp3179.vtype;
        _size175 = _rtmp3179.size;
        for (var _i180 = 0; _i180 < _size175; ++_i180)
        {
          var key181 = null;
          var val182 = null;
          key181 = input.readString();
          var _size183 = 0;
          var _rtmp3187;
          val182 = [];
          var _etype186 = 0;
          _rtmp3187 = input.readListBegin();
          _etype186 = _rtmp3187.etype;
          _size183 = _rtmp3187.size;
          for (var _i188 = 0; _i188 < _size183; ++_i188)
          {
            var elem189 = null;
            elem189 = input.readI32();
            val182.push(elem189);
          }
          input.readListEnd();
          this.acl[key181] = val182;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.spaceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.enableEgAcl = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableMetadata.prototype.write = function(output) {
  output.writeStructBegin('TableMetadata');
  if (this.tableId !== null && this.tableId !== undefined) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 1);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  if (this.developerId !== null && this.developerId !== undefined) {
    output.writeFieldBegin('developerId', Thrift.Type.STRING, 2);
    output.writeString(this.developerId);
    output.writeFieldEnd();
  }
  if (this.appAcl !== null && this.appAcl !== undefined) {
    output.writeFieldBegin('appAcl', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.appAcl));
    for (var kiter190 in this.appAcl)
    {
      if (this.appAcl.hasOwnProperty(kiter190))
      {
        var viter191 = this.appAcl[kiter190];
        output.writeString(kiter190);
        output.writeListBegin(Thrift.Type.I32, viter191.length);
        for (var iter192 in viter191)
        {
          if (viter191.hasOwnProperty(iter192))
          {
            iter192 = viter191[iter192];
            output.writeI32(iter192);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.quota !== null && this.quota !== undefined) {
    output.writeFieldBegin('quota', Thrift.Type.STRUCT, 4);
    this.quota.write(output);
    output.writeFieldEnd();
  }
  if (this.throughput !== null && this.throughput !== undefined) {
    output.writeFieldBegin('throughput', Thrift.Type.STRUCT, 5);
    this.throughput.write(output);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.STRUCT, 7);
    this.stream.write(output);
    output.writeFieldEnd();
  }
  if (this.enableSysSnapshot !== null && this.enableSysSnapshot !== undefined) {
    output.writeFieldBegin('enableSysSnapshot', Thrift.Type.BOOL, 8);
    output.writeBool(this.enableSysSnapshot);
    output.writeFieldEnd();
  }
  if (this.exceededThroughput !== null && this.exceededThroughput !== undefined) {
    output.writeFieldBegin('exceededThroughput', Thrift.Type.STRUCT, 9);
    this.exceededThroughput.write(output);
    output.writeFieldEnd();
  }
  if (this.slaveThroughput !== null && this.slaveThroughput !== undefined) {
    output.writeFieldBegin('slaveThroughput', Thrift.Type.STRUCT, 10);
    this.slaveThroughput.write(output);
    output.writeFieldEnd();
  }
  if (this.exceededSlaveThroughput !== null && this.exceededSlaveThroughput !== undefined) {
    output.writeFieldBegin('exceededSlaveThroughput', Thrift.Type.STRUCT, 11);
    this.exceededSlaveThroughput.write(output);
    output.writeFieldEnd();
  }
  if (this.acl !== null && this.acl !== undefined) {
    output.writeFieldBegin('acl', Thrift.Type.MAP, 12);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.acl));
    for (var kiter193 in this.acl)
    {
      if (this.acl.hasOwnProperty(kiter193))
      {
        var viter194 = this.acl[kiter193];
        output.writeString(kiter193);
        output.writeListBegin(Thrift.Type.I32, viter194.length);
        for (var iter195 in viter194)
        {
          if (viter194.hasOwnProperty(iter195))
          {
            iter195 = viter194[iter195];
            output.writeI32(iter195);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.spaceId !== null && this.spaceId !== undefined) {
    output.writeFieldBegin('spaceId', Thrift.Type.STRING, 13);
    output.writeString(this.spaceId);
    output.writeFieldEnd();
  }
  if (this.enableEgAcl !== null && this.enableEgAcl !== undefined) {
    output.writeFieldBegin('enableEgAcl', Thrift.Type.BOOL, 14);
    output.writeBool(this.enableEgAcl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableSpec = module.exports.TableSpec = function(args) {
  this.schema = null;
  this.metadata = null;
  if (args) {
    if (args.schema !== undefined) {
      this.schema = args.schema;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
  }
};
TableSpec.prototype = {};
TableSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new ttypes.TableSchema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new ttypes.TableMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableSpec.prototype.write = function(output) {
  output.writeStructBegin('TableSpec');
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 1);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableStatus = module.exports.TableStatus = function(args) {
  this.state = null;
  this.createTime = null;
  this.alterTime = null;
  this.statTime = null;
  this.size = null;
  this.rowCount = null;
  if (args) {
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.alterTime !== undefined) {
      this.alterTime = args.alterTime;
    }
    if (args.statTime !== undefined) {
      this.statTime = args.statTime;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.rowCount !== undefined) {
      this.rowCount = args.rowCount;
    }
  }
};
TableStatus.prototype = {};
TableStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.alterTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.statTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.rowCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableStatus.prototype.write = function(output) {
  output.writeStructBegin('TableStatus');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 1);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 2);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.alterTime !== null && this.alterTime !== undefined) {
    output.writeFieldBegin('alterTime', Thrift.Type.I64, 3);
    output.writeI64(this.alterTime);
    output.writeFieldEnd();
  }
  if (this.statTime !== null && this.statTime !== undefined) {
    output.writeFieldBegin('statTime', Thrift.Type.I64, 4);
    output.writeI64(this.statTime);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 5);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.rowCount !== null && this.rowCount !== undefined) {
    output.writeFieldBegin('rowCount', Thrift.Type.I64, 6);
    output.writeI64(this.rowCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableInfo = module.exports.TableInfo = function(args) {
  this.name = null;
  this.spec = null;
  this.status = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.spec !== undefined) {
      this.spec = args.spec;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
TableInfo.prototype = {};
TableInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new ttypes.TableSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TableStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableInfo.prototype.write = function(output) {
  output.writeStructBegin('TableInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 3);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleCondition = module.exports.SimpleCondition = function(args) {
  this.operator = null;
  this.field = null;
  this.value = null;
  this.rowExist = null;
  if (args) {
    if (args.operator !== undefined) {
      this.operator = args.operator;
    }
    if (args.field !== undefined) {
      this.field = args.field;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.rowExist !== undefined) {
      this.rowExist = args.rowExist;
    }
  }
};
SimpleCondition.prototype = {};
SimpleCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.operator = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.Datum();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.rowExist = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleCondition.prototype.write = function(output) {
  output.writeStructBegin('SimpleCondition');
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.I32, 1);
    output.writeI32(this.operator);
    output.writeFieldEnd();
  }
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 2);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 3);
    this.value.write(output);
    output.writeFieldEnd();
  }
  if (this.rowExist !== null && this.rowExist !== undefined) {
    output.writeFieldBegin('rowExist', Thrift.Type.BOOL, 4);
    output.writeBool(this.rowExist);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableSplit = module.exports.TableSplit = function(args) {
  this.startKey = null;
  this.stopKey = null;
  if (args) {
    if (args.startKey !== undefined) {
      this.startKey = args.startKey;
    }
    if (args.stopKey !== undefined) {
      this.stopKey = args.stopKey;
    }
  }
};
TableSplit.prototype = {};
TableSplit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size196 = 0;
        var _rtmp3200;
        this.startKey = {};
        var _ktype197 = 0;
        var _vtype198 = 0;
        _rtmp3200 = input.readMapBegin();
        _ktype197 = _rtmp3200.ktype;
        _vtype198 = _rtmp3200.vtype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var key202 = null;
          var val203 = null;
          key202 = input.readString();
          val203 = new ttypes.Datum();
          val203.read(input);
          this.startKey[key202] = val203;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size204 = 0;
        var _rtmp3208;
        this.stopKey = {};
        var _ktype205 = 0;
        var _vtype206 = 0;
        _rtmp3208 = input.readMapBegin();
        _ktype205 = _rtmp3208.ktype;
        _vtype206 = _rtmp3208.vtype;
        _size204 = _rtmp3208.size;
        for (var _i209 = 0; _i209 < _size204; ++_i209)
        {
          var key210 = null;
          var val211 = null;
          key210 = input.readString();
          val211 = new ttypes.Datum();
          val211.read(input);
          this.stopKey[key210] = val211;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableSplit.prototype.write = function(output) {
  output.writeStructBegin('TableSplit');
  if (this.startKey !== null && this.startKey !== undefined) {
    output.writeFieldBegin('startKey', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.startKey));
    for (var kiter212 in this.startKey)
    {
      if (this.startKey.hasOwnProperty(kiter212))
      {
        var viter213 = this.startKey[kiter212];
        output.writeString(kiter212);
        viter213.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.stopKey !== null && this.stopKey !== undefined) {
    output.writeFieldBegin('stopKey', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.stopKey));
    for (var kiter214 in this.stopKey)
    {
      if (this.stopKey.hasOwnProperty(kiter214))
      {
        var viter215 = this.stopKey[kiter214];
        output.writeString(kiter214);
        viter215.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetRequest = module.exports.GetRequest = function(args) {
  this.tableName = null;
  this.keys = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
GetRequest.prototype = {};
GetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size216 = 0;
        var _rtmp3220;
        this.keys = {};
        var _ktype217 = 0;
        var _vtype218 = 0;
        _rtmp3220 = input.readMapBegin();
        _ktype217 = _rtmp3220.ktype;
        _vtype218 = _rtmp3220.vtype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var key222 = null;
          var val223 = null;
          key222 = input.readString();
          val223 = new ttypes.Datum();
          val223.read(input);
          this.keys[key222] = val223;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.attributes = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = input.readString();
          this.attributes.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRequest.prototype.write = function(output) {
  output.writeStructBegin('GetRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.keys));
    for (var kiter231 in this.keys)
    {
      if (this.keys.hasOwnProperty(kiter231))
      {
        var viter232 = this.keys[kiter231];
        output.writeString(kiter231);
        viter232.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
    for (var iter233 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter233))
      {
        iter233 = this.attributes[iter233];
        output.writeString(iter233);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetResult = module.exports.GetResult = function(args) {
  this.item = null;
  if (args) {
    if (args.item !== undefined) {
      this.item = args.item;
    }
  }
};
GetResult.prototype = {};
GetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size234 = 0;
        var _rtmp3238;
        this.item = {};
        var _ktype235 = 0;
        var _vtype236 = 0;
        _rtmp3238 = input.readMapBegin();
        _ktype235 = _rtmp3238.ktype;
        _vtype236 = _rtmp3238.vtype;
        _size234 = _rtmp3238.size;
        for (var _i239 = 0; _i239 < _size234; ++_i239)
        {
          var key240 = null;
          var val241 = null;
          key240 = input.readString();
          val241 = new ttypes.Datum();
          val241.read(input);
          this.item[key240] = val241;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetResult.prototype.write = function(output) {
  output.writeStructBegin('GetResult');
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.item));
    for (var kiter242 in this.item)
    {
      if (this.item.hasOwnProperty(kiter242))
      {
        var viter243 = this.item[kiter242];
        output.writeString(kiter242);
        viter243.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PutRequest = module.exports.PutRequest = function(args) {
  this.tableName = null;
  this.record = null;
  this.condition = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.record !== undefined) {
      this.record = args.record;
    }
    if (args.condition !== undefined) {
      this.condition = args.condition;
    }
  }
};
PutRequest.prototype = {};
PutRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size244 = 0;
        var _rtmp3248;
        this.record = {};
        var _ktype245 = 0;
        var _vtype246 = 0;
        _rtmp3248 = input.readMapBegin();
        _ktype245 = _rtmp3248.ktype;
        _vtype246 = _rtmp3248.vtype;
        _size244 = _rtmp3248.size;
        for (var _i249 = 0; _i249 < _size244; ++_i249)
        {
          var key250 = null;
          var val251 = null;
          key250 = input.readString();
          val251 = new ttypes.Datum();
          val251.read(input);
          this.record[key250] = val251;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new ttypes.SimpleCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PutRequest.prototype.write = function(output) {
  output.writeStructBegin('PutRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.record !== null && this.record !== undefined) {
    output.writeFieldBegin('record', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.record));
    for (var kiter252 in this.record)
    {
      if (this.record.hasOwnProperty(kiter252))
      {
        var viter253 = this.record[kiter252];
        output.writeString(kiter252);
        viter253.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 3);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PutResult = module.exports.PutResult = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PutResult.prototype = {};
PutResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PutResult.prototype.write = function(output) {
  output.writeStructBegin('PutResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IncrementRequest = module.exports.IncrementRequest = function(args) {
  this.tableName = null;
  this.keys = null;
  this.amounts = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.amounts !== undefined) {
      this.amounts = args.amounts;
    }
  }
};
IncrementRequest.prototype = {};
IncrementRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size254 = 0;
        var _rtmp3258;
        this.keys = {};
        var _ktype255 = 0;
        var _vtype256 = 0;
        _rtmp3258 = input.readMapBegin();
        _ktype255 = _rtmp3258.ktype;
        _vtype256 = _rtmp3258.vtype;
        _size254 = _rtmp3258.size;
        for (var _i259 = 0; _i259 < _size254; ++_i259)
        {
          var key260 = null;
          var val261 = null;
          key260 = input.readString();
          val261 = new ttypes.Datum();
          val261.read(input);
          this.keys[key260] = val261;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size262 = 0;
        var _rtmp3266;
        this.amounts = {};
        var _ktype263 = 0;
        var _vtype264 = 0;
        _rtmp3266 = input.readMapBegin();
        _ktype263 = _rtmp3266.ktype;
        _vtype264 = _rtmp3266.vtype;
        _size262 = _rtmp3266.size;
        for (var _i267 = 0; _i267 < _size262; ++_i267)
        {
          var key268 = null;
          var val269 = null;
          key268 = input.readString();
          val269 = new ttypes.Datum();
          val269.read(input);
          this.amounts[key268] = val269;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IncrementRequest.prototype.write = function(output) {
  output.writeStructBegin('IncrementRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.keys));
    for (var kiter270 in this.keys)
    {
      if (this.keys.hasOwnProperty(kiter270))
      {
        var viter271 = this.keys[kiter270];
        output.writeString(kiter270);
        viter271.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.amounts !== null && this.amounts !== undefined) {
    output.writeFieldBegin('amounts', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.amounts));
    for (var kiter272 in this.amounts)
    {
      if (this.amounts.hasOwnProperty(kiter272))
      {
        var viter273 = this.amounts[kiter272];
        output.writeString(kiter272);
        viter273.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IncrementResult = module.exports.IncrementResult = function(args) {
  this.amounts = null;
  if (args) {
    if (args.amounts !== undefined) {
      this.amounts = args.amounts;
    }
  }
};
IncrementResult.prototype = {};
IncrementResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size274 = 0;
        var _rtmp3278;
        this.amounts = {};
        var _ktype275 = 0;
        var _vtype276 = 0;
        _rtmp3278 = input.readMapBegin();
        _ktype275 = _rtmp3278.ktype;
        _vtype276 = _rtmp3278.vtype;
        _size274 = _rtmp3278.size;
        for (var _i279 = 0; _i279 < _size274; ++_i279)
        {
          var key280 = null;
          var val281 = null;
          key280 = input.readString();
          val281 = new ttypes.Datum();
          val281.read(input);
          this.amounts[key280] = val281;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IncrementResult.prototype.write = function(output) {
  output.writeStructBegin('IncrementResult');
  if (this.amounts !== null && this.amounts !== undefined) {
    output.writeFieldBegin('amounts', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.amounts));
    for (var kiter282 in this.amounts)
    {
      if (this.amounts.hasOwnProperty(kiter282))
      {
        var viter283 = this.amounts[kiter282];
        output.writeString(kiter282);
        viter283.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RemoveRequest = module.exports.RemoveRequest = function(args) {
  this.tableName = null;
  this.keys = null;
  this.attributes = null;
  this.condition = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.condition !== undefined) {
      this.condition = args.condition;
    }
  }
};
RemoveRequest.prototype = {};
RemoveRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size284 = 0;
        var _rtmp3288;
        this.keys = {};
        var _ktype285 = 0;
        var _vtype286 = 0;
        _rtmp3288 = input.readMapBegin();
        _ktype285 = _rtmp3288.ktype;
        _vtype286 = _rtmp3288.vtype;
        _size284 = _rtmp3288.size;
        for (var _i289 = 0; _i289 < _size284; ++_i289)
        {
          var key290 = null;
          var val291 = null;
          key290 = input.readString();
          val291 = new ttypes.Datum();
          val291.read(input);
          this.keys[key290] = val291;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size292 = 0;
        var _rtmp3296;
        this.attributes = [];
        var _etype295 = 0;
        _rtmp3296 = input.readListBegin();
        _etype295 = _rtmp3296.etype;
        _size292 = _rtmp3296.size;
        for (var _i297 = 0; _i297 < _size292; ++_i297)
        {
          var elem298 = null;
          elem298 = input.readString();
          this.attributes.push(elem298);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new ttypes.SimpleCondition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveRequest.prototype.write = function(output) {
  output.writeStructBegin('RemoveRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.keys));
    for (var kiter299 in this.keys)
    {
      if (this.keys.hasOwnProperty(kiter299))
      {
        var viter300 = this.keys[kiter299];
        output.writeString(kiter299);
        viter300.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
    for (var iter301 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter301))
      {
        iter301 = this.attributes[iter301];
        output.writeString(iter301);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 4);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RemoveResult = module.exports.RemoveResult = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
RemoveResult.prototype = {};
RemoveResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveResult.prototype.write = function(output) {
  output.writeStructBegin('RemoveResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Request = module.exports.Request = function(args) {
  this.getRequest = null;
  this.putRequest = null;
  this.incrementRequest = null;
  this.removeRequest = null;
  if (args) {
    if (args.getRequest !== undefined) {
      this.getRequest = args.getRequest;
    }
    if (args.putRequest !== undefined) {
      this.putRequest = args.putRequest;
    }
    if (args.incrementRequest !== undefined) {
      this.incrementRequest = args.incrementRequest;
    }
    if (args.removeRequest !== undefined) {
      this.removeRequest = args.removeRequest;
    }
  }
};
Request.prototype = {};
Request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRequest = new ttypes.GetRequest();
        this.getRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.putRequest = new ttypes.PutRequest();
        this.putRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.incrementRequest = new ttypes.IncrementRequest();
        this.incrementRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.removeRequest = new ttypes.RemoveRequest();
        this.removeRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Request.prototype.write = function(output) {
  output.writeStructBegin('Request');
  if (this.getRequest !== null && this.getRequest !== undefined) {
    output.writeFieldBegin('getRequest', Thrift.Type.STRUCT, 1);
    this.getRequest.write(output);
    output.writeFieldEnd();
  }
  if (this.putRequest !== null && this.putRequest !== undefined) {
    output.writeFieldBegin('putRequest', Thrift.Type.STRUCT, 2);
    this.putRequest.write(output);
    output.writeFieldEnd();
  }
  if (this.incrementRequest !== null && this.incrementRequest !== undefined) {
    output.writeFieldBegin('incrementRequest', Thrift.Type.STRUCT, 3);
    this.incrementRequest.write(output);
    output.writeFieldEnd();
  }
  if (this.removeRequest !== null && this.removeRequest !== undefined) {
    output.writeFieldBegin('removeRequest', Thrift.Type.STRUCT, 4);
    this.removeRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanAction = module.exports.ScanAction = function(args) {
  this.action = null;
  this.request = null;
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
ScanAction.prototype = {};
ScanAction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.Request();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanAction.prototype.write = function(output) {
  output.writeStructBegin('ScanAction');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanRequest = module.exports.ScanRequest = function(args) {
  this.tableName = null;
  this.indexName = null;
  this.startKey = null;
  this.stopKey = null;
  this.attributes = null;
  this.condition = null;
  this.limit = 10;
  this.reverse = false;
  this.inGlobalOrder = true;
  this.cacheResult = true;
  this.lookAheadStep = 0;
  this.action = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.indexName !== undefined) {
      this.indexName = args.indexName;
    }
    if (args.startKey !== undefined) {
      this.startKey = args.startKey;
    }
    if (args.stopKey !== undefined) {
      this.stopKey = args.stopKey;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.condition !== undefined) {
      this.condition = args.condition;
    }
    if (args.limit !== undefined) {
      this.limit = args.limit;
    }
    if (args.reverse !== undefined) {
      this.reverse = args.reverse;
    }
    if (args.inGlobalOrder !== undefined) {
      this.inGlobalOrder = args.inGlobalOrder;
    }
    if (args.cacheResult !== undefined) {
      this.cacheResult = args.cacheResult;
    }
    if (args.lookAheadStep !== undefined) {
      this.lookAheadStep = args.lookAheadStep;
    }
    if (args.action !== undefined) {
      this.action = args.action;
    }
  }
};
ScanRequest.prototype = {};
ScanRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.indexName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size302 = 0;
        var _rtmp3306;
        this.startKey = {};
        var _ktype303 = 0;
        var _vtype304 = 0;
        _rtmp3306 = input.readMapBegin();
        _ktype303 = _rtmp3306.ktype;
        _vtype304 = _rtmp3306.vtype;
        _size302 = _rtmp3306.size;
        for (var _i307 = 0; _i307 < _size302; ++_i307)
        {
          var key308 = null;
          var val309 = null;
          key308 = input.readString();
          val309 = new ttypes.Datum();
          val309.read(input);
          this.startKey[key308] = val309;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size310 = 0;
        var _rtmp3314;
        this.stopKey = {};
        var _ktype311 = 0;
        var _vtype312 = 0;
        _rtmp3314 = input.readMapBegin();
        _ktype311 = _rtmp3314.ktype;
        _vtype312 = _rtmp3314.vtype;
        _size310 = _rtmp3314.size;
        for (var _i315 = 0; _i315 < _size310; ++_i315)
        {
          var key316 = null;
          var val317 = null;
          key316 = input.readString();
          val317 = new ttypes.Datum();
          val317.read(input);
          this.stopKey[key316] = val317;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size318 = 0;
        var _rtmp3322;
        this.attributes = [];
        var _etype321 = 0;
        _rtmp3322 = input.readListBegin();
        _etype321 = _rtmp3322.etype;
        _size318 = _rtmp3322.size;
        for (var _i323 = 0; _i323 < _size318; ++_i323)
        {
          var elem324 = null;
          elem324 = input.readString();
          this.attributes.push(elem324);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.condition = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.reverse = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.inGlobalOrder = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.cacheResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.lookAheadStep = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.action = new ttypes.ScanAction();
        this.action.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanRequest.prototype.write = function(output) {
  output.writeStructBegin('ScanRequest');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.indexName !== null && this.indexName !== undefined) {
    output.writeFieldBegin('indexName', Thrift.Type.STRING, 2);
    output.writeString(this.indexName);
    output.writeFieldEnd();
  }
  if (this.startKey !== null && this.startKey !== undefined) {
    output.writeFieldBegin('startKey', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.startKey));
    for (var kiter325 in this.startKey)
    {
      if (this.startKey.hasOwnProperty(kiter325))
      {
        var viter326 = this.startKey[kiter325];
        output.writeString(kiter325);
        viter326.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.stopKey !== null && this.stopKey !== undefined) {
    output.writeFieldBegin('stopKey', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.stopKey));
    for (var kiter327 in this.stopKey)
    {
      if (this.stopKey.hasOwnProperty(kiter327))
      {
        var viter328 = this.stopKey[kiter327];
        output.writeString(kiter327);
        viter328.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.attributes.length);
    for (var iter329 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter329))
      {
        iter329 = this.attributes[iter329];
        output.writeString(iter329);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRING, 6);
    output.writeString(this.condition);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 7);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.reverse !== null && this.reverse !== undefined) {
    output.writeFieldBegin('reverse', Thrift.Type.BOOL, 8);
    output.writeBool(this.reverse);
    output.writeFieldEnd();
  }
  if (this.inGlobalOrder !== null && this.inGlobalOrder !== undefined) {
    output.writeFieldBegin('inGlobalOrder', Thrift.Type.BOOL, 9);
    output.writeBool(this.inGlobalOrder);
    output.writeFieldEnd();
  }
  if (this.cacheResult !== null && this.cacheResult !== undefined) {
    output.writeFieldBegin('cacheResult', Thrift.Type.BOOL, 10);
    output.writeBool(this.cacheResult);
    output.writeFieldEnd();
  }
  if (this.lookAheadStep !== null && this.lookAheadStep !== undefined) {
    output.writeFieldBegin('lookAheadStep', Thrift.Type.I32, 11);
    output.writeI32(this.lookAheadStep);
    output.writeFieldEnd();
  }
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.STRUCT, 12);
    this.action.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanResult = module.exports.ScanResult = function(args) {
  this.nextStartKey = null;
  this.records = null;
  this.throttled = null;
  if (args) {
    if (args.nextStartKey !== undefined) {
      this.nextStartKey = args.nextStartKey;
    }
    if (args.records !== undefined) {
      this.records = args.records;
    }
    if (args.throttled !== undefined) {
      this.throttled = args.throttled;
    }
  }
};
ScanResult.prototype = {};
ScanResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size330 = 0;
        var _rtmp3334;
        this.nextStartKey = {};
        var _ktype331 = 0;
        var _vtype332 = 0;
        _rtmp3334 = input.readMapBegin();
        _ktype331 = _rtmp3334.ktype;
        _vtype332 = _rtmp3334.vtype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var key336 = null;
          var val337 = null;
          key336 = input.readString();
          val337 = new ttypes.Datum();
          val337.read(input);
          this.nextStartKey[key336] = val337;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size338 = 0;
        var _rtmp3342;
        this.records = [];
        var _etype341 = 0;
        _rtmp3342 = input.readListBegin();
        _etype341 = _rtmp3342.etype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          var elem344 = null;
          var _size345 = 0;
          var _rtmp3349;
          elem344 = {};
          var _ktype346 = 0;
          var _vtype347 = 0;
          _rtmp3349 = input.readMapBegin();
          _ktype346 = _rtmp3349.ktype;
          _vtype347 = _rtmp3349.vtype;
          _size345 = _rtmp3349.size;
          for (var _i350 = 0; _i350 < _size345; ++_i350)
          {
            var key351 = null;
            var val352 = null;
            key351 = input.readString();
            val352 = new ttypes.Datum();
            val352.read(input);
            elem344[key351] = val352;
          }
          input.readMapEnd();
          this.records.push(elem344);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.throttled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanResult.prototype.write = function(output) {
  output.writeStructBegin('ScanResult');
  if (this.nextStartKey !== null && this.nextStartKey !== undefined) {
    output.writeFieldBegin('nextStartKey', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.nextStartKey));
    for (var kiter353 in this.nextStartKey)
    {
      if (this.nextStartKey.hasOwnProperty(kiter353))
      {
        var viter354 = this.nextStartKey[kiter353];
        output.writeString(kiter353);
        viter354.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.records !== null && this.records !== undefined) {
    output.writeFieldBegin('records', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.MAP, this.records.length);
    for (var iter355 in this.records)
    {
      if (this.records.hasOwnProperty(iter355))
      {
        iter355 = this.records[iter355];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(iter355));
        for (var kiter356 in iter355)
        {
          if (iter355.hasOwnProperty(kiter356))
          {
            var viter357 = iter355[kiter356];
            output.writeString(kiter356);
            viter357.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.throttled !== null && this.throttled !== undefined) {
    output.writeFieldBegin('throttled', Thrift.Type.BOOL, 3);
    output.writeBool(this.throttled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchRequestItem = module.exports.BatchRequestItem = function(args) {
  this.action = null;
  this.request = null;
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
BatchRequestItem.prototype = {};
BatchRequestItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.Request();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchRequestItem.prototype.write = function(output) {
  output.writeStructBegin('BatchRequestItem');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Result = module.exports.Result = function(args) {
  this.getResult = null;
  this.putResult = null;
  this.incrementResult = null;
  this.removeResult = null;
  if (args) {
    if (args.getResult !== undefined) {
      this.getResult = args.getResult;
    }
    if (args.putResult !== undefined) {
      this.putResult = args.putResult;
    }
    if (args.incrementResult !== undefined) {
      this.incrementResult = args.incrementResult;
    }
    if (args.removeResult !== undefined) {
      this.removeResult = args.removeResult;
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getResult = new ttypes.GetResult();
        this.getResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.putResult = new ttypes.PutResult();
        this.putResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.incrementResult = new ttypes.IncrementResult();
        this.incrementResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.removeResult = new ttypes.RemoveResult();
        this.removeResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.getResult !== null && this.getResult !== undefined) {
    output.writeFieldBegin('getResult', Thrift.Type.STRUCT, 1);
    this.getResult.write(output);
    output.writeFieldEnd();
  }
  if (this.putResult !== null && this.putResult !== undefined) {
    output.writeFieldBegin('putResult', Thrift.Type.STRUCT, 2);
    this.putResult.write(output);
    output.writeFieldEnd();
  }
  if (this.incrementResult !== null && this.incrementResult !== undefined) {
    output.writeFieldBegin('incrementResult', Thrift.Type.STRUCT, 3);
    this.incrementResult.write(output);
    output.writeFieldEnd();
  }
  if (this.removeResult !== null && this.removeResult !== undefined) {
    output.writeFieldBegin('removeResult', Thrift.Type.STRUCT, 4);
    this.removeResult.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchResultItem = module.exports.BatchResultItem = function(args) {
  this.action = null;
  this.success = null;
  this.result = null;
  this.serviceException = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.serviceException = args;
    return;
  }
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.serviceException !== undefined) {
      this.serviceException = args.serviceException;
    }
  }
};
BatchResultItem.prototype = {};
BatchResultItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceException = new Errors_ttypes.ServiceException();
        this.serviceException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchResultItem.prototype.write = function(output) {
  output.writeStructBegin('BatchResultItem');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 2);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 3);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceException !== null && this.serviceException !== undefined) {
    output.writeFieldBegin('serviceException', Thrift.Type.STRUCT, 4);
    this.serviceException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchRequest = module.exports.BatchRequest = function(args) {
  this.items = null;
  if (args) {
    if (args.items !== undefined) {
      this.items = args.items;
    }
  }
};
BatchRequest.prototype = {};
BatchRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size358 = 0;
        var _rtmp3362;
        this.items = [];
        var _etype361 = 0;
        _rtmp3362 = input.readListBegin();
        _etype361 = _rtmp3362.etype;
        _size358 = _rtmp3362.size;
        for (var _i363 = 0; _i363 < _size358; ++_i363)
        {
          var elem364 = null;
          elem364 = new ttypes.BatchRequestItem();
          elem364.read(input);
          this.items.push(elem364);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchRequest.prototype.write = function(output) {
  output.writeStructBegin('BatchRequest');
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter365 in this.items)
    {
      if (this.items.hasOwnProperty(iter365))
      {
        iter365 = this.items[iter365];
        iter365.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchResult = module.exports.BatchResult = function(args) {
  this.items = null;
  if (args) {
    if (args.items !== undefined) {
      this.items = args.items;
    }
  }
};
BatchResult.prototype = {};
BatchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size366 = 0;
        var _rtmp3370;
        this.items = [];
        var _etype369 = 0;
        _rtmp3370 = input.readListBegin();
        _etype369 = _rtmp3370.etype;
        _size366 = _rtmp3370.size;
        for (var _i371 = 0; _i371 < _size366; ++_i371)
        {
          var elem372 = null;
          elem372 = new ttypes.BatchResultItem();
          elem372.read(input);
          this.items.push(elem372);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchResult.prototype.write = function(output) {
  output.writeStructBegin('BatchResult');
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter373 in this.items)
    {
      if (this.items.hasOwnProperty(iter373))
      {
        iter373 = this.items[iter373];
        iter373.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InternalMutationLogEntry = module.exports.InternalMutationLogEntry = function(args) {
  this.record = null;
  this.type = null;
  this.rowDeleted = null;
  if (args) {
    if (args.record !== undefined) {
      this.record = args.record;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.rowDeleted !== undefined) {
      this.rowDeleted = args.rowDeleted;
    }
  }
};
InternalMutationLogEntry.prototype = {};
InternalMutationLogEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size374 = 0;
        var _rtmp3378;
        this.record = {};
        var _ktype375 = 0;
        var _vtype376 = 0;
        _rtmp3378 = input.readMapBegin();
        _ktype375 = _rtmp3378.ktype;
        _vtype376 = _rtmp3378.vtype;
        _size374 = _rtmp3378.size;
        for (var _i379 = 0; _i379 < _size374; ++_i379)
        {
          var key380 = null;
          var val381 = null;
          key380 = input.readString();
          val381 = input.readBinary();
          this.record[key380] = val381;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.rowDeleted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InternalMutationLogEntry.prototype.write = function(output) {
  output.writeStructBegin('InternalMutationLogEntry');
  if (this.record !== null && this.record !== undefined) {
    output.writeFieldBegin('record', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.record));
    for (var kiter382 in this.record)
    {
      if (this.record.hasOwnProperty(kiter382))
      {
        var viter383 = this.record[kiter382];
        output.writeString(kiter382);
        output.writeBinary(viter383);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.rowDeleted !== null && this.rowDeleted !== undefined) {
    output.writeFieldBegin('rowDeleted', Thrift.Type.BOOL, 3);
    output.writeBool(this.rowDeleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MutationLogEntry = module.exports.MutationLogEntry = function(args) {
  this.record = null;
  this.type = null;
  this.rowDeleted = null;
  this.timestamp = null;
  if (args) {
    if (args.record !== undefined) {
      this.record = args.record;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.rowDeleted !== undefined) {
      this.rowDeleted = args.rowDeleted;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
  }
};
MutationLogEntry.prototype = {};
MutationLogEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size384 = 0;
        var _rtmp3388;
        this.record = {};
        var _ktype385 = 0;
        var _vtype386 = 0;
        _rtmp3388 = input.readMapBegin();
        _ktype385 = _rtmp3388.ktype;
        _vtype386 = _rtmp3388.vtype;
        _size384 = _rtmp3388.size;
        for (var _i389 = 0; _i389 < _size384; ++_i389)
        {
          var key390 = null;
          var val391 = null;
          key390 = input.readString();
          val391 = new ttypes.Datum();
          val391.read(input);
          this.record[key390] = val391;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.rowDeleted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutationLogEntry.prototype.write = function(output) {
  output.writeStructBegin('MutationLogEntry');
  if (this.record !== null && this.record !== undefined) {
    output.writeFieldBegin('record', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.record));
    for (var kiter392 in this.record)
    {
      if (this.record.hasOwnProperty(kiter392))
      {
        var viter393 = this.record[kiter392];
        output.writeString(kiter392);
        viter393.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.rowDeleted !== null && this.rowDeleted !== undefined) {
    output.writeFieldBegin('rowDeleted', Thrift.Type.BOOL, 3);
    output.writeBool(this.rowDeleted);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecordImage = module.exports.RecordImage = function(args) {
  this.record = null;
  this.rowDeleted = null;
  this.timestamp = null;
  if (args) {
    if (args.record !== undefined) {
      this.record = args.record;
    }
    if (args.rowDeleted !== undefined) {
      this.rowDeleted = args.rowDeleted;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
  }
};
RecordImage.prototype = {};
RecordImage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size394 = 0;
        var _rtmp3398;
        this.record = {};
        var _ktype395 = 0;
        var _vtype396 = 0;
        _rtmp3398 = input.readMapBegin();
        _ktype395 = _rtmp3398.ktype;
        _vtype396 = _rtmp3398.vtype;
        _size394 = _rtmp3398.size;
        for (var _i399 = 0; _i399 < _size394; ++_i399)
        {
          var key400 = null;
          var val401 = null;
          key400 = input.readString();
          val401 = new ttypes.Datum();
          val401.read(input);
          this.record[key400] = val401;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.rowDeleted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecordImage.prototype.write = function(output) {
  output.writeStructBegin('RecordImage');
  if (this.record !== null && this.record !== undefined) {
    output.writeFieldBegin('record', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.record));
    for (var kiter402 in this.record)
    {
      if (this.record.hasOwnProperty(kiter402))
      {
        var viter403 = this.record[kiter402];
        output.writeString(kiter402);
        viter403.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.rowDeleted !== null && this.rowDeleted !== undefined) {
    output.writeFieldBegin('rowDeleted', Thrift.Type.BOOL, 2);
    output.writeBool(this.rowDeleted);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

