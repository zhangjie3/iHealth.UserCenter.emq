//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('../thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Errors_ttypes = require('./Errors_types')
var Common_ttypes = require('./Common_types')
var Authentication_ttypes = require('./Authentication_types')
var Table_ttypes = require('./Table_types')


var BaseService = require('./BaseService')
var BaseServiceClient = BaseService.Client
var BaseServiceProcessor = BaseService.Processor
var ttypes = require('./Admin_types');
//HELPER FUNCTIONS AND STRUCTURES

AdminService_saveAppInfo_args = function(args) {
  this.appInfo = null;
  if (args) {
    if (args.appInfo !== undefined) {
      this.appInfo = args.appInfo;
    }
  }
};
AdminService_saveAppInfo_args.prototype = {};
AdminService_saveAppInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.appInfo = new ttypes.AppInfo();
        this.appInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_saveAppInfo_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_saveAppInfo_args');
  if (this.appInfo !== null && this.appInfo !== undefined) {
    output.writeFieldBegin('appInfo', Thrift.Type.STRUCT, 1);
    this.appInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_saveAppInfo_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_saveAppInfo_result.prototype = {};
AdminService_saveAppInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_saveAppInfo_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_saveAppInfo_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAppInfo_args = function(args) {
  this.appId = null;
  if (args) {
    if (args.appId !== undefined) {
      this.appId = args.appId;
    }
  }
};
AdminService_getAppInfo_args.prototype = {};
AdminService_getAppInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAppInfo_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAppInfo_args');
  if (this.appId !== null && this.appId !== undefined) {
    output.writeFieldBegin('appId', Thrift.Type.STRING, 1);
    output.writeString(this.appId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAppInfo_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getAppInfo_result.prototype = {};
AdminService_getAppInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AppInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAppInfo_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAppInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_findAllApps_args = function(args) {
};
AdminService_findAllApps_args.prototype = {};
AdminService_findAllApps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_findAllApps_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_findAllApps_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_findAllApps_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_findAllApps_result.prototype = {};
AdminService_findAllApps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size54 = 0;
        var _rtmp358;
        this.success = [];
        var _etype57 = 0;
        _rtmp358 = input.readListBegin();
        _etype57 = _rtmp358.etype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var elem60 = null;
          elem60 = new ttypes.AppInfo();
          elem60.read(input);
          this.success.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_findAllApps_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_findAllApps_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter61 in this.success)
    {
      if (this.success.hasOwnProperty(iter61))
      {
        iter61 = this.success[iter61];
        iter61.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_findAllTables_args = function(args) {
};
AdminService_findAllTables_args.prototype = {};
AdminService_findAllTables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_findAllTables_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_findAllTables_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_findAllTables_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_findAllTables_result.prototype = {};
AdminService_findAllTables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.success = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = new Table_ttypes.TableInfo();
          elem68.read(input);
          this.success.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_findAllTables_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_findAllTables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter69 in this.success)
    {
      if (this.success.hasOwnProperty(iter69))
      {
        iter69 = this.success[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_createTable_args = function(args) {
  this.tableName = null;
  this.tableSpec = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.tableSpec !== undefined) {
      this.tableSpec = args.tableSpec;
    }
  }
};
AdminService_createTable_args.prototype = {};
AdminService_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableSpec = new Table_ttypes.TableSpec();
        this.tableSpec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableSpec !== null && this.tableSpec !== undefined) {
    output.writeFieldBegin('tableSpec', Thrift.Type.STRUCT, 2);
    this.tableSpec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_createTable_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_createTable_result.prototype = {};
AdminService_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Table_ttypes.TableInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createTable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_dropTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_dropTable_args.prototype = {};
AdminService_dropTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_dropTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_dropTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_dropTable_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_dropTable_result.prototype = {};
AdminService_dropTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_dropTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_dropTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_alterTable_args = function(args) {
  this.tableName = null;
  this.tableSpec = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.tableSpec !== undefined) {
      this.tableSpec = args.tableSpec;
    }
  }
};
AdminService_alterTable_args.prototype = {};
AdminService_alterTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableSpec = new Table_ttypes.TableSpec();
        this.tableSpec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_alterTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_alterTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableSpec !== null && this.tableSpec !== undefined) {
    output.writeFieldBegin('tableSpec', Thrift.Type.STRUCT, 2);
    this.tableSpec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_alterTable_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_alterTable_result.prototype = {};
AdminService_alterTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_alterTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_alterTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_cloneTable_args = function(args) {
  this.srcName = null;
  this.destTable = null;
  this.flushTable = null;
  if (args) {
    if (args.srcName !== undefined) {
      this.srcName = args.srcName;
    }
    if (args.destTable !== undefined) {
      this.destTable = args.destTable;
    }
    if (args.flushTable !== undefined) {
      this.flushTable = args.flushTable;
    }
  }
};
AdminService_cloneTable_args.prototype = {};
AdminService_cloneTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.srcName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.destTable = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.flushTable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_cloneTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_cloneTable_args');
  if (this.srcName !== null && this.srcName !== undefined) {
    output.writeFieldBegin('srcName', Thrift.Type.STRING, 1);
    output.writeString(this.srcName);
    output.writeFieldEnd();
  }
  if (this.destTable !== null && this.destTable !== undefined) {
    output.writeFieldBegin('destTable', Thrift.Type.STRING, 2);
    output.writeString(this.destTable);
    output.writeFieldEnd();
  }
  if (this.flushTable !== null && this.flushTable !== undefined) {
    output.writeFieldBegin('flushTable', Thrift.Type.BOOL, 3);
    output.writeBool(this.flushTable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_cloneTable_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_cloneTable_result.prototype = {};
AdminService_cloneTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_cloneTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_cloneTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_disableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_disableTable_args.prototype = {};
AdminService_disableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_disableTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_disableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_disableTable_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_disableTable_result.prototype = {};
AdminService_disableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_disableTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_disableTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_enableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_enableTable_args.prototype = {};
AdminService_enableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_enableTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_enableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_enableTable_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_enableTable_result.prototype = {};
AdminService_enableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_enableTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_enableTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_describeTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_describeTable_args.prototype = {};
AdminService_describeTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_describeTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_describeTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_describeTable_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_describeTable_result.prototype = {};
AdminService_describeTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Table_ttypes.TableSpec();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_describeTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_describeTable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableStatus_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_getTableStatus_args.prototype = {};
AdminService_getTableStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableStatus_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableStatus_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableStatus_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getTableStatus_result.prototype = {};
AdminService_getTableStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Table_ttypes.TableStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableStatus_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableState_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_getTableState_args.prototype = {};
AdminService_getTableState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableState_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableState_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableState_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getTableState_result.prototype = {};
AdminService_getTableState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableState_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableSplits_args = function(args) {
  this.tableName = null;
  this.startKey = null;
  this.stopKey = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startKey !== undefined) {
      this.startKey = args.startKey;
    }
    if (args.stopKey !== undefined) {
      this.stopKey = args.stopKey;
    }
  }
};
AdminService_getTableSplits_args.prototype = {};
AdminService_getTableSplits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size70 = 0;
        var _rtmp374;
        this.startKey = {};
        var _ktype71 = 0;
        var _vtype72 = 0;
        _rtmp374 = input.readMapBegin();
        _ktype71 = _rtmp374.ktype;
        _vtype72 = _rtmp374.vtype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var key76 = null;
          var val77 = null;
          key76 = input.readString();
          val77 = new Table_ttypes.Datum();
          val77.read(input);
          this.startKey[key76] = val77;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size78 = 0;
        var _rtmp382;
        this.stopKey = {};
        var _ktype79 = 0;
        var _vtype80 = 0;
        _rtmp382 = input.readMapBegin();
        _ktype79 = _rtmp382.ktype;
        _vtype80 = _rtmp382.vtype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var key84 = null;
          var val85 = null;
          key84 = input.readString();
          val85 = new Table_ttypes.Datum();
          val85.read(input);
          this.stopKey[key84] = val85;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableSplits_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableSplits_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startKey !== null && this.startKey !== undefined) {
    output.writeFieldBegin('startKey', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.startKey));
    for (var kiter86 in this.startKey)
    {
      if (this.startKey.hasOwnProperty(kiter86))
      {
        var viter87 = this.startKey[kiter86];
        output.writeString(kiter86);
        viter87.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.stopKey !== null && this.stopKey !== undefined) {
    output.writeFieldBegin('stopKey', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.stopKey));
    for (var kiter88 in this.stopKey)
    {
      if (this.stopKey.hasOwnProperty(kiter88))
      {
        var viter89 = this.stopKey[kiter88];
        output.writeString(kiter88);
        viter89.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableSplits_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getTableSplits_result.prototype = {};
AdminService_getTableSplits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size90 = 0;
        var _rtmp394;
        this.success = [];
        var _etype93 = 0;
        _rtmp394 = input.readListBegin();
        _etype93 = _rtmp394.etype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var elem96 = null;
          elem96 = new Table_ttypes.TableSplit();
          elem96.read(input);
          this.success.push(elem96);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableSplits_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableSplits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter97 in this.success)
    {
      if (this.success.hasOwnProperty(iter97))
      {
        iter97 = this.success[iter97];
        iter97.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_queryMetric_args = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
AdminService_queryMetric_args.prototype = {};
AdminService_queryMetric_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ttypes.MetricQueryRequest();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_queryMetric_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_queryMetric_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_queryMetric_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_queryMetric_result.prototype = {};
AdminService_queryMetric_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TimeSeriesData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_queryMetric_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_queryMetric_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_queryMetrics_args = function(args) {
  this.queries = null;
  if (args) {
    if (args.queries !== undefined) {
      this.queries = args.queries;
    }
  }
};
AdminService_queryMetrics_args.prototype = {};
AdminService_queryMetrics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.queries = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = new ttypes.MetricQueryRequest();
          elem104.read(input);
          this.queries.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_queryMetrics_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_queryMetrics_args');
  if (this.queries !== null && this.queries !== undefined) {
    output.writeFieldBegin('queries', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.queries.length);
    for (var iter105 in this.queries)
    {
      if (this.queries.hasOwnProperty(iter105))
      {
        iter105 = this.queries[iter105];
        iter105.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_queryMetrics_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_queryMetrics_result.prototype = {};
AdminService_queryMetrics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.success = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = new ttypes.TimeSeriesData();
          elem112.read(input);
          this.success.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_queryMetrics_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_queryMetrics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter113 in this.success)
    {
      if (this.success.hasOwnProperty(iter113))
      {
        iter113 = this.success[iter113];
        iter113.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_findAllAppInfo_args = function(args) {
};
AdminService_findAllAppInfo_args.prototype = {};
AdminService_findAllAppInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_findAllAppInfo_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_findAllAppInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_findAllAppInfo_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_findAllAppInfo_result.prototype = {};
AdminService_findAllAppInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.success = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = new ttypes.AppInfo();
          elem120.read(input);
          this.success.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_findAllAppInfo_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_findAllAppInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter121 in this.success)
    {
      if (this.success.hasOwnProperty(iter121))
      {
        iter121 = this.success[iter121];
        iter121.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableSize_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_getTableSize_args.prototype = {};
AdminService_getTableSize_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableSize_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableSize_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableSize_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getTableSize_result.prototype = {};
AdminService_getTableSize_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableSize_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableSize_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_putClientMetrics_args = function(args) {
  this.clientMetrics = null;
  if (args) {
    if (args.clientMetrics !== undefined) {
      this.clientMetrics = args.clientMetrics;
    }
  }
};
AdminService_putClientMetrics_args.prototype = {};
AdminService_putClientMetrics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientMetrics = new ttypes.ClientMetrics();
        this.clientMetrics.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_putClientMetrics_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_putClientMetrics_args');
  if (this.clientMetrics !== null && this.clientMetrics !== undefined) {
    output.writeFieldBegin('clientMetrics', Thrift.Type.STRUCT, 1);
    this.clientMetrics.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_putClientMetrics_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_putClientMetrics_result.prototype = {};
AdminService_putClientMetrics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_putClientMetrics_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_putClientMetrics_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_subscribePhoneAlert_args = function(args) {
  this.phoneNumber = null;
  this.spaceId = null;
  if (args) {
    if (args.phoneNumber !== undefined) {
      this.phoneNumber = args.phoneNumber;
    }
    if (args.spaceId !== undefined) {
      this.spaceId = args.spaceId;
    }
  }
};
AdminService_subscribePhoneAlert_args.prototype = {};
AdminService_subscribePhoneAlert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.spaceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_subscribePhoneAlert_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_subscribePhoneAlert_args');
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 1);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  if (this.spaceId !== null && this.spaceId !== undefined) {
    output.writeFieldBegin('spaceId', Thrift.Type.STRING, 2);
    output.writeString(this.spaceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_subscribePhoneAlert_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_subscribePhoneAlert_result.prototype = {};
AdminService_subscribePhoneAlert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_subscribePhoneAlert_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_subscribePhoneAlert_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_unsubscribePhoneAlert_args = function(args) {
  this.phoneNumber = null;
  this.spaceId = null;
  if (args) {
    if (args.phoneNumber !== undefined) {
      this.phoneNumber = args.phoneNumber;
    }
    if (args.spaceId !== undefined) {
      this.spaceId = args.spaceId;
    }
  }
};
AdminService_unsubscribePhoneAlert_args.prototype = {};
AdminService_unsubscribePhoneAlert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.spaceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_unsubscribePhoneAlert_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_unsubscribePhoneAlert_args');
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 1);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  if (this.spaceId !== null && this.spaceId !== undefined) {
    output.writeFieldBegin('spaceId', Thrift.Type.STRING, 2);
    output.writeString(this.spaceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_unsubscribePhoneAlert_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_unsubscribePhoneAlert_result.prototype = {};
AdminService_unsubscribePhoneAlert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_unsubscribePhoneAlert_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_unsubscribePhoneAlert_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_subscribeEmailAlert_args = function(args) {
  this.email = null;
  this.spaceId = null;
  if (args) {
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.spaceId !== undefined) {
      this.spaceId = args.spaceId;
    }
  }
};
AdminService_subscribeEmailAlert_args.prototype = {};
AdminService_subscribeEmailAlert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.spaceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_subscribeEmailAlert_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_subscribeEmailAlert_args');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.spaceId !== null && this.spaceId !== undefined) {
    output.writeFieldBegin('spaceId', Thrift.Type.STRING, 2);
    output.writeString(this.spaceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_subscribeEmailAlert_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_subscribeEmailAlert_result.prototype = {};
AdminService_subscribeEmailAlert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_subscribeEmailAlert_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_subscribeEmailAlert_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_unsubscribeEmailAlert_args = function(args) {
  this.email = null;
  this.spaceId = null;
  if (args) {
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.spaceId !== undefined) {
      this.spaceId = args.spaceId;
    }
  }
};
AdminService_unsubscribeEmailAlert_args.prototype = {};
AdminService_unsubscribeEmailAlert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.spaceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_unsubscribeEmailAlert_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_unsubscribeEmailAlert_args');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.spaceId !== null && this.spaceId !== undefined) {
    output.writeFieldBegin('spaceId', Thrift.Type.STRING, 2);
    output.writeString(this.spaceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_unsubscribeEmailAlert_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_unsubscribeEmailAlert_result.prototype = {};
AdminService_unsubscribeEmailAlert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_unsubscribeEmailAlert_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_unsubscribeEmailAlert_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_listSubscribedPhone_args = function(args) {
  this.spaceId = null;
  if (args) {
    if (args.spaceId !== undefined) {
      this.spaceId = args.spaceId;
    }
  }
};
AdminService_listSubscribedPhone_args.prototype = {};
AdminService_listSubscribedPhone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.spaceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_listSubscribedPhone_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_listSubscribedPhone_args');
  if (this.spaceId !== null && this.spaceId !== undefined) {
    output.writeFieldBegin('spaceId', Thrift.Type.STRING, 1);
    output.writeString(this.spaceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_listSubscribedPhone_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_listSubscribedPhone_result.prototype = {};
AdminService_listSubscribedPhone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size122 = 0;
        var _rtmp3126;
        this.success = [];
        var _etype125 = 0;
        _rtmp3126 = input.readListBegin();
        _etype125 = _rtmp3126.etype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var elem128 = null;
          elem128 = input.readString();
          this.success.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_listSubscribedPhone_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_listSubscribedPhone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter129 in this.success)
    {
      if (this.success.hasOwnProperty(iter129))
      {
        iter129 = this.success[iter129];
        output.writeString(iter129);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_listSubscribedEmail_args = function(args) {
  this.spaceId = null;
  if (args) {
    if (args.spaceId !== undefined) {
      this.spaceId = args.spaceId;
    }
  }
};
AdminService_listSubscribedEmail_args.prototype = {};
AdminService_listSubscribedEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.spaceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_listSubscribedEmail_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_listSubscribedEmail_args');
  if (this.spaceId !== null && this.spaceId !== undefined) {
    output.writeFieldBegin('spaceId', Thrift.Type.STRING, 1);
    output.writeString(this.spaceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_listSubscribedEmail_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_listSubscribedEmail_result.prototype = {};
AdminService_listSubscribedEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size130 = 0;
        var _rtmp3134;
        this.success = [];
        var _etype133 = 0;
        _rtmp3134 = input.readListBegin();
        _etype133 = _rtmp3134.etype;
        _size130 = _rtmp3134.size;
        for (var _i135 = 0; _i135 < _size130; ++_i135)
        {
          var elem136 = null;
          elem136 = input.readString();
          this.success.push(elem136);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_listSubscribedEmail_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_listSubscribedEmail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter137 in this.success)
    {
      if (this.success.hasOwnProperty(iter137))
      {
        iter137 = this.success[iter137];
        output.writeString(iter137);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableHistorySize_args = function(args) {
  this.tableName = null;
  this.startDate = null;
  this.stopDate = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startDate !== undefined) {
      this.startDate = args.startDate;
    }
    if (args.stopDate !== undefined) {
      this.stopDate = args.stopDate;
    }
  }
};
AdminService_getTableHistorySize_args.prototype = {};
AdminService_getTableHistorySize_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.stopDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableHistorySize_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableHistorySize_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startDate !== null && this.startDate !== undefined) {
    output.writeFieldBegin('startDate', Thrift.Type.I64, 2);
    output.writeI64(this.startDate);
    output.writeFieldEnd();
  }
  if (this.stopDate !== null && this.stopDate !== undefined) {
    output.writeFieldBegin('stopDate', Thrift.Type.I64, 3);
    output.writeI64(this.stopDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTableHistorySize_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getTableHistorySize_result.prototype = {};
AdminService_getTableHistorySize_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size138 = 0;
        var _rtmp3142;
        this.success = {};
        var _ktype139 = 0;
        var _vtype140 = 0;
        _rtmp3142 = input.readMapBegin();
        _ktype139 = _rtmp3142.ktype;
        _vtype140 = _rtmp3142.vtype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var key144 = null;
          var val145 = null;
          key144 = input.readI64();
          val145 = input.readI64();
          this.success[key144] = val145;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTableHistorySize_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTableHistorySize_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter146 in this.success)
    {
      if (this.success.hasOwnProperty(kiter146))
      {
        var viter147 = this.success[kiter146];
        output.writeI64(kiter146);
        output.writeI64(viter147);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_renameTable_args = function(args) {
  this.srcName = null;
  this.destName = null;
  if (args) {
    if (args.srcName !== undefined) {
      this.srcName = args.srcName;
    }
    if (args.destName !== undefined) {
      this.destName = args.destName;
    }
  }
};
AdminService_renameTable_args.prototype = {};
AdminService_renameTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.srcName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.destName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_renameTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_renameTable_args');
  if (this.srcName !== null && this.srcName !== undefined) {
    output.writeFieldBegin('srcName', Thrift.Type.STRING, 1);
    output.writeString(this.srcName);
    output.writeFieldEnd();
  }
  if (this.destName !== null && this.destName !== undefined) {
    output.writeFieldBegin('destName', Thrift.Type.STRING, 2);
    output.writeString(this.destName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_renameTable_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_renameTable_result.prototype = {};
AdminService_renameTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_renameTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_renameTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_listSnapshots_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
AdminService_listSnapshots_args.prototype = {};
AdminService_listSnapshots_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_listSnapshots_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_listSnapshots_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_listSnapshots_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_listSnapshots_result.prototype = {};
AdminService_listSnapshots_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TableSnapshots();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_listSnapshots_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_listSnapshots_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_snapshotTable_args = function(args) {
  this.tableName = null;
  this.snapshotName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.snapshotName !== undefined) {
      this.snapshotName = args.snapshotName;
    }
  }
};
AdminService_snapshotTable_args.prototype = {};
AdminService_snapshotTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.snapshotName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_snapshotTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_snapshotTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.snapshotName !== null && this.snapshotName !== undefined) {
    output.writeFieldBegin('snapshotName', Thrift.Type.STRING, 2);
    output.writeString(this.snapshotName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_snapshotTable_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_snapshotTable_result.prototype = {};
AdminService_snapshotTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_snapshotTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_snapshotTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_deleteSnapshot_args = function(args) {
  this.tableName = null;
  this.snapshotName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.snapshotName !== undefined) {
      this.snapshotName = args.snapshotName;
    }
  }
};
AdminService_deleteSnapshot_args.prototype = {};
AdminService_deleteSnapshot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.snapshotName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_deleteSnapshot_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_deleteSnapshot_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.snapshotName !== null && this.snapshotName !== undefined) {
    output.writeFieldBegin('snapshotName', Thrift.Type.STRING, 2);
    output.writeString(this.snapshotName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_deleteSnapshot_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_deleteSnapshot_result.prototype = {};
AdminService_deleteSnapshot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_deleteSnapshot_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_deleteSnapshot_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_restoreSnapshot_args = function(args) {
  this.tableName = null;
  this.snapshotName = null;
  this.destTableName = null;
  this.isSystem = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.snapshotName !== undefined) {
      this.snapshotName = args.snapshotName;
    }
    if (args.destTableName !== undefined) {
      this.destTableName = args.destTableName;
    }
    if (args.isSystem !== undefined) {
      this.isSystem = args.isSystem;
    }
  }
};
AdminService_restoreSnapshot_args.prototype = {};
AdminService_restoreSnapshot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.snapshotName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.destTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isSystem = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_restoreSnapshot_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_restoreSnapshot_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.snapshotName !== null && this.snapshotName !== undefined) {
    output.writeFieldBegin('snapshotName', Thrift.Type.STRING, 2);
    output.writeString(this.snapshotName);
    output.writeFieldEnd();
  }
  if (this.destTableName !== null && this.destTableName !== undefined) {
    output.writeFieldBegin('destTableName', Thrift.Type.STRING, 3);
    output.writeString(this.destTableName);
    output.writeFieldEnd();
  }
  if (this.isSystem !== null && this.isSystem !== undefined) {
    output.writeFieldBegin('isSystem', Thrift.Type.BOOL, 4);
    output.writeBool(this.isSystem);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_restoreSnapshot_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_restoreSnapshot_result.prototype = {};
AdminService_restoreSnapshot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_restoreSnapshot_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_restoreSnapshot_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_listAllSnapshots_args = function(args) {
};
AdminService_listAllSnapshots_args.prototype = {};
AdminService_listAllSnapshots_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_listAllSnapshots_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_listAllSnapshots_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_listAllSnapshots_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_listAllSnapshots_result.prototype = {};
AdminService_listAllSnapshots_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.success = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = new ttypes.SnapshotTableView();
          elem154.read(input);
          this.success.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_listAllSnapshots_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_listAllSnapshots_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter155 in this.success)
    {
      if (this.success.hasOwnProperty(iter155))
      {
        iter155 = this.success[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_cancelSnapshotTable_args = function(args) {
  this.tableName = null;
  this.snapshotName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.snapshotName !== undefined) {
      this.snapshotName = args.snapshotName;
    }
  }
};
AdminService_cancelSnapshotTable_args.prototype = {};
AdminService_cancelSnapshotTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.snapshotName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_cancelSnapshotTable_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_cancelSnapshotTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.snapshotName !== null && this.snapshotName !== undefined) {
    output.writeFieldBegin('snapshotName', Thrift.Type.STRING, 2);
    output.writeString(this.snapshotName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_cancelSnapshotTable_result = function(args) {
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_cancelSnapshotTable_result.prototype = {};
AdminService_cancelSnapshotTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_cancelSnapshotTable_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_cancelSnapshotTable_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getSnapshotState_args = function(args) {
  this.tableName = null;
  this.snapshotName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.snapshotName !== undefined) {
      this.snapshotName = args.snapshotName;
    }
  }
};
AdminService_getSnapshotState_args.prototype = {};
AdminService_getSnapshotState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.snapshotName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getSnapshotState_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getSnapshotState_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.snapshotName !== null && this.snapshotName !== undefined) {
    output.writeFieldBegin('snapshotName', Thrift.Type.STRING, 2);
    output.writeString(this.snapshotName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getSnapshotState_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getSnapshotState_result.prototype = {};
AdminService_getSnapshotState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getSnapshotState_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getSnapshotState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getQuotaInfo_args = function(args) {
  this.spaceId = null;
  if (args) {
    if (args.spaceId !== undefined) {
      this.spaceId = args.spaceId;
    }
  }
};
AdminService_getQuotaInfo_args.prototype = {};
AdminService_getQuotaInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.spaceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getQuotaInfo_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getQuotaInfo_args');
  if (this.spaceId !== null && this.spaceId !== undefined) {
    output.writeFieldBegin('spaceId', Thrift.Type.STRING, 1);
    output.writeString(this.spaceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getQuotaInfo_result = function(args) {
  this.success = null;
  this.se = null;
  if (args instanceof Errors_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.se !== undefined) {
      this.se = args.se;
    }
  }
};
AdminService_getQuotaInfo_result.prototype = {};
AdminService_getQuotaInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.QuotaInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new Errors_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getQuotaInfo_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getQuotaInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(AdminServiceClient, BaseServiceClient);
AdminServiceClient.prototype.seqid = function() { return this._seqid; }
AdminServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
AdminServiceClient.prototype.saveAppInfo = function(appInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveAppInfo(appInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveAppInfo(appInfo);
  }
};

AdminServiceClient.prototype.send_saveAppInfo = function(appInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveAppInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_saveAppInfo_args();
  args.appInfo = appInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_saveAppInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_saveAppInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.getAppInfo = function(appId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAppInfo(appId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAppInfo(appId);
  }
};

AdminServiceClient.prototype.send_getAppInfo = function(appId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAppInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_getAppInfo_args();
  args.appId = appId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_getAppInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_getAppInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAppInfo failed: unknown result');
};
AdminServiceClient.prototype.findAllApps = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findAllApps();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findAllApps();
  }
};

AdminServiceClient.prototype.send_findAllApps = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findAllApps', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_findAllApps_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_findAllApps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_findAllApps_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findAllApps failed: unknown result');
};
AdminServiceClient.prototype.findAllTables = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findAllTables();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findAllTables();
  }
};

AdminServiceClient.prototype.send_findAllTables = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findAllTables', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_findAllTables_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_findAllTables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_findAllTables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findAllTables failed: unknown result');
};
AdminServiceClient.prototype.createTable = function(tableName, tableSpec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createTable(tableName, tableSpec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createTable(tableName, tableSpec);
  }
};

AdminServiceClient.prototype.send_createTable = function(tableName, tableSpec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_createTable_args();
  args.tableName = tableName;
  args.tableSpec = tableSpec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_createTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_createTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createTable failed: unknown result');
};
AdminServiceClient.prototype.dropTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_dropTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_dropTable(tableName);
  }
};

AdminServiceClient.prototype.send_dropTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('dropTable', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_dropTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_dropTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_dropTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.alterTable = function(tableName, tableSpec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_alterTable(tableName, tableSpec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_alterTable(tableName, tableSpec);
  }
};

AdminServiceClient.prototype.send_alterTable = function(tableName, tableSpec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('alterTable', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_alterTable_args();
  args.tableName = tableName;
  args.tableSpec = tableSpec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_alterTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_alterTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.cloneTable = function(srcName, destTable, flushTable, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cloneTable(srcName, destTable, flushTable);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cloneTable(srcName, destTable, flushTable);
  }
};

AdminServiceClient.prototype.send_cloneTable = function(srcName, destTable, flushTable) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cloneTable', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_cloneTable_args();
  args.srcName = srcName;
  args.destTable = destTable;
  args.flushTable = flushTable;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_cloneTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_cloneTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.disableTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disableTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disableTable(tableName);
  }
};

AdminServiceClient.prototype.send_disableTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_disableTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_disableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_disableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.enableTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_enableTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_enableTable(tableName);
  }
};

AdminServiceClient.prototype.send_enableTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_enableTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_enableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_enableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.describeTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_describeTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_describeTable(tableName);
  }
};

AdminServiceClient.prototype.send_describeTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describeTable', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_describeTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_describeTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_describeTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describeTable failed: unknown result');
};
AdminServiceClient.prototype.getTableStatus = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableStatus(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableStatus(tableName);
  }
};

AdminServiceClient.prototype.send_getTableStatus = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableStatus', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_getTableStatus_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_getTableStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_getTableStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableStatus failed: unknown result');
};
AdminServiceClient.prototype.getTableState = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableState(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableState(tableName);
  }
};

AdminServiceClient.prototype.send_getTableState = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableState', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_getTableState_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_getTableState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_getTableState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableState failed: unknown result');
};
AdminServiceClient.prototype.getTableSplits = function(tableName, startKey, stopKey, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableSplits(tableName, startKey, stopKey);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableSplits(tableName, startKey, stopKey);
  }
};

AdminServiceClient.prototype.send_getTableSplits = function(tableName, startKey, stopKey) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableSplits', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_getTableSplits_args();
  args.tableName = tableName;
  args.startKey = startKey;
  args.stopKey = stopKey;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_getTableSplits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_getTableSplits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableSplits failed: unknown result');
};
AdminServiceClient.prototype.queryMetric = function(query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryMetric(query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryMetric(query);
  }
};

AdminServiceClient.prototype.send_queryMetric = function(query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryMetric', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_queryMetric_args();
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_queryMetric = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_queryMetric_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryMetric failed: unknown result');
};
AdminServiceClient.prototype.queryMetrics = function(queries, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryMetrics(queries);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryMetrics(queries);
  }
};

AdminServiceClient.prototype.send_queryMetrics = function(queries) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryMetrics', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_queryMetrics_args();
  args.queries = queries;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_queryMetrics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_queryMetrics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryMetrics failed: unknown result');
};
AdminServiceClient.prototype.findAllAppInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findAllAppInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findAllAppInfo();
  }
};

AdminServiceClient.prototype.send_findAllAppInfo = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findAllAppInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_findAllAppInfo_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_findAllAppInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_findAllAppInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findAllAppInfo failed: unknown result');
};
AdminServiceClient.prototype.getTableSize = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableSize(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableSize(tableName);
  }
};

AdminServiceClient.prototype.send_getTableSize = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableSize', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_getTableSize_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_getTableSize = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_getTableSize_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableSize failed: unknown result');
};
AdminServiceClient.prototype.putClientMetrics = function(clientMetrics, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putClientMetrics(clientMetrics);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putClientMetrics(clientMetrics);
  }
};

AdminServiceClient.prototype.send_putClientMetrics = function(clientMetrics) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putClientMetrics', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_putClientMetrics_args();
  args.clientMetrics = clientMetrics;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_putClientMetrics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_putClientMetrics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.subscribePhoneAlert = function(phoneNumber, spaceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_subscribePhoneAlert(phoneNumber, spaceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_subscribePhoneAlert(phoneNumber, spaceId);
  }
};

AdminServiceClient.prototype.send_subscribePhoneAlert = function(phoneNumber, spaceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('subscribePhoneAlert', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_subscribePhoneAlert_args();
  args.phoneNumber = phoneNumber;
  args.spaceId = spaceId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_subscribePhoneAlert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_subscribePhoneAlert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.unsubscribePhoneAlert = function(phoneNumber, spaceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unsubscribePhoneAlert(phoneNumber, spaceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unsubscribePhoneAlert(phoneNumber, spaceId);
  }
};

AdminServiceClient.prototype.send_unsubscribePhoneAlert = function(phoneNumber, spaceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unsubscribePhoneAlert', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_unsubscribePhoneAlert_args();
  args.phoneNumber = phoneNumber;
  args.spaceId = spaceId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_unsubscribePhoneAlert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_unsubscribePhoneAlert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.subscribeEmailAlert = function(email, spaceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_subscribeEmailAlert(email, spaceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_subscribeEmailAlert(email, spaceId);
  }
};

AdminServiceClient.prototype.send_subscribeEmailAlert = function(email, spaceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('subscribeEmailAlert', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_subscribeEmailAlert_args();
  args.email = email;
  args.spaceId = spaceId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_subscribeEmailAlert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_subscribeEmailAlert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.unsubscribeEmailAlert = function(email, spaceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unsubscribeEmailAlert(email, spaceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unsubscribeEmailAlert(email, spaceId);
  }
};

AdminServiceClient.prototype.send_unsubscribeEmailAlert = function(email, spaceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unsubscribeEmailAlert', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_unsubscribeEmailAlert_args();
  args.email = email;
  args.spaceId = spaceId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_unsubscribeEmailAlert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_unsubscribeEmailAlert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.listSubscribedPhone = function(spaceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listSubscribedPhone(spaceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listSubscribedPhone(spaceId);
  }
};

AdminServiceClient.prototype.send_listSubscribedPhone = function(spaceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listSubscribedPhone', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_listSubscribedPhone_args();
  args.spaceId = spaceId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_listSubscribedPhone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_listSubscribedPhone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listSubscribedPhone failed: unknown result');
};
AdminServiceClient.prototype.listSubscribedEmail = function(spaceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listSubscribedEmail(spaceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listSubscribedEmail(spaceId);
  }
};

AdminServiceClient.prototype.send_listSubscribedEmail = function(spaceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listSubscribedEmail', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_listSubscribedEmail_args();
  args.spaceId = spaceId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_listSubscribedEmail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_listSubscribedEmail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listSubscribedEmail failed: unknown result');
};
AdminServiceClient.prototype.getTableHistorySize = function(tableName, startDate, stopDate, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableHistorySize(tableName, startDate, stopDate);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableHistorySize(tableName, startDate, stopDate);
  }
};

AdminServiceClient.prototype.send_getTableHistorySize = function(tableName, startDate, stopDate) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableHistorySize', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_getTableHistorySize_args();
  args.tableName = tableName;
  args.startDate = startDate;
  args.stopDate = stopDate;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_getTableHistorySize = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_getTableHistorySize_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableHistorySize failed: unknown result');
};
AdminServiceClient.prototype.renameTable = function(srcName, destName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_renameTable(srcName, destName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_renameTable(srcName, destName);
  }
};

AdminServiceClient.prototype.send_renameTable = function(srcName, destName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('renameTable', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_renameTable_args();
  args.srcName = srcName;
  args.destName = destName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_renameTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_renameTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.listSnapshots = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listSnapshots(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listSnapshots(tableName);
  }
};

AdminServiceClient.prototype.send_listSnapshots = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listSnapshots', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_listSnapshots_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_listSnapshots = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_listSnapshots_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listSnapshots failed: unknown result');
};
AdminServiceClient.prototype.snapshotTable = function(tableName, snapshotName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_snapshotTable(tableName, snapshotName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_snapshotTable(tableName, snapshotName);
  }
};

AdminServiceClient.prototype.send_snapshotTable = function(tableName, snapshotName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('snapshotTable', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_snapshotTable_args();
  args.tableName = tableName;
  args.snapshotName = snapshotName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_snapshotTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_snapshotTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.deleteSnapshot = function(tableName, snapshotName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteSnapshot(tableName, snapshotName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteSnapshot(tableName, snapshotName);
  }
};

AdminServiceClient.prototype.send_deleteSnapshot = function(tableName, snapshotName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteSnapshot', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_deleteSnapshot_args();
  args.tableName = tableName;
  args.snapshotName = snapshotName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_deleteSnapshot = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_deleteSnapshot_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.restoreSnapshot = function(tableName, snapshotName, destTableName, isSystem, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_restoreSnapshot(tableName, snapshotName, destTableName, isSystem);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_restoreSnapshot(tableName, snapshotName, destTableName, isSystem);
  }
};

AdminServiceClient.prototype.send_restoreSnapshot = function(tableName, snapshotName, destTableName, isSystem) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('restoreSnapshot', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_restoreSnapshot_args();
  args.tableName = tableName;
  args.snapshotName = snapshotName;
  args.destTableName = destTableName;
  args.isSystem = isSystem;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_restoreSnapshot = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_restoreSnapshot_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.listAllSnapshots = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listAllSnapshots();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listAllSnapshots();
  }
};

AdminServiceClient.prototype.send_listAllSnapshots = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listAllSnapshots', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_listAllSnapshots_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_listAllSnapshots = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_listAllSnapshots_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listAllSnapshots failed: unknown result');
};
AdminServiceClient.prototype.cancelSnapshotTable = function(tableName, snapshotName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancelSnapshotTable(tableName, snapshotName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancelSnapshotTable(tableName, snapshotName);
  }
};

AdminServiceClient.prototype.send_cancelSnapshotTable = function(tableName, snapshotName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancelSnapshotTable', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_cancelSnapshotTable_args();
  args.tableName = tableName;
  args.snapshotName = snapshotName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_cancelSnapshotTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_cancelSnapshotTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  callback(null)
};
AdminServiceClient.prototype.getSnapshotState = function(tableName, snapshotName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSnapshotState(tableName, snapshotName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSnapshotState(tableName, snapshotName);
  }
};

AdminServiceClient.prototype.send_getSnapshotState = function(tableName, snapshotName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSnapshotState', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_getSnapshotState_args();
  args.tableName = tableName;
  args.snapshotName = snapshotName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_getSnapshotState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_getSnapshotState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSnapshotState failed: unknown result');
};
AdminServiceClient.prototype.getQuotaInfo = function(spaceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getQuotaInfo(spaceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getQuotaInfo(spaceId);
  }
};

AdminServiceClient.prototype.send_getQuotaInfo = function(spaceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQuotaInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminService_getQuotaInfo_args();
  args.spaceId = spaceId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_getQuotaInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_getQuotaInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.se) {
    return callback(result.se);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQuotaInfo failed: unknown result');
};
AdminServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(AdminServiceProcessor, BaseServiceProcessor)
AdminServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

AdminServiceProcessor.prototype.process_saveAppInfo = function(seqid, input, output) {
  var args = new AdminService_saveAppInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveAppInfo.length === 1) {
    Q.fcall(this._handler.saveAppInfo, args.appInfo)
      .then(function(result) {
        var result = new AdminService_saveAppInfo_result({success: result});
        output.writeMessageBegin("saveAppInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_saveAppInfo_result(err);
        output.writeMessageBegin("saveAppInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveAppInfo(args.appInfo,  function (err, result) {
      var result = new AdminService_saveAppInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("saveAppInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_getAppInfo = function(seqid, input, output) {
  var args = new AdminService_getAppInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAppInfo.length === 1) {
    Q.fcall(this._handler.getAppInfo, args.appId)
      .then(function(result) {
        var result = new AdminService_getAppInfo_result({success: result});
        output.writeMessageBegin("getAppInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_getAppInfo_result(err);
        output.writeMessageBegin("getAppInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAppInfo(args.appId,  function (err, result) {
      var result = new AdminService_getAppInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getAppInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_findAllApps = function(seqid, input, output) {
  var args = new AdminService_findAllApps_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findAllApps.length === 0) {
    Q.fcall(this._handler.findAllApps)
      .then(function(result) {
        var result = new AdminService_findAllApps_result({success: result});
        output.writeMessageBegin("findAllApps", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_findAllApps_result(err);
        output.writeMessageBegin("findAllApps", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findAllApps( function (err, result) {
      var result = new AdminService_findAllApps_result((err != null ? err : {success: result}));
      output.writeMessageBegin("findAllApps", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_findAllTables = function(seqid, input, output) {
  var args = new AdminService_findAllTables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findAllTables.length === 0) {
    Q.fcall(this._handler.findAllTables)
      .then(function(result) {
        var result = new AdminService_findAllTables_result({success: result});
        output.writeMessageBegin("findAllTables", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_findAllTables_result(err);
        output.writeMessageBegin("findAllTables", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findAllTables( function (err, result) {
      var result = new AdminService_findAllTables_result((err != null ? err : {success: result}));
      output.writeMessageBegin("findAllTables", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_createTable = function(seqid, input, output) {
  var args = new AdminService_createTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createTable.length === 2) {
    Q.fcall(this._handler.createTable, args.tableName, args.tableSpec)
      .then(function(result) {
        var result = new AdminService_createTable_result({success: result});
        output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_createTable_result(err);
        output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createTable(args.tableName, args.tableSpec,  function (err, result) {
      var result = new AdminService_createTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_dropTable = function(seqid, input, output) {
  var args = new AdminService_dropTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.dropTable.length === 1) {
    Q.fcall(this._handler.dropTable, args.tableName)
      .then(function(result) {
        var result = new AdminService_dropTable_result({success: result});
        output.writeMessageBegin("dropTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_dropTable_result(err);
        output.writeMessageBegin("dropTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.dropTable(args.tableName,  function (err, result) {
      var result = new AdminService_dropTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("dropTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_alterTable = function(seqid, input, output) {
  var args = new AdminService_alterTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.alterTable.length === 2) {
    Q.fcall(this._handler.alterTable, args.tableName, args.tableSpec)
      .then(function(result) {
        var result = new AdminService_alterTable_result({success: result});
        output.writeMessageBegin("alterTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_alterTable_result(err);
        output.writeMessageBegin("alterTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.alterTable(args.tableName, args.tableSpec,  function (err, result) {
      var result = new AdminService_alterTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("alterTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_cloneTable = function(seqid, input, output) {
  var args = new AdminService_cloneTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cloneTable.length === 3) {
    Q.fcall(this._handler.cloneTable, args.srcName, args.destTable, args.flushTable)
      .then(function(result) {
        var result = new AdminService_cloneTable_result({success: result});
        output.writeMessageBegin("cloneTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_cloneTable_result(err);
        output.writeMessageBegin("cloneTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cloneTable(args.srcName, args.destTable, args.flushTable,  function (err, result) {
      var result = new AdminService_cloneTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("cloneTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_disableTable = function(seqid, input, output) {
  var args = new AdminService_disableTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disableTable.length === 1) {
    Q.fcall(this._handler.disableTable, args.tableName)
      .then(function(result) {
        var result = new AdminService_disableTable_result({success: result});
        output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_disableTable_result(err);
        output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disableTable(args.tableName,  function (err, result) {
      var result = new AdminService_disableTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_enableTable = function(seqid, input, output) {
  var args = new AdminService_enableTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.enableTable.length === 1) {
    Q.fcall(this._handler.enableTable, args.tableName)
      .then(function(result) {
        var result = new AdminService_enableTable_result({success: result});
        output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_enableTable_result(err);
        output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.enableTable(args.tableName,  function (err, result) {
      var result = new AdminService_enableTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_describeTable = function(seqid, input, output) {
  var args = new AdminService_describeTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.describeTable.length === 1) {
    Q.fcall(this._handler.describeTable, args.tableName)
      .then(function(result) {
        var result = new AdminService_describeTable_result({success: result});
        output.writeMessageBegin("describeTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_describeTable_result(err);
        output.writeMessageBegin("describeTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.describeTable(args.tableName,  function (err, result) {
      var result = new AdminService_describeTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("describeTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_getTableStatus = function(seqid, input, output) {
  var args = new AdminService_getTableStatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableStatus.length === 1) {
    Q.fcall(this._handler.getTableStatus, args.tableName)
      .then(function(result) {
        var result = new AdminService_getTableStatus_result({success: result});
        output.writeMessageBegin("getTableStatus", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_getTableStatus_result(err);
        output.writeMessageBegin("getTableStatus", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTableStatus(args.tableName,  function (err, result) {
      var result = new AdminService_getTableStatus_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTableStatus", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_getTableState = function(seqid, input, output) {
  var args = new AdminService_getTableState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableState.length === 1) {
    Q.fcall(this._handler.getTableState, args.tableName)
      .then(function(result) {
        var result = new AdminService_getTableState_result({success: result});
        output.writeMessageBegin("getTableState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_getTableState_result(err);
        output.writeMessageBegin("getTableState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTableState(args.tableName,  function (err, result) {
      var result = new AdminService_getTableState_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTableState", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_getTableSplits = function(seqid, input, output) {
  var args = new AdminService_getTableSplits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableSplits.length === 3) {
    Q.fcall(this._handler.getTableSplits, args.tableName, args.startKey, args.stopKey)
      .then(function(result) {
        var result = new AdminService_getTableSplits_result({success: result});
        output.writeMessageBegin("getTableSplits", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_getTableSplits_result(err);
        output.writeMessageBegin("getTableSplits", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTableSplits(args.tableName, args.startKey, args.stopKey,  function (err, result) {
      var result = new AdminService_getTableSplits_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTableSplits", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_queryMetric = function(seqid, input, output) {
  var args = new AdminService_queryMetric_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryMetric.length === 1) {
    Q.fcall(this._handler.queryMetric, args.query)
      .then(function(result) {
        var result = new AdminService_queryMetric_result({success: result});
        output.writeMessageBegin("queryMetric", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_queryMetric_result(err);
        output.writeMessageBegin("queryMetric", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryMetric(args.query,  function (err, result) {
      var result = new AdminService_queryMetric_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryMetric", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_queryMetrics = function(seqid, input, output) {
  var args = new AdminService_queryMetrics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryMetrics.length === 1) {
    Q.fcall(this._handler.queryMetrics, args.queries)
      .then(function(result) {
        var result = new AdminService_queryMetrics_result({success: result});
        output.writeMessageBegin("queryMetrics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_queryMetrics_result(err);
        output.writeMessageBegin("queryMetrics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryMetrics(args.queries,  function (err, result) {
      var result = new AdminService_queryMetrics_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryMetrics", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_findAllAppInfo = function(seqid, input, output) {
  var args = new AdminService_findAllAppInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findAllAppInfo.length === 0) {
    Q.fcall(this._handler.findAllAppInfo)
      .then(function(result) {
        var result = new AdminService_findAllAppInfo_result({success: result});
        output.writeMessageBegin("findAllAppInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_findAllAppInfo_result(err);
        output.writeMessageBegin("findAllAppInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findAllAppInfo( function (err, result) {
      var result = new AdminService_findAllAppInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("findAllAppInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_getTableSize = function(seqid, input, output) {
  var args = new AdminService_getTableSize_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableSize.length === 1) {
    Q.fcall(this._handler.getTableSize, args.tableName)
      .then(function(result) {
        var result = new AdminService_getTableSize_result({success: result});
        output.writeMessageBegin("getTableSize", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_getTableSize_result(err);
        output.writeMessageBegin("getTableSize", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTableSize(args.tableName,  function (err, result) {
      var result = new AdminService_getTableSize_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTableSize", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_putClientMetrics = function(seqid, input, output) {
  var args = new AdminService_putClientMetrics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putClientMetrics.length === 1) {
    Q.fcall(this._handler.putClientMetrics, args.clientMetrics)
      .then(function(result) {
        var result = new AdminService_putClientMetrics_result({success: result});
        output.writeMessageBegin("putClientMetrics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_putClientMetrics_result(err);
        output.writeMessageBegin("putClientMetrics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putClientMetrics(args.clientMetrics,  function (err, result) {
      var result = new AdminService_putClientMetrics_result((err != null ? err : {success: result}));
      output.writeMessageBegin("putClientMetrics", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_subscribePhoneAlert = function(seqid, input, output) {
  var args = new AdminService_subscribePhoneAlert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.subscribePhoneAlert.length === 2) {
    Q.fcall(this._handler.subscribePhoneAlert, args.phoneNumber, args.spaceId)
      .then(function(result) {
        var result = new AdminService_subscribePhoneAlert_result({success: result});
        output.writeMessageBegin("subscribePhoneAlert", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_subscribePhoneAlert_result(err);
        output.writeMessageBegin("subscribePhoneAlert", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.subscribePhoneAlert(args.phoneNumber, args.spaceId,  function (err, result) {
      var result = new AdminService_subscribePhoneAlert_result((err != null ? err : {success: result}));
      output.writeMessageBegin("subscribePhoneAlert", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_unsubscribePhoneAlert = function(seqid, input, output) {
  var args = new AdminService_unsubscribePhoneAlert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unsubscribePhoneAlert.length === 2) {
    Q.fcall(this._handler.unsubscribePhoneAlert, args.phoneNumber, args.spaceId)
      .then(function(result) {
        var result = new AdminService_unsubscribePhoneAlert_result({success: result});
        output.writeMessageBegin("unsubscribePhoneAlert", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_unsubscribePhoneAlert_result(err);
        output.writeMessageBegin("unsubscribePhoneAlert", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unsubscribePhoneAlert(args.phoneNumber, args.spaceId,  function (err, result) {
      var result = new AdminService_unsubscribePhoneAlert_result((err != null ? err : {success: result}));
      output.writeMessageBegin("unsubscribePhoneAlert", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_subscribeEmailAlert = function(seqid, input, output) {
  var args = new AdminService_subscribeEmailAlert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.subscribeEmailAlert.length === 2) {
    Q.fcall(this._handler.subscribeEmailAlert, args.email, args.spaceId)
      .then(function(result) {
        var result = new AdminService_subscribeEmailAlert_result({success: result});
        output.writeMessageBegin("subscribeEmailAlert", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_subscribeEmailAlert_result(err);
        output.writeMessageBegin("subscribeEmailAlert", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.subscribeEmailAlert(args.email, args.spaceId,  function (err, result) {
      var result = new AdminService_subscribeEmailAlert_result((err != null ? err : {success: result}));
      output.writeMessageBegin("subscribeEmailAlert", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_unsubscribeEmailAlert = function(seqid, input, output) {
  var args = new AdminService_unsubscribeEmailAlert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unsubscribeEmailAlert.length === 2) {
    Q.fcall(this._handler.unsubscribeEmailAlert, args.email, args.spaceId)
      .then(function(result) {
        var result = new AdminService_unsubscribeEmailAlert_result({success: result});
        output.writeMessageBegin("unsubscribeEmailAlert", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_unsubscribeEmailAlert_result(err);
        output.writeMessageBegin("unsubscribeEmailAlert", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unsubscribeEmailAlert(args.email, args.spaceId,  function (err, result) {
      var result = new AdminService_unsubscribeEmailAlert_result((err != null ? err : {success: result}));
      output.writeMessageBegin("unsubscribeEmailAlert", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_listSubscribedPhone = function(seqid, input, output) {
  var args = new AdminService_listSubscribedPhone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listSubscribedPhone.length === 1) {
    Q.fcall(this._handler.listSubscribedPhone, args.spaceId)
      .then(function(result) {
        var result = new AdminService_listSubscribedPhone_result({success: result});
        output.writeMessageBegin("listSubscribedPhone", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_listSubscribedPhone_result(err);
        output.writeMessageBegin("listSubscribedPhone", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listSubscribedPhone(args.spaceId,  function (err, result) {
      var result = new AdminService_listSubscribedPhone_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listSubscribedPhone", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_listSubscribedEmail = function(seqid, input, output) {
  var args = new AdminService_listSubscribedEmail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listSubscribedEmail.length === 1) {
    Q.fcall(this._handler.listSubscribedEmail, args.spaceId)
      .then(function(result) {
        var result = new AdminService_listSubscribedEmail_result({success: result});
        output.writeMessageBegin("listSubscribedEmail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_listSubscribedEmail_result(err);
        output.writeMessageBegin("listSubscribedEmail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listSubscribedEmail(args.spaceId,  function (err, result) {
      var result = new AdminService_listSubscribedEmail_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listSubscribedEmail", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_getTableHistorySize = function(seqid, input, output) {
  var args = new AdminService_getTableHistorySize_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableHistorySize.length === 3) {
    Q.fcall(this._handler.getTableHistorySize, args.tableName, args.startDate, args.stopDate)
      .then(function(result) {
        var result = new AdminService_getTableHistorySize_result({success: result});
        output.writeMessageBegin("getTableHistorySize", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_getTableHistorySize_result(err);
        output.writeMessageBegin("getTableHistorySize", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTableHistorySize(args.tableName, args.startDate, args.stopDate,  function (err, result) {
      var result = new AdminService_getTableHistorySize_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTableHistorySize", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_renameTable = function(seqid, input, output) {
  var args = new AdminService_renameTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.renameTable.length === 2) {
    Q.fcall(this._handler.renameTable, args.srcName, args.destName)
      .then(function(result) {
        var result = new AdminService_renameTable_result({success: result});
        output.writeMessageBegin("renameTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_renameTable_result(err);
        output.writeMessageBegin("renameTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.renameTable(args.srcName, args.destName,  function (err, result) {
      var result = new AdminService_renameTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("renameTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_listSnapshots = function(seqid, input, output) {
  var args = new AdminService_listSnapshots_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listSnapshots.length === 1) {
    Q.fcall(this._handler.listSnapshots, args.tableName)
      .then(function(result) {
        var result = new AdminService_listSnapshots_result({success: result});
        output.writeMessageBegin("listSnapshots", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_listSnapshots_result(err);
        output.writeMessageBegin("listSnapshots", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listSnapshots(args.tableName,  function (err, result) {
      var result = new AdminService_listSnapshots_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listSnapshots", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_snapshotTable = function(seqid, input, output) {
  var args = new AdminService_snapshotTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.snapshotTable.length === 2) {
    Q.fcall(this._handler.snapshotTable, args.tableName, args.snapshotName)
      .then(function(result) {
        var result = new AdminService_snapshotTable_result({success: result});
        output.writeMessageBegin("snapshotTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_snapshotTable_result(err);
        output.writeMessageBegin("snapshotTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.snapshotTable(args.tableName, args.snapshotName,  function (err, result) {
      var result = new AdminService_snapshotTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("snapshotTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_deleteSnapshot = function(seqid, input, output) {
  var args = new AdminService_deleteSnapshot_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteSnapshot.length === 2) {
    Q.fcall(this._handler.deleteSnapshot, args.tableName, args.snapshotName)
      .then(function(result) {
        var result = new AdminService_deleteSnapshot_result({success: result});
        output.writeMessageBegin("deleteSnapshot", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_deleteSnapshot_result(err);
        output.writeMessageBegin("deleteSnapshot", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteSnapshot(args.tableName, args.snapshotName,  function (err, result) {
      var result = new AdminService_deleteSnapshot_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteSnapshot", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_restoreSnapshot = function(seqid, input, output) {
  var args = new AdminService_restoreSnapshot_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.restoreSnapshot.length === 4) {
    Q.fcall(this._handler.restoreSnapshot, args.tableName, args.snapshotName, args.destTableName, args.isSystem)
      .then(function(result) {
        var result = new AdminService_restoreSnapshot_result({success: result});
        output.writeMessageBegin("restoreSnapshot", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_restoreSnapshot_result(err);
        output.writeMessageBegin("restoreSnapshot", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.restoreSnapshot(args.tableName, args.snapshotName, args.destTableName, args.isSystem,  function (err, result) {
      var result = new AdminService_restoreSnapshot_result((err != null ? err : {success: result}));
      output.writeMessageBegin("restoreSnapshot", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_listAllSnapshots = function(seqid, input, output) {
  var args = new AdminService_listAllSnapshots_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listAllSnapshots.length === 0) {
    Q.fcall(this._handler.listAllSnapshots)
      .then(function(result) {
        var result = new AdminService_listAllSnapshots_result({success: result});
        output.writeMessageBegin("listAllSnapshots", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_listAllSnapshots_result(err);
        output.writeMessageBegin("listAllSnapshots", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listAllSnapshots( function (err, result) {
      var result = new AdminService_listAllSnapshots_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listAllSnapshots", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_cancelSnapshotTable = function(seqid, input, output) {
  var args = new AdminService_cancelSnapshotTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancelSnapshotTable.length === 2) {
    Q.fcall(this._handler.cancelSnapshotTable, args.tableName, args.snapshotName)
      .then(function(result) {
        var result = new AdminService_cancelSnapshotTable_result({success: result});
        output.writeMessageBegin("cancelSnapshotTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_cancelSnapshotTable_result(err);
        output.writeMessageBegin("cancelSnapshotTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancelSnapshotTable(args.tableName, args.snapshotName,  function (err, result) {
      var result = new AdminService_cancelSnapshotTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("cancelSnapshotTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_getSnapshotState = function(seqid, input, output) {
  var args = new AdminService_getSnapshotState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSnapshotState.length === 2) {
    Q.fcall(this._handler.getSnapshotState, args.tableName, args.snapshotName)
      .then(function(result) {
        var result = new AdminService_getSnapshotState_result({success: result});
        output.writeMessageBegin("getSnapshotState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_getSnapshotState_result(err);
        output.writeMessageBegin("getSnapshotState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSnapshotState(args.tableName, args.snapshotName,  function (err, result) {
      var result = new AdminService_getSnapshotState_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSnapshotState", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AdminServiceProcessor.prototype.process_getQuotaInfo = function(seqid, input, output) {
  var args = new AdminService_getQuotaInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getQuotaInfo.length === 1) {
    Q.fcall(this._handler.getQuotaInfo, args.spaceId)
      .then(function(result) {
        var result = new AdminService_getQuotaInfo_result({success: result});
        output.writeMessageBegin("getQuotaInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new AdminService_getQuotaInfo_result(err);
        output.writeMessageBegin("getQuotaInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getQuotaInfo(args.spaceId,  function (err, result) {
      var result = new AdminService_getQuotaInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getQuotaInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

