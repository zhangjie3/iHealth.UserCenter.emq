/// <reference path="BaseService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


  /**
   * 保存应用信息，用于注册第三方应用OAuth信息
   */
  saveAppInfo(appInfo: AppInfo): void;

  /**
   * 保存应用信息，用于注册第三方应用OAuth信息
   */
  saveAppInfo(appInfo: AppInfo, callback: Function): void;

  /**
   * 查询应用信息
   */
  getAppInfo(appId: string): AppInfo;

  /**
   * 查询应用信息
   */
  getAppInfo(appId: string, callback: Function): void;

  /**
   * 查询指定用户所有应用信息
   */
  findAllApps(): AppInfo[];

  /**
   * 查询指定用户所有应用信息
   */
  findAllApps(, callback: Function): void;

  /**
   * 获取指定用户所有表信息
   */
  findAllTables(): TableInfo[];

  /**
   * 获取指定用户所有表信息
   */
  findAllTables(, callback: Function): void;

  /**
   * 创建表
   */
  createTable(tableName: string, tableSpec: TableSpec): TableInfo;

  /**
   * 创建表
   */
  createTable(tableName: string, tableSpec: TableSpec, callback: Function): void;

  /**
   * 删除表
   */
  dropTable(tableName: string): void;

  /**
   * 删除表
   */
  dropTable(tableName: string, callback: Function): void;

  /**
   * 延迟删除表
   */
  lazyDropTable(tableName: string): void;

  /**
   * 延迟删除表
   */
  lazyDropTable(tableName: string, callback: Function): void;

  /**
   * 修改表
   */
  alterTable(tableName: string, tableSpec: TableSpec): void;

  /**
   * 修改表
   */
  alterTable(tableName: string, tableSpec: TableSpec, callback: Function): void;

  /**
   * 克隆表
   */
  cloneTable(srcName: string, destTable: string, flushTable: boolean): void;

  /**
   * 克隆表
   */
  cloneTable(srcName: string, destTable: string, flushTable: boolean, callback: Function): void;

  /**
   * 关闭表读写操作
   */
  disableTable(tableName: string): void;

  /**
   * 关闭表读写操作
   */
  disableTable(tableName: string, callback: Function): void;

  /**
   * 打开表读写操作
   */
  enableTable(tableName: string): void;

  /**
   * 打开表读写操作
   */
  enableTable(tableName: string, callback: Function): void;

  /**
   * 获取表定义
   */
  describeTable(tableName: string): TableSpec;

  /**
   * 获取表定义
   */
  describeTable(tableName: string, callback: Function): void;

  /**
   * 获取表状态等元信息
   */
  getTableStatus(tableName: string): TableStatus;

  /**
   * 获取表状态等元信息
   */
  getTableStatus(tableName: string, callback: Function): void;

  /**
   * 获取表状态
   */
  getTableState(tableName: string): TableState;

  /**
   * 获取表状态
   */
  getTableState(tableName: string, callback: Function): void;

  /**
   * 获取表分布信息，如用于MapReduce应用
   */
  getTableSplits(tableName: string, startKey: { [k: string]: Datum; }, stopKey: { [k: string]: Datum; }): TableSplit[];

  /**
   * 获取表分布信息，如用于MapReduce应用
   */
  getTableSplits(tableName: string, startKey: { [k: string]: Datum; }, stopKey: { [k: string]: Datum; }, callback: Function): void;

  /**
   * 查询表统计指标
   */
  queryMetric(query: MetricQueryRequest): TimeSeriesData;

  /**
   * 查询表统计指标
   */
  queryMetric(query: MetricQueryRequest, callback: Function): void;

  /**
   * 批量查询表统计指标
   */
  queryMetrics(queries: MetricQueryRequest[]): TimeSeriesData[];

  /**
   * 批量查询表统计指标
   */
  queryMetrics(queries: MetricQueryRequest[], callback: Function): void;

  /**
   * 获取AppInfo列表,只包括appId和appName
   */
  findAllAppInfo(): AppInfo[];

  /**
   * 获取AppInfo列表,只包括appId和appName
   */
  findAllAppInfo(, callback: Function): void;
}
